structure StringCvt{
 type radix
 type realfmt
 type reader
 type cs
 val +
 val -
 val <
 val >
 val padLeft
 val padRight
 val revImplode
 val splitl
 val takel
 val dropl
 val skipWS
 val scanString
}
structure Char{
}
structure Substring{
}
structure CharArray{
 structure String => structure Text . structure CharArray . structure String
 structure A => structure Text . structure CharArray . structure A
 type elem => structure Text . structure CharArray
 type vector => structure Text . structure CharArray
 type array => structure Text . structure CharArray
 val --
 val ++
 val uupd
 val usub
 val vuupd
 val vusub
 val vlength
 val maxLen
 val array
 val tabulate
 val fromList
 val length
 val sub
 val update
 val vector
 val copy
 val copyVec
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure CharVector{
}
structure StringImp{
 type char
 type string
 val +
 val -
 val <
 val <=
 val >
 val >=
 val unsafeSub
 val unsafeUpdate
 val rev
 val maxSize
 val size
 val unsafeCreate
 val create
 val str
 val sub
 val substring
 val extract
 val ^
 val concat
 val concatWith
 val implode
 val explode
 val map
 val translate
 val tokens
 val fields
 val isPrefix
 val isSuffix
 val isSubstring
 val compare
 val collate
 val sgtr
 val <=
 val <
 val >=
 val >
 val fromString'
 val fromString
 val toString
 val fromCString
 val toCString
}
structure Text{
 structure Char{
 }
 structure String{
  type char => structure StringImp
  type string => structure StringImp
  val +
  val -
  val <
  val <=
  val >
  val >=
  val unsafeSub
  val unsafeUpdate
  val rev
  val maxSize
  val size
  val unsafeCreate
  val create
  val str
  val sub
  val substring
  val extract
  val ^
  val concat
  val concatWith
  val implode
  val explode
  val map
  val translate
  val tokens
  val fields
  val isPrefix
  val isSuffix
  val isSubstring
  val compare
  val collate
  val sgtr
  val <=
  val <
  val >=
  val >
  val fromString'
  val fromString
  val toString
  val fromCString
  val toCString
 }
 structure Substring{
 }
 structure CharVector{
 }
 structure CharArray{
  structure String => structure Text . structure CharArray . structure String
  structure A => structure Text . structure CharArray . structure A
  type elem => structure Text . structure CharArray
  type vector => structure Text . structure CharArray
  type array => structure Text . structure CharArray
  val --
  val ++
  val uupd
  val usub
  val vuupd
  val vusub
  val vlength
  val maxLen
  val array
  val tabulate
  val fromList
  val length
  val sub
  val update
  val vector
  val copy
  val copyVec
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
}
structure String{
 type char => structure StringImp
 type string => structure StringImp
 val +
 val -
 val <
 val <=
 val >
 val >=
 val unsafeSub
 val unsafeUpdate
 val rev
 val maxSize
 val size
 val unsafeCreate
 val create
 val str
 val sub
 val substring
 val extract
 val ^
 val concat
 val concatWith
 val implode
 val explode
 val map
 val translate
 val tokens
 val fields
 val isPrefix
 val isSuffix
 val isSubstring
 val compare
 val collate
 val sgtr
 val <=
 val <
 val >=
 val >
 val fromString'
 val fromString
 val toString
 val fromCString
 val toCString
}
structure IntInf{
 type int => structure IntInfImp
 type rep => structure IntInfImp
 val precision
 val minInt
 val maxInt
 val toInt
 val fromInt
 val toLarge
 val fromLarge
 val concrete
 val abstract
 val baseBits
 val binary
 val shiftAmount
 val <<
 val >>
 val &&
 val ||
 val bitfmt
 val decBase
 val decDigs
 val decfmt
 val fmt
 val sign
 val sameSign
 val notb
 val log2
 val orb
 val andb
 val xorb
 val lshift
 val rshift
 val startscan
 val bitscan
 val decscan
 val binDigVal
 val octDigVal
 val hexDigVal
 val scan
 val ~
 val +
 val *
 val div
 val mod
 val -
 val <
 val <=
 val >
 val >=
 val divMod
 val quotRem
 val quot
 val rem
 val compare
 val abs
 val pow
 val max
 val min
 val toString
 val fromString
 val <<
 val ~>>
}
structure LargeWordImp{
 structure W32 => structure Word32Imp . structure W32
 type word => structure Word32Imp
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val compare
 val >
 val >=
 val <
 val <=
 val <<
 val >>
 val ~>>
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure LargeWord{
 structure W32 => structure Word32Imp . structure W32
 type word => structure Word32Imp
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val compare
 val >
 val >=
 val <
 val <=
 val <<
 val >>
 val ~>>
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure Word32Imp{
 structure W32{
 }
 type word
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val compare
 val >
 val >=
 val <
 val <=
 val <<
 val >>
 val ~>>
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure Word32{
 structure W32 => structure Word32Imp . structure W32
 type word => structure Word32Imp
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val compare
 val >
 val >=
 val <
 val <=
 val <<
 val >>
 val ~>>
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure Word31Imp{
 structure W31{
 }
 structure LW{
  structure W32 => structure Word32Imp . structure W32
  type word => structure Word32Imp
  val wordSize
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val toInt
  val toIntX
  val fromInt
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val <<
  val >>
  val ~>>
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 type word
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val <<
 val >>
 val ~>>
 val compare
 val >
 val >=
 val <
 val <=
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure WordImp{
 structure W31 => structure Word31Imp . structure W31
 structure LW => structure Word31Imp . structure LW
 type word => structure Word31Imp
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val <<
 val >>
 val ~>>
 val compare
 val >
 val >=
 val <
 val <=
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure Word{
 structure W31 => structure Word31Imp . structure W31
 structure LW => structure Word31Imp . structure LW
 type word => structure Word31Imp
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val <<
 val >>
 val ~>>
 val compare
 val >
 val >=
 val <
 val <=
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure IntInfImp{
 type int
 type rep
 val precision
 val minInt
 val maxInt
 val toInt
 val fromInt
 val toLarge
 val fromLarge
 val concrete
 val abstract
 val baseBits
 val binary
 val shiftAmount
 val <<
 val >>
 val &&
 val ||
 val bitfmt
 val decBase
 val decDigs
 val decfmt
 val fmt
 val sign
 val sameSign
 val notb
 val log2
 val orb
 val andb
 val xorb
 val lshift
 val rshift
 val startscan
 val bitscan
 val decscan
 val binDigVal
 val octDigVal
 val hexDigVal
 val scan
 val ~
 val +
 val *
 val div
 val mod
 val -
 val <
 val <=
 val >
 val >=
 val divMod
 val quotRem
 val quot
 val rem
 val compare
 val abs
 val pow
 val max
 val min
 val toString
 val fromString
 val <<
 val ~>>
}
structure LargeIntImp{
 type int => structure IntInfImp
 type rep => structure IntInfImp
 val precision
 val minInt
 val maxInt
 val toInt
 val fromInt
 val toLarge
 val fromLarge
 val concrete
 val abstract
 val baseBits
 val binary
 val shiftAmount
 val <<
 val >>
 val &&
 val ||
 val bitfmt
 val decBase
 val decDigs
 val decfmt
 val fmt
 val sign
 val sameSign
 val notb
 val log2
 val orb
 val andb
 val xorb
 val lshift
 val rshift
 val startscan
 val bitscan
 val decscan
 val binDigVal
 val octDigVal
 val hexDigVal
 val scan
 val ~
 val +
 val *
 val div
 val mod
 val -
 val <
 val <=
 val >
 val >=
 val divMod
 val quotRem
 val quot
 val rem
 val compare
 val abs
 val pow
 val max
 val min
 val toString
 val fromString
 val <<
 val ~>>
}
structure LargeInt{
 type int => structure IntInfImp
 type rep => structure IntInfImp
 val precision
 val minInt
 val maxInt
 val toInt
 val fromInt
 val toLarge
 val fromLarge
 val concrete
 val abstract
 val baseBits
 val binary
 val shiftAmount
 val <<
 val >>
 val &&
 val ||
 val bitfmt
 val decBase
 val decDigs
 val decfmt
 val fmt
 val sign
 val sameSign
 val notb
 val log2
 val orb
 val andb
 val xorb
 val lshift
 val rshift
 val startscan
 val bitscan
 val decscan
 val binDigVal
 val octDigVal
 val hexDigVal
 val scan
 val ~
 val +
 val *
 val div
 val mod
 val -
 val <
 val <=
 val >
 val >=
 val divMod
 val quotRem
 val quot
 val rem
 val compare
 val abs
 val pow
 val max
 val min
 val toString
 val fromString
 val <<
 val ~>>
}
structure Int31Imp{
 structure I31{
 }
 structure I32{
 }
 type int
 val precision
 val minIntVal
 val minInt
 val maxInt
 val toLarge
 val fromLarge
 val toInt
 val fromInt
 val ~
 val *
 val +
 val -
 val div
 val mod
 val quot
 val rem
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val >
 val >=
 val <
 val <=
 val fmt
 val scan
 val toString
 val fromString
 exception Div
 exception Overflow
}
structure IntImp{
 structure I31 => structure Int31Imp . structure I31
 structure I32 => structure Int31Imp . structure I32
 type int => structure Int31Imp
 val precision
 val minIntVal
 val minInt
 val maxInt
 val toLarge
 val fromLarge
 val toInt
 val fromInt
 val ~
 val *
 val +
 val -
 val div
 val mod
 val quot
 val rem
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val >
 val >=
 val <
 val <=
 val fmt
 val scan
 val toString
 val fromString
 exception Div
 exception Overflow
}
structure Int{
 structure I31 => structure Int31Imp . structure I31
 structure I32 => structure Int31Imp . structure I32
 type int => structure Int31Imp
 val precision
 val minIntVal
 val minInt
 val maxInt
 val toLarge
 val fromLarge
 val toInt
 val fromInt
 val ~
 val *
 val +
 val -
 val div
 val mod
 val quot
 val rem
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val >
 val >=
 val <
 val <=
 val fmt
 val scan
 val toString
 val fromString
 exception Div
 exception Overflow
}
structure Int31{
 structure I31 => structure Int31Imp . structure I31
 structure I32 => structure Int31Imp . structure I32
 type int => structure Int31Imp
 val precision
 val minIntVal
 val minInt
 val maxInt
 val toLarge
 val fromLarge
 val toInt
 val fromInt
 val ~
 val *
 val +
 val -
 val div
 val mod
 val quot
 val rem
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val >
 val >=
 val <
 val <=
 val fmt
 val scan
 val toString
 val fromString
 exception Div
 exception Overflow
}
structure Int32Imp{
 structure I32{
 }
 type int
 val precision
 val minIntVal
 val minInt
 val maxInt
 val *
 val quot
 val rem
 val div
 val mod
 val +
 val -
 val ~
 val <
 val <=
 val >
 val >=
 val =
 val <>
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val scan
 val fmt
 val toString
 val fromString
 val toInt
 val fromInt
 val toLarge
 val fromLarge
}
structure Int32{
 structure I32 => structure Int32Imp . structure I32
 type int => structure Int32Imp
 val precision
 val minIntVal
 val minInt
 val maxInt
 val *
 val quot
 val rem
 val div
 val mod
 val +
 val -
 val ~
 val <
 val <=
 val >
 val >=
 val =
 val <>
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val scan
 val fmt
 val toString
 val fromString
 val toInt
 val fromInt
 val toLarge
 val fromLarge
}
structure FixedIntImp{
 structure I32 => structure Int32Imp . structure I32
 type int => structure Int32Imp
 val precision
 val minIntVal
 val minInt
 val maxInt
 val *
 val quot
 val rem
 val div
 val mod
 val +
 val -
 val ~
 val <
 val <=
 val >
 val >=
 val =
 val <>
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val scan
 val fmt
 val toString
 val fromString
 val toInt
 val fromInt
 val toLarge
 val fromLarge
}
structure FixedInt{
 structure I32 => structure Int32Imp . structure I32
 type int => structure Int32Imp
 val precision
 val minIntVal
 val minInt
 val maxInt
 val *
 val quot
 val rem
 val div
 val mod
 val +
 val -
 val ~
 val <
 val <=
 val >
 val >=
 val =
 val <>
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val scan
 val fmt
 val toString
 val fromString
 val toInt
 val fromInt
 val toLarge
 val fromLarge
}
structure IEEEReal{
 structure Int{
  structure I31 => structure Int31Imp . structure I31
  structure I32 => structure Int31Imp . structure I32
  type int => structure Int31Imp
  val precision
  val minIntVal
  val minInt
  val maxInt
  val toLarge
  val fromLarge
  val toInt
  val fromInt
  val ~
  val *
  val +
  val -
  val div
  val mod
  val quot
  val rem
  val min
  val max
  val abs
  val sign
  val sameSign
  val compare
  val >
  val >=
  val <
  val <=
  val fmt
  val scan
  val toString
  val fromString
  exception Div
  exception Overflow
 }
 type real_order
 type nan_mode
 type float_class
 type rounding_mode
 type decimal_approx
 val ctlRoundingMode
 val intToRM
 val setRoundingMode'
 val setRoundingMode
 val getRoundingMode
 val toString
 val scan
 val fromString
 exception Unordered
}
structure Math64{
 structure I{
 }
 type real
 val +
 val -
 val *
 val /
 val ~
 val <
 val <=
 val >
 val >=
 val ==
 val lessu
 val pi
 val e
 val isNan
 val plusInfinity
 val minusInfinity
 val NaN
 val two_to_the_54
 val two_to_the_minus_54
 val scalb
 val logb
 val negone
 val zero
 val half
 val one
 val two
 val four
 val copysign
 val abs
 val mod
 val floor
 val real
 val maxint
 val realround
 val PIo4
 val PIo2
 val PI3o4
 val PI
 val PI2
 val oneOver2Pi
 val exp__E
 val ln2hi
 val ln2lo
 val sqrt2
 val lnhuge
 val lntiny
 val invln2
 val exp
 val log__L
 val ln
 val oneOverln10
 val log10
 val isInt
 val isOddInt
 val intpow
 val pow
 val atan
 val atan2
 val sqrt
 val sin
 val cos
 val tan
 val asin
 val acos
 val cosh
 val sinh
 val tanh
}
structure Real64Imp{
 structure I{
 }
 structure Math{
  structure I => structure Math64 . structure I
  type real => structure Math64
  val +
  val -
  val *
  val /
  val ~
  val <
  val <=
  val >
  val >=
  val ==
  val lessu
  val pi
  val e
  val isNan
  val plusInfinity
  val minusInfinity
  val NaN
  val two_to_the_54
  val two_to_the_minus_54
  val scalb
  val logb
  val negone
  val zero
  val half
  val one
  val two
  val four
  val copysign
  val abs
  val mod
  val floor
  val real
  val maxint
  val realround
  val PIo4
  val PIo2
  val PI3o4
  val PI
  val PI2
  val oneOver2Pi
  val exp__E
  val ln2hi
  val ln2lo
  val sqrt2
  val lnhuge
  val lntiny
  val invln2
  val exp
  val log__L
  val ln
  val oneOverln10
  val log10
  val isInt
  val isOddInt
  val intpow
  val pow
  val atan
  val atan2
  val sqrt
  val sin
  val cos
  val tan
  val asin
  val acos
  val cosh
  val sinh
  val tanh
 }
 type real
 val *+
 val *-
 val ==
 val !=
 val unordered
 val ?=
 val isNormal
 val maxFinite
 val minNormalPos
 val minPos
 val posInf
 val negInf
 val isFinite
 val isNan
 val floor
 val ceil
 val trunc
 val round
 val maxInt
 val realFloor
 val realCeil
 val realTrunc
 val abs
 val fromInt
 val toInt
 val toLarge
 val fromLarge
 val sign
 val signBit
 val sameSign
 val copySign
 val compare
 val compareReal
 val class
 val radix
 val precision
 val radix_to_the_precision
 val two_to_the_neg_1000
 val toManExp
 val fromManExp
 val fromLargeInt
 val whole
 val split
 val realMod
 val rem
 val checkFloat
 val rbase
 val toLargeInt
 val nextAfter
 val min
 val max
 val toDecimal
 val fromDecimal
 val fmt
 val toString
 val scan
 val fromString
 val ~
 val +
 val -
 val *
 val /
 val >
 val <
 val >=
 val <=
}
structure LargeRealImp{
 structure I => structure Real64Imp . structure I
 structure Math => structure Real64Imp . structure Math
 type real => structure Real64Imp
 val *+
 val *-
 val ==
 val !=
 val unordered
 val ?=
 val isNormal
 val maxFinite
 val minNormalPos
 val minPos
 val posInf
 val negInf
 val isFinite
 val isNan
 val floor
 val ceil
 val trunc
 val round
 val maxInt
 val realFloor
 val realCeil
 val realTrunc
 val abs
 val fromInt
 val toInt
 val toLarge
 val fromLarge
 val sign
 val signBit
 val sameSign
 val copySign
 val compare
 val compareReal
 val class
 val radix
 val precision
 val radix_to_the_precision
 val two_to_the_neg_1000
 val toManExp
 val fromManExp
 val fromLargeInt
 val whole
 val split
 val realMod
 val rem
 val checkFloat
 val rbase
 val toLargeInt
 val nextAfter
 val min
 val max
 val toDecimal
 val fromDecimal
 val fmt
 val toString
 val scan
 val fromString
 val ~
 val +
 val -
 val *
 val /
 val >
 val <
 val >=
 val <=
}
structure LargeReal{
 structure I => structure Real64Imp . structure I
 structure Math => structure Real64Imp . structure Math
 type real => structure Real64Imp
 val *+
 val *-
 val ==
 val !=
 val unordered
 val ?=
 val isNormal
 val maxFinite
 val minNormalPos
 val minPos
 val posInf
 val negInf
 val isFinite
 val isNan
 val floor
 val ceil
 val trunc
 val round
 val maxInt
 val realFloor
 val realCeil
 val realTrunc
 val abs
 val fromInt
 val toInt
 val toLarge
 val fromLarge
 val sign
 val signBit
 val sameSign
 val copySign
 val compare
 val compareReal
 val class
 val radix
 val precision
 val radix_to_the_precision
 val two_to_the_neg_1000
 val toManExp
 val fromManExp
 val fromLargeInt
 val whole
 val split
 val realMod
 val rem
 val checkFloat
 val rbase
 val toLargeInt
 val nextAfter
 val min
 val max
 val toDecimal
 val fromDecimal
 val fmt
 val toString
 val scan
 val fromString
 val ~
 val +
 val -
 val *
 val /
 val >
 val <
 val >=
 val <=
}
structure PositionImp{
 structure I31 => structure Int31Imp . structure I31
 structure I32 => structure Int31Imp . structure I32
 type int => structure Int31Imp
 val precision
 val minIntVal
 val minInt
 val maxInt
 val toLarge
 val fromLarge
 val toInt
 val fromInt
 val ~
 val *
 val +
 val -
 val div
 val mod
 val quot
 val rem
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val >
 val >=
 val <
 val <=
 val fmt
 val scan
 val toString
 val fromString
 exception Div
 exception Overflow
}
structure Position{
 structure I31 => structure Int31Imp . structure I31
 structure I32 => structure Int31Imp . structure I32
 type int => structure Int31Imp
 val precision
 val minIntVal
 val minInt
 val maxInt
 val toLarge
 val fromLarge
 val toInt
 val fromInt
 val ~
 val *
 val +
 val -
 val div
 val mod
 val quot
 val rem
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val >
 val >=
 val <
 val <=
 val fmt
 val scan
 val toString
 val fromString
 exception Div
 exception Overflow
}
structure RealImp{
 structure I => structure Real64Imp . structure I
 structure Math => structure Real64Imp . structure Math
 type real => structure Real64Imp
 val *+
 val *-
 val ==
 val !=
 val unordered
 val ?=
 val isNormal
 val maxFinite
 val minNormalPos
 val minPos
 val posInf
 val negInf
 val isFinite
 val isNan
 val floor
 val ceil
 val trunc
 val round
 val maxInt
 val realFloor
 val realCeil
 val realTrunc
 val abs
 val fromInt
 val toInt
 val toLarge
 val fromLarge
 val sign
 val signBit
 val sameSign
 val copySign
 val compare
 val compareReal
 val class
 val radix
 val precision
 val radix_to_the_precision
 val two_to_the_neg_1000
 val toManExp
 val fromManExp
 val fromLargeInt
 val whole
 val split
 val realMod
 val rem
 val checkFloat
 val rbase
 val toLargeInt
 val nextAfter
 val min
 val max
 val toDecimal
 val fromDecimal
 val fmt
 val toString
 val scan
 val fromString
 val ~
 val +
 val -
 val *
 val /
 val >
 val <
 val >=
 val <=
}
structure Real{
 structure I => structure Real64Imp . structure I
 structure Math => structure Real64Imp . structure Math
 type real => structure Real64Imp
 val *+
 val *-
 val ==
 val !=
 val unordered
 val ?=
 val isNormal
 val maxFinite
 val minNormalPos
 val minPos
 val posInf
 val negInf
 val isFinite
 val isNan
 val floor
 val ceil
 val trunc
 val round
 val maxInt
 val realFloor
 val realCeil
 val realTrunc
 val abs
 val fromInt
 val toInt
 val toLarge
 val fromLarge
 val sign
 val signBit
 val sameSign
 val copySign
 val compare
 val compareReal
 val class
 val radix
 val precision
 val radix_to_the_precision
 val two_to_the_neg_1000
 val toManExp
 val fromManExp
 val fromLargeInt
 val whole
 val split
 val realMod
 val rem
 val checkFloat
 val rbase
 val toLargeInt
 val nextAfter
 val min
 val max
 val toDecimal
 val fromDecimal
 val fmt
 val toString
 val scan
 val fromString
 val ~
 val +
 val -
 val *
 val /
 val >
 val <
 val >=
 val <=
}
structure Real64{
 structure I => structure Real64Imp . structure I
 structure Math => structure Real64Imp . structure Math
 type real => structure Real64Imp
 val *+
 val *-
 val ==
 val !=
 val unordered
 val ?=
 val isNormal
 val maxFinite
 val minNormalPos
 val minPos
 val posInf
 val negInf
 val isFinite
 val isNan
 val floor
 val ceil
 val trunc
 val round
 val maxInt
 val realFloor
 val realCeil
 val realTrunc
 val abs
 val fromInt
 val toInt
 val toLarge
 val fromLarge
 val sign
 val signBit
 val sameSign
 val copySign
 val compare
 val compareReal
 val class
 val radix
 val precision
 val radix_to_the_precision
 val two_to_the_neg_1000
 val toManExp
 val fromManExp
 val fromLargeInt
 val whole
 val split
 val realMod
 val rem
 val checkFloat
 val rbase
 val toLargeInt
 val nextAfter
 val min
 val max
 val toDecimal
 val fromDecimal
 val fmt
 val toString
 val scan
 val fromString
 val ~
 val +
 val -
 val *
 val /
 val >
 val <
 val >=
 val <=
}
structure SysWordImp{
 structure W32 => structure Word32Imp . structure W32
 type word => structure Word32Imp
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val compare
 val >
 val >=
 val <
 val <=
 val <<
 val >>
 val ~>>
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure SysWord{
 structure W32 => structure Word32Imp . structure W32
 type word => structure Word32Imp
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val compare
 val >
 val >=
 val <
 val <=
 val <<
 val >>
 val ~>>
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure Word8Imp{
 structure W8{
 }
 structure W31{
 }
 structure LW{
  structure W32 => structure Word32Imp . structure W32
  type word => structure Word32Imp
  val wordSize
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val toInt
  val toIntX
  val fromInt
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val <<
  val >>
  val ~>>
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 type word
 val wordSize
 val wordSizeW
 val wordShift
 val adapt
 val toInt
 val toIntX
 val fromInt
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val <<
 val >>
 val ~>>
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val compare
 val >
 val >=
 val <
 val <=
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure Word8{
 structure W8 => structure Word8Imp . structure W8
 structure W31 => structure Word8Imp . structure W31
 structure LW => structure Word8Imp . structure LW
 type word => structure Word8Imp
 val wordSize
 val wordSizeW
 val wordShift
 val adapt
 val toInt
 val toIntX
 val fromInt
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val <<
 val >>
 val ~>>
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val compare
 val >
 val >=
 val <
 val <=
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure Word31{
 structure W31 => structure Word31Imp . structure W31
 structure LW => structure Word31Imp . structure LW
 type word => structure Word31Imp
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val *
 val +
 val -
 val div
 val mod
 val <<
 val >>
 val ~>>
 val compare
 val >
 val >=
 val <
 val <=
 val min
 val max
 val fmt
 val toString
 val scan
 val fromString
}
structure PreBasis{
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val scanString
 val skipWS
 val getNChars
 exception Time
 exception Time
 exception Time
 exception Time
 exception Time
 exception Time
}
structure TimeImp{
 structure PB{
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val scanString
  val skipWS
  val getNChars
  exception Time
  exception Time
  exception Time
  exception Time
  exception Time
  exception Time
 }
 structure LInt{
  type int => structure IntInfImp
  type rep => structure IntInfImp
  val precision
  val minInt
  val maxInt
  val toInt
  val fromInt
  val toLarge
  val fromLarge
  val concrete
  val abstract
  val baseBits
  val binary
  val shiftAmount
  val <<
  val >>
  val &&
  val ||
  val bitfmt
  val decBase
  val decDigs
  val decfmt
  val fmt
  val sign
  val sameSign
  val notb
  val log2
  val orb
  val andb
  val xorb
  val lshift
  val rshift
  val startscan
  val bitscan
  val decscan
  val binDigVal
  val octDigVal
  val hexDigVal
  val scan
  val ~
  val +
  val *
  val div
  val mod
  val -
  val <
  val <=
  val >
  val >=
  val divMod
  val quotRem
  val quot
  val rem
  val compare
  val abs
  val pow
  val max
  val min
  val toString
  val fromString
  val <<
  val ~>>
 }
 structure Real{
  structure I => structure Real64Imp . structure I
  structure Math => structure Real64Imp . structure Math
  type real => structure Real64Imp
  val *+
  val *-
  val ==
  val !=
  val unordered
  val ?=
  val isNormal
  val maxFinite
  val minNormalPos
  val minPos
  val posInf
  val negInf
  val isFinite
  val isNan
  val floor
  val ceil
  val trunc
  val round
  val maxInt
  val realFloor
  val realCeil
  val realTrunc
  val abs
  val fromInt
  val toInt
  val toLarge
  val fromLarge
  val sign
  val signBit
  val sameSign
  val copySign
  val compare
  val compareReal
  val class
  val radix
  val precision
  val radix_to_the_precision
  val two_to_the_neg_1000
  val toManExp
  val fromManExp
  val fromLargeInt
  val whole
  val split
  val realMod
  val rem
  val checkFloat
  val rbase
  val toLargeInt
  val nextAfter
  val min
  val max
  val toDecimal
  val fromDecimal
  val fmt
  val toString
  val scan
  val fromString
  val ~
  val +
  val -
  val *
  val /
  val >
  val <
  val >=
  val <=
 }
 structure Int{
  structure I31 => structure Int31Imp . structure I31
  structure I32 => structure Int31Imp . structure I32
  type int => structure Int31Imp
  val precision
  val minIntVal
  val minInt
  val maxInt
  val toLarge
  val fromLarge
  val toInt
  val fromInt
  val ~
  val *
  val +
  val -
  val div
  val mod
  val quot
  val rem
  val min
  val max
  val abs
  val sign
  val sameSign
  val compare
  val >
  val >=
  val <
  val <=
  val fmt
  val scan
  val toString
  val fromString
  exception Div
  exception Overflow
 }
 structure Int32{
  structure I32 => structure Int32Imp . structure I32
  type int => structure Int32Imp
  val precision
  val minIntVal
  val minInt
  val maxInt
  val *
  val quot
  val rem
  val div
  val mod
  val +
  val -
  val ~
  val <
  val <=
  val >
  val >=
  val =
  val <>
  val min
  val max
  val abs
  val sign
  val sameSign
  val compare
  val scan
  val fmt
  val toString
  val fromString
  val toInt
  val fromInt
  val toLarge
  val fromLarge
 }
 structure String{
  type char => structure StringImp
  type string => structure StringImp
  val +
  val -
  val <
  val <=
  val >
  val >=
  val unsafeSub
  val unsafeUpdate
  val rev
  val maxSize
  val size
  val unsafeCreate
  val create
  val str
  val sub
  val substring
  val extract
  val ^
  val concat
  val concatWith
  val implode
  val explode
  val map
  val translate
  val tokens
  val fields
  val isPrefix
  val isSuffix
  val isSubstring
  val compare
  val collate
  val sgtr
  val <=
  val <
  val >=
  val >
  val fromString'
  val fromString
  val toString
  val fromCString
  val toCString
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 exception Time
 exception Time
 exception Time
 exception Time
 exception Time
 exception Time
 exception Time
}
structure Time{
 structure PB => structure TimeImp . structure PB
 structure LInt => structure TimeImp . structure LInt
 structure Real => structure TimeImp . structure Real
 structure Int => structure TimeImp . structure Int
 structure Int32 => structure TimeImp . structure Int32
 structure String => structure TimeImp . structure String
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 structure PB{
 }
 structure LInt{
 }
 structure Real{
 }
 structure Int{
 }
 structure Int32{
 }
 structure String{
 }
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val quot
 val zeroTime
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val fromReal
 val toReal
 val now
 val rndv
 val fmt
 val scan
 val toString
 val fromString
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 exception Time
 exception Time
 exception Time
 exception Time
 exception Time
 exception Time
 exception Time
}
structure OS{
 structure FileSys{
 }
 structure Path{
 }
 structure Process{
 }
 structure IO{
 }
 structure FileSys => structure OSImp . structure FileSys
 structure Path => structure OSImp . structure Path
 structure Process => structure OSImp . structure Process
 structure IO => structure OSImp . structure IO
 structure FileSys{
 }
 structure Path{
 }
 structure Process{
 }
 structure IO{
 }
 structure FileSys => structure OSImp . structure FileSys
 structure Path => structure OSImp . structure Path
 structure Process => structure OSImp . structure Process
 structure IO => structure OSImp . structure IO
 structure FileSys{
 }
 structure Path{
 }
 structure Process{
 }
 structure IO{
 }
 structure FileSys => structure OSImp . structure FileSys
 structure Path => structure OSImp . structure Path
 structure Process => structure OSImp . structure Process
 structure IO => structure OSImp . structure IO
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 exception SysErr
 exception SysErr
 exception SysErr
 exception SysErr
 exception SysErr
 exception SysErr
}
structure OS_Path{
 structure P => functor OS_PathFn . structure P
 structure SS => functor OS_PathFn . structure SS
 val arcSepStr
 val parentArc
 val currentArc
 val concatArcs
 val validVolume
 val fromString
 val toString
 val getVolume
 val getParent
 val splitDirFile
 val joinDirFile
 val dir
 val file
 val splitBaseExt
 val joinBaseExt
 val base
 val ext
 val mkCanonical
 val isCanonical
 val isAbsolute
 val isRelative
 val mkAbsolute
 val mkRelative
 val isRoot
 val concat
 val fromUnixPath
 val toUnixPath
 exception Path
}
structure POSIX_Error{
 type syserror
 val cfun
 val errors
 val osVal
 val syserror
 val errmsg
 val geterror
 val toWord
 val fromWord
 val errorMsg
 val errorName
 val toobig
 val acces
 val again
 val badf
 val badmsg
 val busy
 val canceled
 val child
 val deadlk
 val dom
 val exist
 val fault
 val fbig
 val inprogress
 val intr
 val inval
 val io
 val isdir
 val loop
 val mfile
 val mlink
 val msgsize
 val nametoolong
 val nfile
 val nodev
 val noent
 val noexec
 val nolck
 val nomem
 val nospc
 val nosys
 val notdir
 val notempty
 val notsup
 val notty
 val nxio
 val perm
 val pipe
 val range
 val rofs
 val spipe
 val srch
 val xdev
}
structure SysInt{
 structure I31 => structure Int31Imp . structure I31
 structure I32 => structure Int31Imp . structure I32
 type int => structure Int31Imp
 val precision
 val minIntVal
 val minInt
 val maxInt
 val toLarge
 val fromLarge
 val toInt
 val fromInt
 val ~
 val *
 val +
 val -
 val div
 val mod
 val quot
 val rem
 val min
 val max
 val abs
 val sign
 val sameSign
 val compare
 val >
 val >=
 val <
 val <=
 val fmt
 val scan
 val toString
 val fromString
 exception Div
 exception Overflow
}
structure POSIX_Signal{
 type signal
 val toWord
 val fromWord
 val osval
 val abrt
 val alrm
 val fpe
 val hup
 val ill
 val int
 val kill
 val pipe
 val quit
 val segv
 val term
 val usr1
 val usr2
 val chld
 val cont
 val stop
 val tstp
 val ttin
 val ttou
 val bus
}
structure POSIX_Process{
 structure Sig{
  type signal => structure POSIX_Signal
  val toWord
  val fromWord
  val osval
  val abrt
  val alrm
  val fpe
  val hup
  val ill
  val int
  val kill
  val pipe
  val quit
  val segv
  val term
  val usr1
  val usr2
  val chld
  val cont
  val stop
  val tstp
  val ttin
  val ttou
  val bus
 }
 structure W{
  type flags
  val fromWord
  val toWord
  val flags
  val anySet
  val allSet
  val orF
  val untraced
 }
 type word
 type s_int
 type signal
 type pid
 type waitpid_arg
 type killpid_arg
 type exit_status
 val ++
 val &
 val pidToWord
 val wordToPid
 val cfun
 val osval
 val w_osval
 val sysconf
 val fork'
 val fork
 val exec
 val exece
 val execp
 val waitpid'
 val argToInt
 val mkExitStatus
 val wnohang
 val waitpid
 val waitpid_nh
 val wait
 val exit
 val kill'
 val kill
 val alarm
 val sleep
 val pause
}
structure POSIX_FileSys{
 structure S{
  type flags
  type mode
  val fromWord
  val toWord
  val flags
  val anySet
  val allSet
  val irwxu
  val irusr
  val iwusr
  val ixusr
  val irwxg
  val irgrp
  val iwgrp
  val ixgrp
  val irwxo
  val iroth
  val iwoth
  val ixoth
  val isuid
  val isgid
 }
 structure O{
  type flags
  val fromWord
  val toWord
  val flags
  val anySet
  val allSet
  val append
  val dsync
  val excl
  val noctty
  val nonblock
  val rsync
  val sync
  val o_trunc
  val trunc
  val o_creat
  val crflags
 }
 structure ST{
  type stat
  val isDir
  val isChr
  val isBlk
  val isReg
  val isFIFO
  val isLink
  val isSock
  val mode
  val ino
  val dev
  val nlink
  val uid
  val gid
  val size
  val atime
  val mtime
  val ctime
 }
 type word
 type s_int
 type uid
 type gid
 type file_desc
 type open_mode
 type c_dirstream
 type dirstream
 type dev
 type ino
 type statrep
 type access_mode
 val ++
 val &
 val cfun
 val osval
 val w_osval
 val intOf
 val fd
 val fdToWord
 val wordToFD
 val fdToIOD
 val iodToFD
 val o_rdonly
 val o_wronly
 val o_rdwr
 val omodeFromWord
 val omodeToWord
 val uidToWord
 val wordToUid
 val gidToWord
 val wordToGid
 val opendir'
 val readdir'
 val rewinddir'
 val closedir'
 val opendir
 val readdir
 val rewinddir
 val closedir
 val chdir
 val getcwd
 val stdin
 val stdout
 val stderr
 val openf'
 val openf
 val createf
 val creat
 val umask'
 val umask
 val link'
 val link
 val rename'
 val rename
 val symlink'
 val symlink
 val mkdir'
 val mkdir
 val mkfifo'
 val mkfifo
 val unlink
 val rmdir
 val readlink
 val ftruncate'
 val ftruncate
 val devToWord
 val wordToDev
 val inoToWord
 val wordToIno
 val mkStat
 val stat'
 val lstat'
 val fstat'
 val stat
 val lstat
 val fstat
 val a_read
 val a_write
 val a_exec
 val a_file
 val amodeToWord
 val access'
 val access
 val chmod'
 val chmod
 val fchmod'
 val fchmod
 val chown'
 val chown
 val fchown'
 val fchown
 val utime'
 val utime
 val pathconf
 val fpathconf'
 val fpathconf
}
structure POSIX_IO{
 structure FS{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure OM{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure S => structure POSIX_FileSys . structure S
 structure O => structure POSIX_FileSys . structure O
 structure ST => structure POSIX_FileSys . structure ST
 structure FD{
  type flags
  val fromWord
  val toWord
  val flags
  val anySet
  val allSet
  val cloexec
 }
 structure O{
  type flags
  val fromWord
  val toWord
  val flags
  val anySet
  val allSet
  val append
  val dsync
  val nonblock
  val rsync
  val sync
 }
 structure FLock{
  type flock
  val flock
  val ltype
  val whence
  val start
  val len
  val pid
 }
 type word => structure POSIX_FileSys
 type s_int => structure POSIX_FileSys
 type uid => structure POSIX_FileSys
 type gid => structure POSIX_FileSys
 type file_desc => structure POSIX_FileSys
 type open_mode => structure POSIX_FileSys
 type c_dirstream => structure POSIX_FileSys
 type dirstream => structure POSIX_FileSys
 type dev => structure POSIX_FileSys
 type ino => structure POSIX_FileSys
 type statrep => structure POSIX_FileSys
 type access_mode => structure POSIX_FileSys
 type word
 type s_int
 type file_desc
 type pid
 type whence
 type lock_type
 type flock_rep
 val ++
 val &
 val cfun
 val osval
 val w_osval
 val intOf
 val fd
 val fdToWord
 val wordToFD
 val fdToIOD
 val iodToFD
 val o_rdonly
 val o_wronly
 val o_rdwr
 val omodeFromWord
 val omodeToWord
 val uidToWord
 val wordToUid
 val gidToWord
 val wordToGid
 val opendir'
 val readdir'
 val rewinddir'
 val closedir'
 val opendir
 val readdir
 val rewinddir
 val closedir
 val chdir
 val getcwd
 val stdin
 val stdout
 val stderr
 val openf'
 val openf
 val createf
 val creat
 val umask'
 val umask
 val link'
 val link
 val rename'
 val rename
 val symlink'
 val symlink
 val mkdir'
 val mkdir
 val mkfifo'
 val mkfifo
 val unlink
 val rmdir
 val readlink
 val ftruncate'
 val ftruncate
 val devToWord
 val wordToDev
 val inoToWord
 val wordToIno
 val mkStat
 val stat'
 val lstat'
 val fstat'
 val stat
 val lstat
 val fstat
 val a_read
 val a_write
 val a_exec
 val a_file
 val amodeToWord
 val access'
 val access
 val chmod'
 val chmod
 val fchmod'
 val fchmod
 val chown'
 val chown
 val fchown'
 val fchown
 val utime'
 val utime
 val pathconf
 val fpathconf'
 val fpathconf
 val ++
 val &
 val cfun
 val osval
 val w_osval
 val fail
 val pipe'
 val pipe
 val dup'
 val dup2'
 val dup
 val dup2
 val close'
 val close
 val read'
 val readbuf'
 val readArr
 val readVec
 val writevec'
 val writearr'
 val writeArr
 val writeVec
 val seek_set
 val seek_cur
 val seek_end
 val whToWord
 val whFromWord
 val fcntl_d
 val fcntl_gfd
 val fcntl_sfd
 val fcntl_gfl
 val fcntl_sfl
 val dupfd
 val getfd
 val setfd
 val getfl
 val setfl
 val fcntl_l
 val f_getlk
 val f_setlk
 val f_setlkw
 val f_rdlck
 val f_wrlck
 val f_unlck
 val flockToRep
 val flockFromRep
 val getlk
 val setlk
 val setlkw
 val lseek'
 val lseek
 val fsync'
 val fsync
}
structure POSIX_ProcEnv{
 structure FS{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure P{
  structure Sig => structure POSIX_Process . structure Sig
  structure W => structure POSIX_Process . structure W
  type word => structure POSIX_Process
  type s_int => structure POSIX_Process
  type signal => structure POSIX_Process
  type pid => structure POSIX_Process
  type waitpid_arg => structure POSIX_Process
  type killpid_arg => structure POSIX_Process
  type exit_status => structure POSIX_Process
  val ++
  val &
  val pidToWord
  val wordToPid
  val cfun
  val osval
  val w_osval
  val sysconf
  val fork'
  val fork
  val exec
  val exece
  val execp
  val waitpid'
  val argToInt
  val mkExitStatus
  val wnohang
  val waitpid
  val waitpid_nh
  val wait
  val exit
  val kill'
  val kill
  val alarm
  val sleep
  val pause
 }
 type pid
 type uid
 type gid
 type file_desc
 type s_int
 val cfun
 val uidToWord
 val wordToUid
 val gidToWord
 val wordToGid
 val getpid'
 val getppid'
 val getpid
 val getppid
 val getuid'
 val geteuid'
 val getgid'
 val getegid'
 val getuid
 val geteuid
 val getgid
 val getegid
 val setuid'
 val setgid'
 val setuid
 val setgid
 val getgroups'
 val getgroups
 val getlogin
 val getpgrp'
 val setsid'
 val setpgid'
 val getpgrp
 val setsid
 val setpgid
 val uname
 val sysconf
 val time'
 val time
 val times'
 val ticksPerSec
 val times
 val getenv
 val environ
 val ctermid
 val ttyname'
 val ttyname
 val isatty'
 val isatty
}
structure POSIX_Sys_DB{
 structure FS{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure Passwd{
  type passwd
  val name
  val uid
  val gid
  val home
  val shell
 }
 structure Group{
  type group
  val name
  val gid
  val members
 }
 type word
 type uid
 type gid
 val cfun
 val getgrgid'
 val getgrnam'
 val getgrgid
 val getgrnam
 val getpwuid'
 val getpwnam'
 val getpwuid
 val getpwnam
}
structure Word8Vector{
 structure V{
 }
 type vector
 type elem
 val --
 val ++
 val usub
 val uupd
 val vector0
 val createVec
 val maxLen
 val fromList
 val tabulate
 val length
 val sub
 val concat
 val appi
 val app
 val update
 val mapi
 val map
 val v2cv
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure Word8Array{
 structure A{
 }
 structure V{
 }
 type array
 type elem
 type vector
 val --
 val ++
 val uupd
 val usub
 val vuupd
 val vusub
 val vlength
 val emptyV
 val maxLen
 val array
 val tabulate
 val fromList
 val length
 val sub
 val update
 val vector
 val copy
 val copyVec
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure Byte{
 val byteToChar
 val charToByte
 val bytesToString
 val stringToBytes
 val unpackStringVec
 val unpackString
 val packString
}
structure POSIX_TTY{
 structure FS{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure P{
  structure Sig => structure POSIX_Process . structure Sig
  structure W => structure POSIX_Process . structure W
  type word => structure POSIX_Process
  type s_int => structure POSIX_Process
  type signal => structure POSIX_Process
  type pid => structure POSIX_Process
  type waitpid_arg => structure POSIX_Process
  type killpid_arg => structure POSIX_Process
  type exit_status => structure POSIX_Process
  val ++
  val &
  val pidToWord
  val wordToPid
  val cfun
  val osval
  val w_osval
  val sysconf
  val fork'
  val fork
  val exec
  val exece
  val execp
  val waitpid'
  val argToInt
  val mkExitStatus
  val wnohang
  val waitpid
  val waitpid_nh
  val wait
  val exit
  val kill'
  val kill
  val alarm
  val sleep
  val pause
 }
 structure I{
  type flags
  val fromWord
  val toWord
  val flags
  val anySet
  val allSet
  val brkint
  val icrnl
  val ignbrk
  val igncr
  val ignpar
  val inlcr
  val inpck
  val istrip
  val ixoff
  val ixon
  val parmrk
 }
 structure O{
  type flags
  val fromWord
  val toWord
  val flags
  val anySet
  val allSet
  val opost
 }
 structure C{
  type flags
  val fromWord
  val toWord
  val flags
  val anySet
  val allSet
  val clocal
  val cread
  val csize
  val cs5
  val cs6
  val cs7
  val cs8
  val cstopb
  val hupcl
  val parenb
  val parodd
 }
 structure L{
  type flags
  val fromWord
  val toWord
  val flags
  val anySet
  val allSet
  val echo
  val echoe
  val echok
  val echonl
  val icanon
  val iexten
  val isig
  val noflsh
  val tostop
 }
 structure V{
  structure WV{
   structure V => structure Word8Vector . structure V
   type vector => structure Word8Vector
   type elem => structure Word8Vector
   val --
   val ++
   val usub
   val uupd
   val vector0
   val createVec
   val maxLen
   val fromList
   val tabulate
   val length
   val sub
   val concat
   val appi
   val app
   val update
   val mapi
   val map
   val v2cv
   val foldli
   val foldl
   val foldri
   val foldr
   val findi
   val find
   val exists
   val all
   val collate
  }
  structure WA{
   structure A => structure Word8Array . structure A
   structure V => structure Word8Array . structure V
   type array => structure Word8Array
   type elem => structure Word8Array
   type vector => structure Word8Array
   val --
   val ++
   val uupd
   val usub
   val vuupd
   val vusub
   val vlength
   val emptyV
   val maxLen
   val array
   val tabulate
   val fromList
   val length
   val sub
   val update
   val vector
   val copy
   val copyVec
   val appi
   val app
   val modifyi
   val modify
   val foldli
   val foldl
   val foldri
   val foldr
   val findi
   val find
   val exists
   val all
   val collate
  }
  structure B{
   val byteToChar
   val charToByte
   val bytesToString
   val stringToBytes
   val unpackStringVec
   val unpackString
   val packString
  }
  type cc
  val nccs
  val eof
  val eol
  val erase
  val intr
  val kill
  val min
  val quit
  val susp
  val time
  val start
  val stop
  val mkCC
  val cc
  val update
  val sub
 }
 structure TC{
  type set_action
  type flow_action
  type queue_sel
  val sanow
  val sadrain
  val saflush
  val ooff
  val oon
  val ioff
  val ion
  val iflush
  val oflush
  val ioflush
 }
 type pid
 type file_desc
 type word
 type s_int
 type speed
 type termios
 type termio_rep
 val ++
 val &
 val cfun
 val osval
 val w_osval
 val compareSpeed
 val speedToWord
 val wordToSpeed
 val b0
 val b50
 val b75
 val b110
 val b134
 val b150
 val b200
 val b300
 val b600
 val b1200
 val b1800
 val b2400
 val b4800
 val b9600
 val b19200
 val b38400
 val termios
 val fieldsOf
 val getiflag
 val getoflag
 val getcflag
 val getlflag
 val getcc
 val getospeed
 val getispeed
 val setospeed
 val setispeed
 val tcgetattr
 val getattr
 val tcsetattr
 val setattr
 val tcsendbreak
 val sendbreak
 val tcdrain
 val drain
 val tcflush
 val flush
 val tcflow
 val flow
 val tcgetpgrp
 val getpgrp
 val tcsetpgrp
 val setpgrp
}
structure Posix{
 structure Error{
  type syserror => structure POSIX_Error
  val cfun
  val errors
  val osVal
  val syserror
  val errmsg
  val geterror
  val toWord
  val fromWord
  val errorMsg
  val errorName
  val toobig
  val acces
  val again
  val badf
  val badmsg
  val busy
  val canceled
  val child
  val deadlk
  val dom
  val exist
  val fault
  val fbig
  val inprogress
  val intr
  val inval
  val io
  val isdir
  val loop
  val mfile
  val mlink
  val msgsize
  val nametoolong
  val nfile
  val nodev
  val noent
  val noexec
  val nolck
  val nomem
  val nospc
  val nosys
  val notdir
  val notempty
  val notsup
  val notty
  val nxio
  val perm
  val pipe
  val range
  val rofs
  val spipe
  val srch
  val xdev
 }
 structure Signal{
  type signal => structure POSIX_Signal
  val toWord
  val fromWord
  val osval
  val abrt
  val alrm
  val fpe
  val hup
  val ill
  val int
  val kill
  val pipe
  val quit
  val segv
  val term
  val usr1
  val usr2
  val chld
  val cont
  val stop
  val tstp
  val ttin
  val ttou
  val bus
 }
 structure Process{
  structure Sig => structure POSIX_Process . structure Sig
  structure W => structure POSIX_Process . structure W
  type word => structure POSIX_Process
  type s_int => structure POSIX_Process
  type signal => structure POSIX_Process
  type pid => structure POSIX_Process
  type waitpid_arg => structure POSIX_Process
  type killpid_arg => structure POSIX_Process
  type exit_status => structure POSIX_Process
  val ++
  val &
  val pidToWord
  val wordToPid
  val cfun
  val osval
  val w_osval
  val sysconf
  val fork'
  val fork
  val exec
  val exece
  val execp
  val waitpid'
  val argToInt
  val mkExitStatus
  val wnohang
  val waitpid
  val waitpid_nh
  val wait
  val exit
  val kill'
  val kill
  val alarm
  val sleep
  val pause
 }
 structure ProcEnv{
  structure FS => structure POSIX_ProcEnv . structure FS
  structure P => structure POSIX_ProcEnv . structure P
  type pid => structure POSIX_ProcEnv
  type uid => structure POSIX_ProcEnv
  type gid => structure POSIX_ProcEnv
  type file_desc => structure POSIX_ProcEnv
  type s_int => structure POSIX_ProcEnv
  val cfun
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val getpid'
  val getppid'
  val getpid
  val getppid
  val getuid'
  val geteuid'
  val getgid'
  val getegid'
  val getuid
  val geteuid
  val getgid
  val getegid
  val setuid'
  val setgid'
  val setuid
  val setgid
  val getgroups'
  val getgroups
  val getlogin
  val getpgrp'
  val setsid'
  val setpgid'
  val getpgrp
  val setsid
  val setpgid
  val uname
  val sysconf
  val time'
  val time
  val times'
  val ticksPerSec
  val times
  val getenv
  val environ
  val ctermid
  val ttyname'
  val ttyname
  val isatty'
  val isatty
 }
 structure FileSys{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure IO{
  structure FS => structure POSIX_IO . structure FS
  structure OM => structure POSIX_IO . structure OM
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  structure FD => structure POSIX_IO . structure FD
  structure O => structure POSIX_IO . structure O
  structure FLock => structure POSIX_IO . structure FLock
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  type word => structure POSIX_IO
  type s_int => structure POSIX_IO
  type file_desc => structure POSIX_IO
  type pid => structure POSIX_IO
  type whence => structure POSIX_IO
  type lock_type => structure POSIX_IO
  type flock_rep => structure POSIX_IO
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val fail
  val pipe'
  val pipe
  val dup'
  val dup2'
  val dup
  val dup2
  val close'
  val close
  val read'
  val readbuf'
  val readArr
  val readVec
  val writevec'
  val writearr'
  val writeArr
  val writeVec
  val seek_set
  val seek_cur
  val seek_end
  val whToWord
  val whFromWord
  val fcntl_d
  val fcntl_gfd
  val fcntl_sfd
  val fcntl_gfl
  val fcntl_sfl
  val dupfd
  val getfd
  val setfd
  val getfl
  val setfl
  val fcntl_l
  val f_getlk
  val f_setlk
  val f_setlkw
  val f_rdlck
  val f_wrlck
  val f_unlck
  val flockToRep
  val flockFromRep
  val getlk
  val setlk
  val setlkw
  val lseek'
  val lseek
  val fsync'
  val fsync
 }
 structure SysDB{
  structure FS => structure POSIX_Sys_DB . structure FS
  structure Passwd => structure POSIX_Sys_DB . structure Passwd
  structure Group => structure POSIX_Sys_DB . structure Group
  type word => structure POSIX_Sys_DB
  type uid => structure POSIX_Sys_DB
  type gid => structure POSIX_Sys_DB
  val cfun
  val getgrgid'
  val getgrnam'
  val getgrgid
  val getgrnam
  val getpwuid'
  val getpwnam'
  val getpwuid
  val getpwnam
 }
 structure TTY{
  structure FS => structure POSIX_TTY . structure FS
  structure P => structure POSIX_TTY . structure P
  structure I => structure POSIX_TTY . structure I
  structure O => structure POSIX_TTY . structure O
  structure C => structure POSIX_TTY . structure C
  structure L => structure POSIX_TTY . structure L
  structure V => structure POSIX_TTY . structure V
  structure TC => structure POSIX_TTY . structure TC
  type pid => structure POSIX_TTY
  type file_desc => structure POSIX_TTY
  type word => structure POSIX_TTY
  type s_int => structure POSIX_TTY
  type speed => structure POSIX_TTY
  type termios => structure POSIX_TTY
  type termio_rep => structure POSIX_TTY
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val compareSpeed
  val speedToWord
  val wordToSpeed
  val b0
  val b50
  val b75
  val b110
  val b134
  val b150
  val b200
  val b300
  val b600
  val b1200
  val b1800
  val b2400
  val b4800
  val b9600
  val b19200
  val b38400
  val termios
  val fieldsOf
  val getiflag
  val getoflag
  val getcflag
  val getlflag
  val getcc
  val getospeed
  val getispeed
  val setospeed
  val setispeed
  val tcgetattr
  val getattr
  val tcsetattr
  val setattr
  val tcsendbreak
  val sendbreak
  val tcdrain
  val drain
  val tcflush
  val flush
  val tcflow
  val flow
  val tcgetpgrp
  val getpgrp
  val tcsetpgrp
  val setpgrp
 }
}
structure OS_FileSys{
 structure P_FSys{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure P{
  structure P => functor OS_PathFn . structure P
  structure SS => functor OS_PathFn . structure SS
  val arcSepStr
  val parentArc
  val currentArc
  val concatArcs
  val validVolume
  val fromString
  val toString
  val getVolume
  val getParent
  val splitDirFile
  val joinDirFile
  val dir
  val file
  val splitBaseExt
  val joinBaseExt
  val base
  val ext
  val mkCanonical
  val isCanonical
  val isAbsolute
  val isRelative
  val mkAbsolute
  val mkRelative
  val isRoot
  val concat
  val fromUnixPath
  val toUnixPath
  exception Path
 }
 structure A{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure S => structure POSIX_FileSys . structure S
 structure O => structure POSIX_FileSys . structure O
 structure ST => structure POSIX_FileSys . structure ST
 type dirstream
 type word => structure POSIX_FileSys
 type s_int => structure POSIX_FileSys
 type uid => structure POSIX_FileSys
 type gid => structure POSIX_FileSys
 type file_desc => structure POSIX_FileSys
 type open_mode => structure POSIX_FileSys
 type c_dirstream => structure POSIX_FileSys
 type dirstream => structure POSIX_FileSys
 type dev => structure POSIX_FileSys
 type ino => structure POSIX_FileSys
 type statrep => structure POSIX_FileSys
 type access_mode => structure POSIX_FileSys
 type file_id
 val sysWordToWord
 val openDir
 val readDir
 val rewindDir
 val closeDir
 val chDir
 val getDir
 val mkDir
 val rmDir
 val isDir
 val isLink
 val readLink
 val maxLinks
 val fullPath
 val realPath
 val fileSize
 val modTime
 val setTime
 val remove
 val rename
 val ++
 val &
 val cfun
 val osval
 val w_osval
 val intOf
 val fd
 val fdToWord
 val wordToFD
 val fdToIOD
 val iodToFD
 val o_rdonly
 val o_wronly
 val o_rdwr
 val omodeFromWord
 val omodeToWord
 val uidToWord
 val wordToUid
 val gidToWord
 val wordToGid
 val opendir'
 val readdir'
 val rewinddir'
 val closedir'
 val opendir
 val readdir
 val rewinddir
 val closedir
 val chdir
 val getcwd
 val stdin
 val stdout
 val stderr
 val openf'
 val openf
 val createf
 val creat
 val umask'
 val umask
 val link'
 val link
 val rename'
 val rename
 val symlink'
 val symlink
 val mkdir'
 val mkdir
 val mkfifo'
 val mkfifo
 val unlink
 val rmdir
 val readlink
 val ftruncate'
 val ftruncate
 val devToWord
 val wordToDev
 val inoToWord
 val wordToIno
 val mkStat
 val stat'
 val lstat'
 val fstat'
 val stat
 val lstat
 val fstat
 val a_read
 val a_write
 val a_exec
 val a_file
 val amodeToWord
 val access'
 val access
 val chmod'
 val chmod
 val fchmod'
 val fchmod
 val chown'
 val chown
 val fchown'
 val fchown
 val utime'
 val utime
 val pathconf
 val fpathconf'
 val fpathconf
 val access
 val tmpName
 val fileId
 val hash
 val compare
}
structure CleanUp{
 type when
 val atAll
 val hooks
 val filter
 val clean
 val removeHook
 val addCleaner
 val removeCleaner
}
structure OS_Process{
 structure P_Proc{
  structure Sig => structure POSIX_Process . structure Sig
  structure W => structure POSIX_Process . structure W
  type word => structure POSIX_Process
  type s_int => structure POSIX_Process
  type signal => structure POSIX_Process
  type pid => structure POSIX_Process
  type waitpid_arg => structure POSIX_Process
  type killpid_arg => structure POSIX_Process
  type exit_status => structure POSIX_Process
  val ++
  val &
  val pidToWord
  val wordToPid
  val cfun
  val osval
  val w_osval
  val sysconf
  val fork'
  val fork
  val exec
  val exece
  val execp
  val waitpid'
  val argToInt
  val mkExitStatus
  val wnohang
  val waitpid
  val waitpid_nh
  val wait
  val exit
  val kill'
  val kill
  val alarm
  val sleep
  val pause
 }
 structure CU{
  type when => structure CleanUp
  val atAll
  val hooks
  val filter
  val clean
  val removeHook
  val addCleaner
  val removeCleaner
 }
 type status
 val success
 val failure
 val system
 val atExit
 val terminate
 val exit
 val getEnv
}
structure OS_IO{
 structure Kind{
  val file
  val dir
  val symlink
  val tty
  val pipe
  val socket
  val device
 }
 type iodesc
 type iodesc_kind
 type poll_flags
 type poll_desc
 type poll_info
 val hash
 val compare
 val kind
 val pollDesc
 val pollToIODesc
 val pollIn
 val pollOut
 val pollPri
 val poll
 val isIn
 val isOut
 val isPri
 val infoToPollDesc
 exception Poll
}
structure OSImp{
 structure FileSys{
 }
 structure Path{
 }
 structure Process{
 }
 structure IO{
 }
 structure FileSys => structure OSImp . structure FileSys
 structure Path => structure OSImp . structure Path
 structure Process => structure OSImp . structure Process
 structure IO => structure OSImp . structure IO
 structure FileSys{
 }
 structure Path{
 }
 structure Process{
 }
 structure IO{
 }
 structure FileSys => structure OSImp . structure FileSys
 structure Path => structure OSImp . structure Path
 structure Process => structure OSImp . structure Process
 structure IO => structure OSImp . structure IO
 structure FileSys{
 }
 structure Path{
 }
 structure Process{
 }
 structure IO{
 }
 structure FileSys => structure OSImp . structure FileSys
 structure Path => structure OSImp . structure Path
 structure Process => structure OSImp . structure Process
 structure IO => structure OSImp . structure IO
 structure FileSys{
  structure P_FSys => structure OS_FileSys . structure P_FSys
  structure P => structure OS_FileSys . structure P
  structure A => structure OS_FileSys . structure A
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type dirstream => structure OS_FileSys
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  type file_id => structure OS_FileSys
  val sysWordToWord
  val openDir
  val readDir
  val rewindDir
  val closeDir
  val chDir
  val getDir
  val mkDir
  val rmDir
  val isDir
  val isLink
  val readLink
  val maxLinks
  val fullPath
  val realPath
  val fileSize
  val modTime
  val setTime
  val remove
  val rename
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
  val access
  val tmpName
  val fileId
  val hash
  val compare
 }
 structure Path{
  structure P => functor OS_PathFn . structure P
  structure SS => functor OS_PathFn . structure SS
  val arcSepStr
  val parentArc
  val currentArc
  val concatArcs
  val validVolume
  val fromString
  val toString
  val getVolume
  val getParent
  val splitDirFile
  val joinDirFile
  val dir
  val file
  val splitBaseExt
  val joinBaseExt
  val base
  val ext
  val mkCanonical
  val isCanonical
  val isAbsolute
  val isRelative
  val mkAbsolute
  val mkRelative
  val isRoot
  val concat
  val fromUnixPath
  val toUnixPath
  exception Path
 }
 structure Process{
  structure P_Proc => structure OS_Process . structure P_Proc
  structure CU => structure OS_Process . structure CU
  type status => structure OS_Process
  val success
  val failure
  val system
  val atExit
  val terminate
  val exit
  val getEnv
 }
 structure IO{
  structure Kind => structure OS_IO . structure Kind
  type iodesc => structure OS_IO
  type iodesc_kind => structure OS_IO
  type poll_flags => structure OS_IO
  type poll_desc => structure OS_IO
  type poll_info => structure OS_IO
  val hash
  val compare
  val kind
  val pollDesc
  val pollToIODesc
  val pollIn
  val pollOut
  val pollPri
  val poll
  val isIn
  val isOut
  val isPri
  val infoToPollDesc
  exception Poll
 }
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 val errorMsg
 val errorName
 val syserror
 exception SysErr
 exception SysErr
 exception SysErr
 exception SysErr
 exception SysErr
 exception SysErr
 exception SysErr
}
structure ExnName{
 val exnName
 val exnMessage
}
structure General{
 type unit => structure General
 type exn => structure General
 type order => structure General
 val !
 val :=
 val o
 val before
 val ignore
 val exnName
 val exnMessage
 exception Bind
 exception Match
 exception Subscript
 exception Size
 exception Overflow
 exception Chr
 exception Div
 exception Domain
 exception Span
 exception Fail
}
structure Vector{
 type vector
 val --
 val ++
 val maxLen
 val checkLen
 val fromList
 val tabulate
 val length
 val sub
 val usub
 val rev
 val concat
 val appi
 val app
 val mapi
 val map
 val update
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure Real64Vector{
 type elem
 type vector
 val maxLen
 val fromList
 val tabulate
 val length
 val sub
 val update
 val concat
 val appi
 val app
 val mapi
 val map
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure Real64Array{
 type array
 type elem
 type vector
 val --
 val ++
 val uupd
 val usub
 val vusub
 val vlength
 val maxLen
 val array
 val tabulate
 val fromList
 val length
 val sub
 val update
 val vector
 val copy
 val copyVec
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure RealArray{
 type array => structure Real64Array
 type elem => structure Real64Array
 type vector => structure Real64Array
 val --
 val ++
 val uupd
 val usub
 val vusub
 val vlength
 val maxLen
 val array
 val tabulate
 val fromList
 val length
 val sub
 val update
 val vector
 val copy
 val copyVec
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure VectorSlice{
 type slice
 val --
 val ++
 val usub
 val vlength
 val length
 val sub
 val full
 val slice
 val subslice
 val base
 val vector
 val isEmpty
 val getItem
 val appi
 val app
 val foldli
 val foldl
 val foldri
 val foldr
 val concat
 val mapi
 val map
 val findi
 val find
 val exists
 val all
 val collate
}
structure Real64VectorSlice{
 type slice => structure VectorSlice
 type elem
 type vector
 type slice
 val --
 val ++
 val usub
 val vlength
 val length
 val sub
 val full
 val slice
 val subslice
 val base
 val vector
 val isEmpty
 val getItem
 val appi
 val app
 val foldli
 val foldl
 val foldri
 val foldr
 val concat
 val mapi
 val map
 val findi
 val find
 val exists
 val all
 val collate
}
structure Real64ArraySlice{
 type elem
 type array
 type vector
 type vector_slice
 type slice
 val --
 val ++
 val usub
 val uupd
 val vusub
 val alength
 val vlength
 val length
 val sub
 val update
 val full
 val slice
 val subslice
 val base
 val copy
 val copyVec
 val isEmpty
 val getItem
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
 val vector
}
structure RealArraySlice{
 type elem => structure Real64ArraySlice
 type array => structure Real64ArraySlice
 type vector => structure Real64ArraySlice
 type vector_slice => structure Real64ArraySlice
 type slice => structure Real64ArraySlice
 val --
 val ++
 val usub
 val uupd
 val vusub
 val alength
 val vlength
 val length
 val sub
 val update
 val full
 val slice
 val subslice
 val base
 val copy
 val copyVec
 val isEmpty
 val getItem
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
 val vector
}
structure RealVector{
 type elem => structure Real64Vector
 type vector => structure Real64Vector
 val maxLen
 val fromList
 val tabulate
 val length
 val sub
 val update
 val concat
 val appi
 val app
 val mapi
 val map
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure RealVectorSlice{
 type slice => structure VectorSlice
 type elem => structure Real64VectorSlice
 type vector => structure Real64VectorSlice
 type slice => structure Real64VectorSlice
 val --
 val ++
 val usub
 val vlength
 val length
 val sub
 val full
 val slice
 val subslice
 val base
 val vector
 val isEmpty
 val getItem
 val appi
 val app
 val foldli
 val foldl
 val foldri
 val foldr
 val concat
 val mapi
 val map
 val findi
 val find
 val exists
 val all
 val collate
}
structure Weak{
 type weak
 type weak'
 val special_weak
 val weak
 val strong
 val weak'
 val strong'
}
structure IntervalTimer{
 val cfun
 val tick'
 val setITimer
 val tick
 val fromTimeOpt
 val setIntTimer
}
structure SysInfo{
 type os_kind
 val getInfoStr
 val sysInfo
 val getFlag
 val getOSName
 val getOSKind
 val getOSVersion
 val getHostArch
 val getTargetArch
 val hasSoftwarePolling
 val hasMultiprocessing
 val getHeapSuffix
 exception UNKNOWN
}
structure CInterface{
 type c_function
 type system_const
 val bindCFun
 val c_function
 val findSysConst
 val bindSysConst
 exception CFunNotFound
 exception SysConstNotFound
}
structure Cont{
 type cont
 type control_cont
 val callcc
 val throw
 val isolate
 val capture
 val escape
}
structure Poll{
 val defaultHandler
 val handlerValid
 val pollEvent
 val pollFreq
 val setHandler
 val inqHandler
 val setFreq
 val inqFreq
 exception BadPollFreq
}
structure Object{
 type object
 type representation
 val toObject
 val mkTuple
 val boxed
 val unboxed
 val rep
 val length
 val nth
 val toTuple
 val toString
 val toRef
 val toArray
 val toRealArray
 val toByteArray
 val toVector
 val toByteVector
 val toExn
 val toReal
 val toInt
 val toInt32
 val toWord
 val toWord8
 val toWord32
 exception Representation
}
structure Unsafe{
 structure CInterface{
  type c_function => structure CInterface
  type system_const => structure CInterface
  val bindCFun
  val c_function
  val findSysConst
  val bindSysConst
  exception CFunNotFound
  exception SysConstNotFound
 }
 structure Object{
  type object => structure Object
  type representation => structure Object
  val toObject
  val mkTuple
  val boxed
  val unboxed
  val rep
  val length
  val nth
  val toTuple
  val toString
  val toRef
  val toArray
  val toRealArray
  val toByteArray
  val toVector
  val toByteVector
  val toExn
  val toReal
  val toInt
  val toInt32
  val toWord
  val toWord8
  val toWord32
  exception Representation
 }
 structure Poll{
  val defaultHandler
  val handlerValid
  val pollEvent
  val pollFreq
  val setHandler
  val inqHandler
  val setFreq
  val inqFreq
  exception BadPollFreq
 }
 structure Vector{
  val sub
  val create
 }
 structure Array{
  val sub
  val update
  val create
 }
 structure CharVector{
  type vector
  type elem
  val sub
  val update
  val create
 }
 structure CharArray{
  type array
  type elem
  val sub
  val update
  val create
 }
 structure Word8Vector{
  type vector
  type elem
  val sub
  val update
  val create
 }
 structure Word8Array{
  type array
  type elem
  val sub
  val update
  val create
 }
 structure Real64Array{
  type array
  type elem
  val sub
  val update
  val create
 }
 type runDynEnv
 val getVar
 val setVar
 val getHdlr
 val setHdlr
 val getPseudo
 val setPseudo
 val blastRead
 val blastWrite
 val boxed
 val cast
 val pStruct
 val topLevelCont
 val sigHandler
}
structure Array{
 type array
 type vector
 val --
 val ++
 val maxLen
 val array
 val fromList
 val tabulate
 val length
 val sub
 val update
 val usub
 val uupd
 val vusub
 val vlength
 val copy
 val copyVec
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
 val vector
}
structure ProfControl{
 structure CI{
  type c_function => structure CInterface
  type system_const => structure CInterface
  val bindCFun
  val c_function
  val findSysConst
  val bindSysConst
  exception CFunNotFound
  exception SysConstNotFound
 }
 type compunit
 val setTimer
 val getQuantum
 val setTimeArray'
 val profMode
 val timingMode
 val times
 val getTimingMode
 val setTimeArray
 val getTimeArray
 val resetTimeArray
 val profileOn
 val profileOff
 val runTimeIndex
 val minorGCIndex
 val majorGCIndex
 val otherIndex
 val compileIndex
 val numPredefIndices
 val current
 val increase
 val units
 val newlines
 val register
 val reset
 val spaceProfiling
 val spaceProfRegister
}
structure GC{
 val gcCtl
 val doGC
 val messages
}
structure Internals{
 structure CleanUp{
  type when => structure CleanUp
  val atAll
  val hooks
  val filter
  val clean
  val removeHook
  val addCleaner
  val removeCleaner
 }
 structure ProfControl{
  structure CI => structure ProfControl . structure CI
  type compunit => structure ProfControl
  val setTimer
  val getQuantum
  val setTimeArray'
  val profMode
  val timingMode
  val times
  val getTimingMode
  val setTimeArray
  val getTimeArray
  val resetTimeArray
  val profileOn
  val profileOff
  val runTimeIndex
  val minorGCIndex
  val majorGCIndex
  val otherIndex
  val compileIndex
  val numPredefIndices
  val current
  val increase
  val units
  val newlines
  val register
  val reset
  val spaceProfiling
  val spaceProfRegister
 }
 structure GC{
  val gcCtl
  val doGC
  val messages
 }
 structure BTrace{
  val install
  val reset
  val mode
  val report
  val save
  val bthandle
  val trigger
 }
 val prHook
 val initSigTbl
 val clearSigTbl
 val resetSigTbl
 val resetTimers
}
structure SMLofNJ{
 structure Cont{
  type cont => structure Cont
  type control_cont => structure Cont
  val callcc
  val throw
  val isolate
  val capture
  val escape
 }
 structure IntervalTimer{
  val cfun
  val tick'
  val setITimer
  val tick
  val fromTimeOpt
  val setIntTimer
 }
 structure Internals{
  structure CleanUp => structure Internals . structure CleanUp
  structure ProfControl => structure Internals . structure ProfControl
  structure GC => structure Internals . structure GC
  structure BTrace => structure Internals . structure BTrace
  val prHook
  val initSigTbl
  val clearSigTbl
  val resetSigTbl
  val resetTimers
 }
 structure SysInfo{
  type os_kind => structure SysInfo
  val getInfoStr
  val sysInfo
  val getFlag
  val getOSName
  val getOSKind
  val getOSVersion
  val getHostArch
  val getTargetArch
  val hasSoftwarePolling
  val hasMultiprocessing
  val getHeapSuffix
  exception UNKNOWN
 }
 structure Weak{
  type weak => structure Weak
  type weak' => structure Weak
  val special_weak
  val weak
  val strong
  val weak'
  val strong'
 }
 type frag => structure SMLofNJ
 val getCmdName
 val getArgs
 val getAllArgs
 val exnHistory
 val exportML
 val exportFn
}
structure PreSock{
 type addr
 type af
 type socket
 type in_addr
 type addr_family
 type sock_type
 type sock
 type sock_addr
 val toWords
 val fromBytes
}
structure Socket{
 type addr => structure PreSock
 type af => structure PreSock
 type socket => structure PreSock
 type in_addr => structure PreSock
 type addr_family => structure PreSock
 type sock_type => structure PreSock
 type sock => structure PreSock
 type sock_addr => structure PreSock
 val toWords
 val fromBytes
}
structure NetHostDB{
 structure SysW{
  structure W32 => structure Word32Imp . structure W32
  type word => structure Word32Imp
  val wordSize
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val toInt
  val toIntX
  val fromInt
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val <<
  val >>
  val ~>>
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 type in_addr
 type addr_family
 type entry
 val netdbFun
 val name
 val aliases
 val addrType
 val addrs
 val addr
 val getByName
 val getByAddr
 val scan
 val fromString
 val toString
 val getHostName
}
structure SocketImp{
 structure CI{
  type c_function => structure CInterface
  type system_const => structure CInterface
  val bindCFun
  val c_function
  val findSysConst
  val bindSysConst
  exception CFunNotFound
  exception SysConstNotFound
 }
 structure W8A{
  structure A => structure Word8Array . structure A
  structure V => structure Word8Array . structure V
  type array => structure Word8Array
  type elem => structure Word8Array
  type vector => structure Word8Array
  val --
  val ++
  val uupd
  val usub
  val vuupd
  val vusub
  val vlength
  val emptyV
  val maxLen
  val array
  val tabulate
  val fromList
  val length
  val sub
  val update
  val vector
  val copy
  val copyVec
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure W8V{
  structure V => structure Word8Vector . structure V
  type vector => structure Word8Vector
  type elem => structure Word8Vector
  val --
  val ++
  val usub
  val uupd
  val vector0
  val createVec
  val maxLen
  val fromList
  val tabulate
  val length
  val sub
  val concat
  val appi
  val app
  val update
  val mapi
  val map
  val v2cv
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure AF{
  type addr_family
  val listAddrFamilies
  val list
  val toString
  val fromString
 }
 structure SOCK{
  type sock_type
  val listSockTypes
  val stream
  val dgram
  val list
  val toString
  val fromString
 }
 structure Ctl{
  val getDEBUG
  val setDEBUG
  val getREUSEADDR
  val setREUSEADDR
  val getKEEPALIVE
  val setKEEPALIVE
  val getDONTROUTE
  val setDONTROUTE
  val getLINGER
  val setLINGER
  val getBROADCAST
  val setBROADCAST
  val getOOBINLINE
  val setOOBINLINE
  val getSNDBUF
  val setSNDBUF
  val getRCVBUF
  val setRCVBUF
  val getTYPE
  val getERROR
  val getPeerName
  val getSockName
  val setNBIO
  val getNREAD
  val getATMARK
 }
 type w8vector
 type w8array
 type sockFD
 type addr => structure PreSock
 type af => structure PreSock
 type socket => structure PreSock
 type in_addr => structure PreSock
 type addr_family => structure PreSock
 type sock_type => structure PreSock
 type sock => structure PreSock
 type sock_addr => structure PreSock
 type dgram
 type stream
 type passive
 type active
 type shutdown_mode
 type out_flags
 type in_flags
 type buf
 val sockFn
 val toWords
 val fromBytes
 val netdbFun
 val sameAddr
 val familyOfAddr
 val accept
 val bind
 val connect
 val listen
 val close
 val shutdown
 val pollDesc
 val vbuf
 val abuf
 val dfltDon'tRoute
 val dfltOOB
 val dfltPeek
 val sendVec
 val sendArr
 val sendVec'
 val sendArr'
 val sendVecTo
 val sendArrTo
 val sendVecTo'
 val sendArrTo'
 val recvVec
 val recvArr
 val recvVec'
 val recvArr'
 val recvVecFrom
 val recvArrFrom
 val recvVecFrom'
 val recvArrFrom'
}
structure Socket{
 structure CI => structure SocketImp . structure CI
 structure W8A => structure SocketImp . structure W8A
 structure W8V => structure SocketImp . structure W8V
 structure AF => structure SocketImp . structure AF
 structure SOCK => structure SocketImp . structure SOCK
 structure Ctl => structure SocketImp . structure Ctl
 type w8vector => structure SocketImp
 type w8array => structure SocketImp
 type sockFD => structure SocketImp
 type addr => structure PreSock
 type af => structure PreSock
 type socket => structure PreSock
 type in_addr => structure PreSock
 type addr_family => structure PreSock
 type sock_type => structure PreSock
 type sock => structure PreSock
 type sock_addr => structure PreSock
 type dgram => structure SocketImp
 type stream => structure SocketImp
 type passive => structure SocketImp
 type active => structure SocketImp
 type shutdown_mode => structure SocketImp
 type out_flags => structure SocketImp
 type in_flags => structure SocketImp
 type buf => structure SocketImp
 val sockFn
 val toWords
 val fromBytes
 val netdbFun
 val sameAddr
 val familyOfAddr
 val accept
 val bind
 val connect
 val listen
 val close
 val shutdown
 val pollDesc
 val vbuf
 val abuf
 val dfltDon'tRoute
 val dfltOOB
 val dfltPeek
 val sendVec
 val sendArr
 val sendVec'
 val sendArr'
 val sendVecTo
 val sendArrTo
 val sendVecTo'
 val sendArrTo'
 val recvVec
 val recvArr
 val recvVec'
 val recvArr'
 val recvVecFrom
 val recvArrFrom
 val recvVecFrom'
 val recvArrFrom'
}
structure SMLofNJ{
 type frag
 val getCmdName
 val getArgs
 val getAllArgs
 val exnHistory
}
structure InternalSignals{
 structure CI{
  type c_function => structure CInterface
  type system_const => structure CInterface
  val bindCFun
  val c_function
  val findSysConst
  val bindSysConst
  exception CFunNotFound
  exception SysConstNotFound
 }
 type signal
 type sig_action
 type sig_info
 type sigmask
 val signalFn
 val sigToConst
 val constToSig
 val sigList
 val numSigs
 val maxSig
 val sigTbl
 val debug
 val getInfo
 val setInfo
 val resetList
 val listSignals
 val toString
 val fromString
 val getSigState
 val setSigState
 val ignoreSigState
 val defaultSigState
 val enabledSigState
 val clearSigTbl
 val initSigTbl
 val resetSigTbl
 val incMask
 val decMask
 val maskSignals
 val unmaskSignals
 val masked
 val setHandler
 val overrideHandler
 val inqHandler
 val pause
 val sigHandler
 val sigINT
 val sigALRM
 val sigTERM
 val sigGC
}
structure Signals{
 structure CI => structure InternalSignals . structure CI
 type signal => structure InternalSignals
 type sig_action => structure InternalSignals
 type sig_info => structure InternalSignals
 type sigmask => structure InternalSignals
 val signalFn
 val sigToConst
 val constToSig
 val sigList
 val numSigs
 val maxSig
 val sigTbl
 val debug
 val getInfo
 val setInfo
 val resetList
 val listSignals
 val toString
 val fromString
 val getSigState
 val setSigState
 val ignoreSigState
 val defaultSigState
 val enabledSigState
 val clearSigTbl
 val initSigTbl
 val resetSigTbl
 val incMask
 val decMask
 val maskSignals
 val unmaskSignals
 val masked
 val setHandler
 val overrideHandler
 val inqHandler
 val pause
 val sigHandler
 val sigINT
 val sigALRM
 val sigTERM
 val sigGC
}
structure WrapExport{
 structure Process{
  structure P_Proc => structure OS_Process . structure P_Proc
  structure CU => structure OS_Process . structure CU
  type status => structure OS_Process
  val success
  val failure
  val system
  val atExit
  val terminate
  val exit
  val getEnv
 }
 type pair
 val wrap
}
structure Export{
 structure Process{
  structure P_Proc => structure OS_Process . structure P_Proc
  structure CU => structure OS_Process . structure CU
  type status => structure OS_Process
  val success
  val failure
  val system
  val atExit
  val terminate
  val exit
  val getEnv
 }
 type cmdt
 val runtimeFn
 val exportHeap
 val exportFn'
 val nullFilename
 val exportML
 val exportFn
}
structure PrintHook{
}
structure Lazy{
 type susp
}
structure AtExit{
 structure CU{
  type when => structure CleanUp
  val atAll
  val hooks
  val filter
  val clean
  val removeHook
  val addCleaner
  val removeCleaner
 }
 val hooks
 val doAtExit
 val cleaner
 val atExit
}
structure PreString{
}
structure Substring{
}
structure General{
 type unit
 type exn
 type order
 val !
 val :=
 val o
 val before
 val ignore
 exception Bind
 exception Match
 exception Subscript
 exception Size
 exception Overflow
 exception Chr
 exception Div
 exception Domain
 exception Span
 exception Fail
}
structure Char{
 structure C{
 }
 type char
 type string
 val +
 val -
 val *
 val itoc
 val ctoi
 val minChar
 val maxChar
 val maxOrd
 val pred
 val succ
 val chr
 val ord
 val <
 val <=
 val >
 val >=
 val compare
 val contains
 val notContains
 val ctypeTbl
 val inSet
 val isAlpha
 val isUpper
 val isLower
 val isDigit
 val isHexDigit
 val isAlphaNum
 val isSpace
 val isPunct
 val isGraph
 val isPrint
 val isCntrl
 val isAscii
 val offset
 val toUpper
 val toLower
 val scanDigits
 val chkDigits
 val scan
 val fromString
 val itoa
 val toString
 val scanC
 val fromCString
 val toCString
}
structure List{
 type list
 val +
 val -
 val <
 val <=
 val >
 val >=
 val null
 val hd
 val tl
 val last
 val getItem
 val nth
 val take
 val drop
 val length
 val rev
 val @
 val concat
 val revAppend
 val app
 val map
 val mapPartial
 val find
 val filter
 val partition
 val foldr
 val foldl
 val exists
 val all
 val tabulate
 val collate
 exception Empty
}
structure NumScan{
 structure W{
 }
 structure I{
 }
 structure I32{
 }
 structure R{
 }
 type word
 type prefix_pat
 val <
 val >=
 val +
 val -
 val *
 val largestWordDiv10
 val largestWordMod10
 val largestNegInt32
 val largestPosInt32
 val minInt32
 val code
 val wsCode
 val plusCode
 val minusCode
 val ptCode
 val eCode
 val wCode
 val xCode
 val scanPrefix
 val chkOverflow
 val isBinDigit
 val isOctDigit
 val isDecDigit
 val isHexDigit
 val binPat
 val octPat
 val hexPat
 val decPat
 val scanBin
 val scanOct
 val scanDec
 val scanHex
 val finalWord
 val scanWord
 val finalInt
 val scanInt
 val fscan10
 val scaleUp
 val scaleDown
 val scanReal
}
structure NumFormat{
 structure W{
 }
 structure I{
 }
 structure I32{
 }
 val <
 val -
 val *
 val div
 val mkDigit
 val wordToBin
 val wordToOct
 val wordToDec
 val wordToHex
 val fmtW
 val fmtWord
 val i2w
 val fmtInt
}
structure Bool{
 type bool
 val not
 val scan
 val toString
 val fromString
}
structure Date{
 type weekday
 type month
 type date
 type tm
 val baseYear
 val dayTbl
 val monthTbl
 val dayToInt
 val monthToInt
 val wrap
 val ascTime
 val localTime'
 val gmTime'
 val mkTime'
 val strfTime
 val localTime
 val gmTime
 val mkTime
 val year
 val month
 val day
 val hour
 val minute
 val second
 val weekDay
 val yearDay
 val isDst
 val offset
 val withDst
 val dstOf
 val localOffset'
 val localOffset
 val toAbsolute
 val fromAbsolute
 val wday
 val yday
 val canonicalizeDate
 val toTM
 val fromTM
 val fromTimeLocal
 val fromTimeUniv
 val fromTimeOffset
 val day_seconds
 val hday_seconds
 val canonicalOffset
 val toTime
 val date
 val toString
 val fmt
 val scan
 val fromString
 val compare
 exception Date
}
structure Array2{
 structure A{
  type array => structure Array
  type vector => structure Array
  val --
  val ++
  val maxLen
  val array
  val fromList
  val tabulate
  val length
  val sub
  val update
  val usub
  val uupd
  val vusub
  val vlength
  val copy
  val copyVec
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
  val vector
 }
 type array
 type region
 type traversal
 type index
 val ltu
 val unsafeUpdate
 val unsafeSub
 val mkArray
 val unsafeIndex
 val index
 val chkSize
 val array
 val fromList
 val tabulateRM
 val tabulateCM
 val tabulate
 val sub
 val update
 val dimensions
 val nCols
 val nRows
 val row
 val column
 val chkRegion
 val copy
 val iterateRM
 val iterateCM
 val appi
 val appRM
 val appCM
 val app
 val modifyi
 val modifyRM
 val modifyCM
 val modify
 val foldi
 val foldRM
 val foldCM
 val fold
}
structure CharArray{
 structure String{
  type char => structure StringImp
  type string => structure StringImp
  val +
  val -
  val <
  val <=
  val >
  val >=
  val unsafeSub
  val unsafeUpdate
  val rev
  val maxSize
  val size
  val unsafeCreate
  val create
  val str
  val sub
  val substring
  val extract
  val ^
  val concat
  val concatWith
  val implode
  val explode
  val map
  val translate
  val tokens
  val fields
  val isPrefix
  val isSuffix
  val isSubstring
  val compare
  val collate
  val sgtr
  val <=
  val <
  val >=
  val >
  val fromString'
  val fromString
  val toString
  val fromCString
  val toCString
 }
 structure A{
 }
 type elem
 type vector
 type array
 val --
 val ++
 val uupd
 val usub
 val vuupd
 val vusub
 val vlength
 val maxLen
 val array
 val tabulate
 val fromList
 val length
 val sub
 val update
 val vector
 val copy
 val copyVec
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure CharVectorSlice{
 type elem
 type vector
 type slice
 val --
 val ++
 val usub
 val vlength
 val length
 val sub
 val full
 val slice
 val subslice
 val base
 val vector
 val isEmpty
 val getItem
 val appi
 val app
 val foldli
 val foldl
 val foldri
 val foldr
 val concat
 val mapi
 val map
 val findi
 val find
 val exists
 val all
 val collate
}
structure CharArraySlice{
 type elem
 type array
 type vector
 type vector_slice
 type slice
 val --
 val ++
 val usub
 val uupd
 val vusub
 val vuupd
 val alength
 val vlength
 val length
 val sub
 val update
 val full
 val slice
 val subslice
 val base
 val vector
 val copy
 val copyVec
 val isEmpty
 val getItem
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure CharVector{
 structure String{
  type char => structure StringImp
  type string => structure StringImp
  val +
  val -
  val <
  val <=
  val >
  val >=
  val unsafeSub
  val unsafeUpdate
  val rev
  val maxSize
  val size
  val unsafeCreate
  val create
  val str
  val sub
  val substring
  val extract
  val ^
  val concat
  val concatWith
  val implode
  val explode
  val map
  val translate
  val tokens
  val fields
  val isPrefix
  val isSuffix
  val isSubstring
  val compare
  val collate
  val sgtr
  val <=
  val <
  val >=
  val >
  val fromString'
  val fromString
  val toString
  val fromCString
  val toCString
 }
 type elem
 type vector
 val --
 val ++
 val usub
 val uupd
 val maxLen
 val fromList
 val tabulate
 val length
 val sub
 val concat
 val update
 val appi
 val app
 val mapi
 val map
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure ArraySlice{
 type slice
 val --
 val ++
 val usub
 val uupd
 val vusub
 val alength
 val vlength
 val length
 val sub
 val update
 val full
 val slice
 val subslice
 val base
 val copy
 val copyVec
 val isEmpty
 val getItem
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
 val vector
}
structure RealFormat{
 structure String{
  type char => structure StringImp
  type string => structure StringImp
  val +
  val -
  val <
  val <=
  val >
  val >=
  val unsafeSub
  val unsafeUpdate
  val rev
  val maxSize
  val size
  val unsafeCreate
  val create
  val str
  val sub
  val substring
  val extract
  val ^
  val concat
  val concatWith
  val implode
  val explode
  val map
  val translate
  val tokens
  val fields
  val isPrefix
  val isSuffix
  val isSubstring
  val compare
  val collate
  val sgtr
  val <=
  val <
  val >=
  val >
  val fromString'
  val fromString
  val toString
  val fromCString
  val toCString
 }
 structure I{
 }
 val +
 val -
 val *
 val /
 val ~
 val <
 val >
 val >=
 val ==
 val floor
 val real
 val ^
 val implode
 val concat
 val size
 val inc
 val dec
 val min
 val max
 val atoi
 val zeroLPad
 val zeroRPad
 val mkDigit
 val maxPrec
 val decompose
 val realFFormat
 val realEFormat
 val realGFormat
 val infinity
 val fmtInfNan
 val realToSciStr
 val realToFixStr
 val realToGenStr
 val fmtReal
}
structure Word8VectorSlice{
 type elem
 type vector
 type slice
 val --
 val ++
 val usub
 val vlength
 val length
 val sub
 val full
 val slice
 val subslice
 val base
 val vector
 val isEmpty
 val getItem
 val appi
 val app
 val foldli
 val foldl
 val foldri
 val foldr
 val concat
 val mapi
 val map
 val findi
 val find
 val exists
 val all
 val collate
}
structure Word8ArraySlice{
 type elem
 type array
 type vector
 type vector_slice
 type slice
 val --
 val ++
 val usub
 val uupd
 val vusub
 val vuupd
 val alength
 val vlength
 val length
 val sub
 val update
 val full
 val slice
 val subslice
 val base
 val vector
 val copy
 val copyVec
 val isEmpty
 val getItem
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldl
 val foldri
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
structure InternalTimer{
 structure PB{
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val scanString
  val skipWS
  val getNChars
  exception Time
  exception Time
  exception Time
  exception Time
  exception Time
  exception Time
 }
 structure Int{
  structure I31 => structure Int31Imp . structure I31
  structure I32 => structure Int31Imp . structure I32
  type int => structure Int31Imp
  val precision
  val minIntVal
  val minInt
  val maxInt
  val toLarge
  val fromLarge
  val toInt
  val fromInt
  val ~
  val *
  val +
  val -
  val div
  val mod
  val quot
  val rem
  val min
  val max
  val abs
  val sign
  val sameSign
  val compare
  val >
  val >=
  val <
  val <=
  val fmt
  val scan
  val toString
  val fromString
  exception Div
  exception Overflow
 }
 structure Int32{
  structure I32 => structure Int32Imp . structure I32
  type int => structure Int32Imp
  val precision
  val minIntVal
  val minInt
  val maxInt
  val *
  val quot
  val rem
  val div
  val mod
  val +
  val -
  val ~
  val <
  val <=
  val >
  val >=
  val =
  val <>
  val min
  val max
  val abs
  val sign
  val sameSign
  val compare
  val scan
  val fmt
  val toString
  val fromString
  val toInt
  val fromInt
  val toLarge
  val fromLarge
 }
 structure Time{
  structure PB => structure TimeImp . structure PB
  structure LInt => structure TimeImp . structure LInt
  structure Real => structure TimeImp . structure Real
  structure Int => structure TimeImp . structure Int
  structure Int32 => structure TimeImp . structure Int32
  structure String => structure TimeImp . structure String
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  structure PB{
  }
  structure LInt{
  }
  structure Real{
  }
  structure Int{
  }
  structure Int32{
  }
  structure String{
  }
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  val quot
  val zeroTime
  val toSeconds
  val fromSeconds
  val toMilliseconds
  val fromMilliseconds
  val toMicroseconds
  val fromMicroseconds
  val fromReal
  val toReal
  val now
  val rndv
  val fmt
  val scan
  val toString
  val fromString
  val +
  val -
  val compare
  val <
  val <=
  val >
  val >=
  exception Time
  exception Time
  exception Time
  exception Time
  exception Time
  exception Time
  exception Time
 }
 type cpu_timer
 type real_timer
 val getTime
 val startCPUTimer
 val checkCPUTimer
 val initCPUTime
 val totalCPUTimer
 val startRealTimer
 val checkRealTimer
 val initRealTime
 val totalRealTimer
 val resetTimers
}
structure Timer{
 structure PB => structure InternalTimer . structure PB
 structure Int => structure InternalTimer . structure Int
 structure Int32 => structure InternalTimer . structure Int32
 structure Time => structure InternalTimer . structure Time
 type cpu_timer => structure InternalTimer
 type real_timer => structure InternalTimer
 val getTime
 val startCPUTimer
 val checkCPUTimer
 val initCPUTime
 val totalCPUTimer
 val startRealTimer
 val checkRealTimer
 val initRealTime
 val totalRealTimer
 val resetTimers
}
structure ListPair{
 val rev
 val zip
 val zipEq
 val unzip
 val map
 val mapEq
 val app
 val appEq
 val all
 val allEq
 val foldl
 val foldlEq
 val foldr
 val foldrEq
 val exists
 exception UnequalLengths
}
structure CommandLine{
 val name
 val arguments
}
structure Option{
 val getOpt
 val isSome
 val valOf
 val filter
 val join
 val app
 val map
 val mapPartial
 val compose
 val composePartial
 exception Option
}
structure BinPrimIO{
 structure A => functor PrimIO . structure A
 structure AS => functor PrimIO . structure AS
 structure V => functor PrimIO . structure V
 structure VS => functor PrimIO . structure VS
 type elem => functor PrimIO
 type vector => functor PrimIO
 type array => functor PrimIO
 type pos => functor PrimIO
 type reader => functor PrimIO
 type writer => functor PrimIO
 val compare
 val blockingOperation
 val nonblockingOperation
 val augmentReader
 val augmentWriter
}
structure PosixBinPrimIO{
 structure PrimIO{
  structure A => functor PrimIO . structure A
  structure AS => functor PrimIO . structure AS
  structure V => functor PrimIO . structure V
  structure VS => functor PrimIO . structure VS
  type elem => functor PrimIO
  type vector => functor PrimIO
  type array => functor PrimIO
  type pos => functor PrimIO
  type reader => functor PrimIO
  type writer => functor PrimIO
  val compare
  val blockingOperation
  val nonblockingOperation
  val augmentReader
  val augmentWriter
 }
 structure Vec{
  structure V => structure Word8Vector . structure V
  type vector => structure Word8Vector
  type elem => structure Word8Vector
  val --
  val ++
  val usub
  val uupd
  val vector0
  val createVec
  val maxLen
  val fromList
  val tabulate
  val length
  val sub
  val concat
  val appi
  val app
  val update
  val mapi
  val map
  val v2cv
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure PF{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure PIO{
  structure FS => structure POSIX_IO . structure FS
  structure OM => structure POSIX_IO . structure OM
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  structure FD => structure POSIX_IO . structure FD
  structure O => structure POSIX_IO . structure O
  structure FLock => structure POSIX_IO . structure FLock
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  type word => structure POSIX_IO
  type s_int => structure POSIX_IO
  type file_desc => structure POSIX_IO
  type pid => structure POSIX_IO
  type whence => structure POSIX_IO
  type lock_type => structure POSIX_IO
  type flock_rep => structure POSIX_IO
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val fail
  val pipe'
  val pipe
  val dup'
  val dup2'
  val dup
  val dup2
  val close'
  val close
  val read'
  val readbuf'
  val readArr
  val readVec
  val writevec'
  val writearr'
  val writeArr
  val writeVec
  val seek_set
  val seek_cur
  val seek_end
  val whToWord
  val whFromWord
  val fcntl_d
  val fcntl_gfd
  val fcntl_sfd
  val fcntl_gfl
  val fcntl_sfl
  val dupfd
  val getfd
  val setfd
  val getfl
  val setfl
  val fcntl_l
  val f_getlk
  val f_setlk
  val f_setlkw
  val f_rdlck
  val f_wrlck
  val f_unlck
  val flockToRep
  val flockFromRep
  val getlk
  val setlk
  val setlkw
  val lseek'
  val lseek
  val fsync'
  val fsync
 }
 type file_desc
 val toFPI
 val announce
 val bufferSzB
 val isRegFile
 val posFns
 val mkReader
 val openRd
 val mkWriter
 val standardMode
 val createFile
 val openWr
 val openApp
}
structure TextPrimIO{
 structure A => functor PrimIO . structure A
 structure AS => functor PrimIO . structure AS
 structure V => functor PrimIO . structure V
 structure VS => functor PrimIO . structure VS
 type elem => functor PrimIO
 type vector => functor PrimIO
 type array => functor PrimIO
 type pos => functor PrimIO
 type reader => functor PrimIO
 type writer => functor PrimIO
 val compare
 val blockingOperation
 val nonblockingOperation
 val augmentReader
 val augmentWriter
}
structure PosixTextPrimIO{
 structure PF{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure BinPrimIO{
  structure PrimIO => structure PosixBinPrimIO . structure PrimIO
  structure Vec => structure PosixBinPrimIO . structure Vec
  structure PF => structure PosixBinPrimIO . structure PF
  structure PIO => structure PosixBinPrimIO . structure PIO
  type file_desc => structure PosixBinPrimIO
  val toFPI
  val announce
  val bufferSzB
  val isRegFile
  val posFns
  val mkReader
  val openRd
  val mkWriter
  val standardMode
  val createFile
  val openWr
  val openApp
 }
 structure PrimIO{
  structure A => functor PrimIO . structure A
  structure AS => functor PrimIO . structure AS
  structure V => functor PrimIO . structure V
  structure VS => functor PrimIO . structure VS
  type elem => functor PrimIO
  type vector => functor PrimIO
  type array => functor PrimIO
  type pos => functor PrimIO
  type reader => functor PrimIO
  type writer => functor PrimIO
  val compare
  val blockingOperation
  val nonblockingOperation
  val augmentReader
  val augmentWriter
 }
 type file_desc
 val bufferSzB
 val translateIn
 val translateOut
 val openRd
 val openWr
 val openApp
 val mkReader
 val mkWriter
 val stdIn
 val stdOut
 val stdErr
 val strReader
}
structure IO{
 type buffer_mode
 exception Io
 exception BlockingNotSupported
 exception NonblockingNotSupported
 exception RandomAccessNotSupported
 exception TerminatedStream
 exception ClosedStream
}
structure CleanIO{
 structure C{
  type when => structure CleanUp
  val atAll
  val hooks
  val filter
  val clean
  val removeHook
  val addCleaner
  val removeCleaner
 }
 type tag
 type cleaner
 val osInitHook
 val stdStrmHook
 val cleaners
 val addCleaner
 val getTag
 val rebindCleaner
 val removeCleaner
 val doClean
 val cleanUp
}
structure TextIO{
 structure PIO => functor TextIOFn . structure PIO
 structure A => functor TextIOFn . structure A
 structure V => functor TextIOFn . structure V
 structure AS => functor TextIOFn . structure AS
 structure VS => functor TextIOFn . structure VS
 structure StreamIO => functor TextIOFn . structure StreamIO
 type vector => functor TextIOFn
 type elem => functor TextIOFn
 type instream => functor TextIOFn
 type outstream => functor TextIOFn
 val someElem
 val vecExtract
 val vecSub
 val arrUpdate
 val substringBase
 val empty
 val input
 val input1
 val inputN
 val inputAll
 val canInput
 val lookahead
 val closeIn
 val endOfStream
 val output
 val output1
 val flushOut
 val closeOut
 val getPosOut
 val setPosOut
 val mkInstream
 val getInstream
 val setInstream
 val mkOutstream
 val getOutstream
 val setOutstream
 val bufferMode
 val openIn
 val openOut
 val openAppend
 val inputLine
 val outputSubstr
 val openString
 val stdIn
 val stdOut
 val stdErr
 val print
 val scanStream
}
structure SML90{
 type instream
 type outstream
 val sqrt
 val exp
 val ln
 val sin
 val cos
 val arctan
 val ord
 val chr
 val explode
 val implode
 val wrapIO
 val std_in
 val open_in
 val input
 val lookahead
 val close_in
 val end_of_stream
 val std_out
 val open_out
 val output
 val close_out
 exception Io
 exception Sqrt
 exception Ln
 exception Ord
 exception Abs
 exception Prod
 exception Neg
 exception Sum
 exception Diff
 exception Floor
 exception Exp
 exception Quot
 exception Mod
 exception Interrupt
}
structure Math{
 structure I => structure Math64 . structure I
 type real => structure Math64
 val +
 val -
 val *
 val /
 val ~
 val <
 val <=
 val >
 val >=
 val ==
 val lessu
 val pi
 val e
 val isNan
 val plusInfinity
 val minusInfinity
 val NaN
 val two_to_the_54
 val two_to_the_minus_54
 val scalb
 val logb
 val negone
 val zero
 val half
 val one
 val two
 val four
 val copysign
 val abs
 val mod
 val floor
 val real
 val maxint
 val realround
 val PIo4
 val PIo2
 val PI3o4
 val PI
 val PI2
 val oneOver2Pi
 val exp__E
 val ln2hi
 val ln2lo
 val sqrt2
 val lnhuge
 val lntiny
 val invln2
 val exp
 val log__L
 val ln
 val oneOverln10
 val log10
 val isInt
 val isOddInt
 val intpow
 val pow
 val atan
 val atan2
 val sqrt
 val sin
 val cos
 val tan
 val asin
 val acos
 val cosh
 val sinh
 val tanh
}
structure OS{
 structure Process{
  type status
 }
 structure IO{
  type iodesc
 }
 type syserror
}
structure PreOS{
 structure Process => structure OS . structure Process
 structure IO => structure OS . structure IO
 type syserror => structure OS
}
structure UnixSignals{
 structure CI => structure InternalSignals . structure CI
 type signal => structure InternalSignals
 type sig_action => structure InternalSignals
 type sig_info => structure InternalSignals
 type sigmask => structure InternalSignals
 val signalFn
 val sigToConst
 val constToSig
 val sigList
 val numSigs
 val maxSig
 val sigTbl
 val debug
 val getInfo
 val setInfo
 val resetList
 val listSignals
 val toString
 val fromString
 val getSigState
 val setSigState
 val ignoreSigState
 val defaultSigState
 val enabledSigState
 val clearSigTbl
 val initSigTbl
 val resetSigTbl
 val incMask
 val decMask
 val maskSignals
 val unmaskSignals
 val masked
 val setHandler
 val overrideHandler
 val inqHandler
 val pause
 val sigHandler
 val sigINT
 val sigALRM
 val sigTERM
 val sigGC
 val sigPIPE
 val sigQUIT
 val sigUSR1
 val sigUSR2
 val sigCHLD
 val sigCONT
 val sigTSTP
 val sigTTIN
 val sigTTOU
}
structure BinIO{
 structure PIO => functor BinIOFn . structure PIO
 structure A => functor BinIOFn . structure A
 structure AS => functor BinIOFn . structure AS
 structure V => functor BinIOFn . structure V
 structure VS => functor BinIOFn . structure VS
 structure Pos => functor BinIOFn . structure Pos
 structure StreamIO => functor BinIOFn . structure StreamIO
 type vector => functor BinIOFn
 type elem => functor BinIOFn
 type instream => functor BinIOFn
 type outstream => functor BinIOFn
 val someElem
 val vecExtract
 val vecSub
 val arrUpdate
 val empty
 val input
 val input1
 val inputN
 val inputAll
 val canInput
 val lookahead
 val closeIn
 val endOfStream
 val output
 val output1
 val flushOut
 val closeOut
 val getPosOut
 val setPosOut
 val mkInstream
 val getInstream
 val setInstream
 val mkOutstream
 val getOutstream
 val setOutstream
 val openIn
 val openOut
 val openAppend
}
structure Unix{
 structure P{
  structure Sig => structure POSIX_Process . structure Sig
  structure W => structure POSIX_Process . structure W
  type word => structure POSIX_Process
  type s_int => structure POSIX_Process
  type signal => structure POSIX_Process
  type pid => structure POSIX_Process
  type waitpid_arg => structure POSIX_Process
  type killpid_arg => structure POSIX_Process
  type exit_status => structure POSIX_Process
  val ++
  val &
  val pidToWord
  val wordToPid
  val cfun
  val osval
  val w_osval
  val sysconf
  val fork'
  val fork
  val exec
  val exece
  val execp
  val waitpid'
  val argToInt
  val mkExitStatus
  val wnohang
  val waitpid
  val waitpid_nh
  val wait
  val exit
  val kill'
  val kill
  val alarm
  val sleep
  val pause
 }
 structure PE{
  structure FS => structure POSIX_ProcEnv . structure FS
  structure P => structure POSIX_ProcEnv . structure P
  type pid => structure POSIX_ProcEnv
  type uid => structure POSIX_ProcEnv
  type gid => structure POSIX_ProcEnv
  type file_desc => structure POSIX_ProcEnv
  type s_int => structure POSIX_ProcEnv
  val cfun
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val getpid'
  val getppid'
  val getpid
  val getppid
  val getuid'
  val geteuid'
  val getgid'
  val getegid'
  val getuid
  val geteuid
  val getgid
  val getegid
  val setuid'
  val setgid'
  val setuid
  val setgid
  val getgroups'
  val getgroups
  val getlogin
  val getpgrp'
  val setsid'
  val setpgid'
  val getpgrp
  val setsid
  val setpgid
  val uname
  val sysconf
  val time'
  val time
  val times'
  val ticksPerSec
  val times
  val getenv
  val environ
  val ctermid
  val ttyname'
  val ttyname
  val isatty'
  val isatty
 }
 structure PF{
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
 }
 structure PIO{
  structure FS => structure POSIX_IO . structure FS
  structure OM => structure POSIX_IO . structure OM
  structure S => structure POSIX_FileSys . structure S
  structure O => structure POSIX_FileSys . structure O
  structure ST => structure POSIX_FileSys . structure ST
  structure FD => structure POSIX_IO . structure FD
  structure O => structure POSIX_IO . structure O
  structure FLock => structure POSIX_IO . structure FLock
  type word => structure POSIX_FileSys
  type s_int => structure POSIX_FileSys
  type uid => structure POSIX_FileSys
  type gid => structure POSIX_FileSys
  type file_desc => structure POSIX_FileSys
  type open_mode => structure POSIX_FileSys
  type c_dirstream => structure POSIX_FileSys
  type dirstream => structure POSIX_FileSys
  type dev => structure POSIX_FileSys
  type ino => structure POSIX_FileSys
  type statrep => structure POSIX_FileSys
  type access_mode => structure POSIX_FileSys
  type word => structure POSIX_IO
  type s_int => structure POSIX_IO
  type file_desc => structure POSIX_IO
  type pid => structure POSIX_IO
  type whence => structure POSIX_IO
  type lock_type => structure POSIX_IO
  type flock_rep => structure POSIX_IO
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val intOf
  val fd
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val o_rdonly
  val o_wronly
  val o_rdwr
  val omodeFromWord
  val omodeToWord
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val opendir'
  val readdir'
  val rewinddir'
  val closedir'
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf'
  val openf
  val createf
  val creat
  val umask'
  val umask
  val link'
  val link
  val rename'
  val rename
  val symlink'
  val symlink
  val mkdir'
  val mkdir
  val mkfifo'
  val mkfifo
  val unlink
  val rmdir
  val readlink
  val ftruncate'
  val ftruncate
  val devToWord
  val wordToDev
  val inoToWord
  val wordToIno
  val mkStat
  val stat'
  val lstat'
  val fstat'
  val stat
  val lstat
  val fstat
  val a_read
  val a_write
  val a_exec
  val a_file
  val amodeToWord
  val access'
  val access
  val chmod'
  val chmod
  val fchmod'
  val fchmod
  val chown'
  val chown
  val fchown'
  val fchown
  val utime'
  val utime
  val pathconf
  val fpathconf'
  val fpathconf
  val ++
  val &
  val cfun
  val osval
  val w_osval
  val fail
  val pipe'
  val pipe
  val dup'
  val dup2'
  val dup
  val dup2
  val close'
  val close
  val read'
  val readbuf'
  val readArr
  val readVec
  val writevec'
  val writearr'
  val writeArr
  val writeVec
  val seek_set
  val seek_cur
  val seek_end
  val whToWord
  val whFromWord
  val fcntl_d
  val fcntl_gfd
  val fcntl_sfd
  val fcntl_gfl
  val fcntl_sfl
  val dupfd
  val getfd
  val setfd
  val getfl
  val setfl
  val fcntl_l
  val f_getlk
  val f_setlk
  val f_setlkw
  val f_rdlck
  val f_wrlck
  val f_unlck
  val flockToRep
  val flockFromRep
  val getlk
  val setlk
  val setlkw
  val lseek'
  val lseek
  val fsync'
  val fsync
 }
 structure SS{
 }
 type proc
 val protect
 val fdReader
 val fdWriter
 val openOutFD
 val openInFD
 val executeInEnv
 val execute
 val streamsOf
 val kill
 val reap
}
structure Pack16Big{
 structure W{
  structure W32 => structure Word32Imp . structure W32
  type word => structure Word32Imp
  val wordSize
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val toInt
  val toIntX
  val fromInt
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val <<
  val >>
  val ~>>
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 structure W8{
  structure W8 => structure Word8Imp . structure W8
  structure W31 => structure Word8Imp . structure W31
  structure LW => structure Word8Imp . structure LW
  type word => structure Word8Imp
  val wordSize
  val wordSizeW
  val wordShift
  val adapt
  val toInt
  val toIntX
  val fromInt
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val <<
  val >>
  val ~>>
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 structure W8V{
 }
 structure W8A{
 }
 val bytesPerElem
 val isBigEndian
 val chkIndex
 val mkWord
 val signExt
 val subVec
 val subVecX
 val subArr
 val subArrX
 val update
}
structure Pack16Little{
 structure W{
  structure W32 => structure Word32Imp . structure W32
  type word => structure Word32Imp
  val wordSize
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val toInt
  val toIntX
  val fromInt
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val <<
  val >>
  val ~>>
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 structure W8{
  structure W8 => structure Word8Imp . structure W8
  structure W31 => structure Word8Imp . structure W31
  structure LW => structure Word8Imp . structure LW
  type word => structure Word8Imp
  val wordSize
  val wordSizeW
  val wordShift
  val adapt
  val toInt
  val toIntX
  val fromInt
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val <<
  val >>
  val ~>>
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 structure W8V{
 }
 structure W8A{
 }
 val bytesPerElem
 val isBigEndian
 val chkIndex
 val mkWord
 val signExt
 val subVec
 val subVecX
 val subArr
 val subArrX
 val update
}
structure Pack32Big{
 structure W{
  structure W32 => structure Word32Imp . structure W32
  type word => structure Word32Imp
  val wordSize
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val toInt
  val toIntX
  val fromInt
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val <<
  val >>
  val ~>>
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 structure W8{
  structure W8 => structure Word8Imp . structure W8
  structure W31 => structure Word8Imp . structure W31
  structure LW => structure Word8Imp . structure LW
  type word => structure Word8Imp
  val wordSize
  val wordSizeW
  val wordShift
  val adapt
  val toInt
  val toIntX
  val fromInt
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val <<
  val >>
  val ~>>
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 structure W8V{
 }
 structure W8A{
 }
 val bytesPerElem
 val isBigEndian
 val chkIndex
 val mkWord
 val subVec
 val subVecX
 val subArr
 val subArrX
 val update
}
structure Pack32Little{
 structure W{
  structure W32 => structure Word32Imp . structure W32
  type word => structure Word32Imp
  val wordSize
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val toInt
  val toIntX
  val fromInt
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val <<
  val >>
  val ~>>
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 structure W8{
  structure W8 => structure Word8Imp . structure W8
  structure W31 => structure Word8Imp . structure W31
  structure LW => structure Word8Imp . structure LW
  type word => structure Word8Imp
  val wordSize
  val wordSizeW
  val wordShift
  val adapt
  val toInt
  val toIntX
  val fromInt
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val <<
  val >>
  val ~>>
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 structure W8V{
 }
 structure W8A{
 }
 val bytesPerElem
 val isBigEndian
 val chkIndex
 val mkWord
 val subVec
 val subVecX
 val subArr
 val subArrX
 val update
}
structure NetProtDB{
 type entry
 val netdbFun
 val name
 val aliases
 val protocol
 val getByName
 val getByNumber
}
structure NetServDB{
 type entry
 val netdbFun
 val name
 val aliases
 val port
 val protocol
 val getByName
 val getByPort
}
structure INetSock{
 structure SOCK{
  type sock_type => structure SocketImp . structure SOCK
  val listSockTypes
  val stream
  val dgram
  val list
  val toString
  val fromString
 }
 structure UDP{
  val socket
  val socket'
 }
 structure TCP{
  val socket
  val socket'
  val getNODELAY
  val setNODELAY
 }
 type inet
 type sock
 type stream_sock
 type dgram_sock
 type sock_addr
 val sockFn
 val inetAF
 val toAddr
 val fromAddr
 val any
}
structure NetDB{
 structure SysW{
  structure W32 => structure Word32Imp . structure W32
  type word => structure Word32Imp
  val wordSize
  val toLargeWord
  val toLargeWordX
  val fromLargeWord
  val toLargeInt
  val toLargeIntX
  val fromLargeInt
  val toInt
  val toIntX
  val fromInt
  val orb
  val xorb
  val andb
  val notb
  val *
  val +
  val -
  val div
  val mod
  val compare
  val >
  val >=
  val <
  val <=
  val <<
  val >>
  val ~>>
  val min
  val max
  val fmt
  val toString
  val scan
  val fromString
 }
 type net_addr
 type addr_family
 type entry
 val netdbFun
 val name
 val aliases
 val addrType
 val addr
 val getByName
 val getByAddr
 val scan
 val fromString
 val toString
}
structure GenericSock{
 structure PS{
  type addr => structure PreSock
  type af => structure PreSock
  type socket => structure PreSock
  type in_addr => structure PreSock
  type addr_family => structure PreSock
  type sock_type => structure PreSock
  type sock => structure PreSock
  type sock_addr => structure PreSock
  val toWords
  val fromBytes
 }
 val sockFn
 val addressFamilies
 val socketTypes
 val c_socket
 val c_socketPair
 val socket
 val socketPair
 val socket'
 val socketPair'
}
structure UnixSock{
 structure SOCK{
  type sock_type => structure SocketImp . structure SOCK
  val listSockTypes
  val stream
  val dgram
  val list
  val toString
  val fromString
 }
 structure Strm{
  val socket
  val socket'
  val socketPair
  val socketPair'
 }
 structure DGrm{
  val socket
  val socket'
  val socketPair
  val socketPair'
 }
 type unix
 type sock
 type stream_sock
 type dgram_sock
 type sock_addr
 val sockFn
 val unixAF
 val toAddr
 val fromAddr
}
signature STRING{
 type char
 type string
 val maxSize
 val size
 val sub
 val extract
 val substring
 val ^
 val concat
 val concatWith
 val str
 val implode
 val explode
 val map
 val translate
 val tokens
 val fields
 val isPrefix
 val isSubstring
 val isSuffix
 val compare
 val collate
 val <
 val <=
 val >
 val >=
 val fromString
 val toString
 val fromCString
 val toCString
}
signature STRING_CVT{
 type radix
 type realfmt
 type reader
 type cs
 val padLeft
 val padRight
 val splitl
 val takel
 val dropl
 val skipWS
 val scanString
}
signature CHAR{
 type char
 type string
 val chr
 val ord
 val minChar
 val maxChar
 val maxOrd
 val pred
 val succ
 val <
 val <=
 val >
 val >=
 val compare
 val scan
 val fromString
 val toString
 val fromCString
 val toCString
 val contains
 val notContains
 val isLower
 val isUpper
 val isDigit
 val isAlpha
 val isHexDigit
 val isAlphaNum
 val isPrint
 val isSpace
 val isPunct
 val isGraph
 val isCntrl
 val isAscii
 val toUpper
 val toLower
}
signature SUBSTRING{
}
signature MONO_ARRAY{
 type array
 type elem
 type vector
 val maxLen
 val array
 val fromList
 val tabulate
 val length
 val sub
 val update
 val vector
 val copy
 val copyVec
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
signature MONO_VECTOR{
 type vector
 type elem
 val maxLen
 val fromList
 val tabulate
 val length
 val sub
 val concat
 val update
 val appi
 val app
 val mapi
 val map
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
signature TEXT{
 structure Char{
  type char => signature CHAR
  type string => signature CHAR
  val chr
  val ord
  val minChar
  val maxChar
  val maxOrd
  val pred
  val succ
  val <
  val <=
  val >
  val >=
  val compare
  val scan
  val fromString
  val toString
  val fromCString
  val toCString
  val contains
  val notContains
  val isLower
  val isUpper
  val isDigit
  val isAlpha
  val isHexDigit
  val isAlphaNum
  val isPrint
  val isSpace
  val isPunct
  val isGraph
  val isCntrl
  val isAscii
  val toUpper
  val toLower
 }
 structure String{
  type char => signature STRING
  type string => signature STRING
  val maxSize
  val size
  val sub
  val extract
  val substring
  val ^
  val concat
  val concatWith
  val str
  val implode
  val explode
  val map
  val translate
  val tokens
  val fields
  val isPrefix
  val isSubstring
  val isSuffix
  val compare
  val collate
  val <
  val <=
  val >
  val >=
  val fromString
  val toString
  val fromCString
  val toCString
 }
 structure Substring{
 }
 structure CharVector{
  type vector => signature MONO_VECTOR
  type elem => signature MONO_VECTOR
  val maxLen
  val fromList
  val tabulate
  val length
  val sub
  val concat
  val update
  val appi
  val app
  val mapi
  val map
  val foldli
  val foldri
  val foldl
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure CharArray{
  type array => signature MONO_ARRAY
  type elem => signature MONO_ARRAY
  type vector => signature MONO_ARRAY
  val maxLen
  val array
  val fromList
  val tabulate
  val length
  val sub
  val update
  val vector
  val copy
  val copyVec
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldri
  val foldl
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
}
signature WORD{
 type word
 val wordSize
 val toLargeWord
 val toLargeWordX
 val fromLargeWord
 val toLargeInt
 val toLargeIntX
 val fromLargeInt
 val toInt
 val toIntX
 val fromInt
 val orb
 val xorb
 val andb
 val notb
 val <<
 val >>
 val ~>>
 val +
 val -
 val *
 val div
 val mod
 val compare
 val >
 val >=
 val <
 val <=
 val min
 val max
 val scan
 val fromString
 val fmt
 val toString
}
signature INT_INF{
 type int => signature INTEGER
 val precision
 val minInt
 val maxInt
 val toLarge
 val fromLarge
 val toInt
 val fromInt
 val ~
 val *
 val div
 val mod
 val quot
 val rem
 val +
 val -
 val abs
 val min
 val max
 val sign
 val sameSign
 val >
 val >=
 val <
 val <=
 val compare
 val toString
 val fromString
 val scan
 val fmt
 val divMod
 val quotRem
 val pow
 val log2
 val orb
 val xorb
 val andb
 val notb
 val <<
 val ~>>
}
signature INTEGER{
 type int
 val precision
 val minInt
 val maxInt
 val toLarge
 val fromLarge
 val toInt
 val fromInt
 val ~
 val *
 val div
 val mod
 val quot
 val rem
 val +
 val -
 val abs
 val min
 val max
 val sign
 val sameSign
 val >
 val >=
 val <
 val <=
 val compare
 val toString
 val fromString
 val scan
 val fmt
}
signature MATH{
 type real
 val pi
 val e
 val sqrt
 val sin
 val cos
 val tan
 val asin
 val acos
 val atan
 val atan2
 val exp
 val pow
 val ln
 val log10
 val sinh
 val cosh
 val tanh
}
signature IEEE_REAL{
 type real_order
 type nan_mode
 type float_class
 type rounding_mode
 type decimal_approx
 val setRoundingMode
 val getRoundingMode
 val toString
 val fromString
 val scan
 exception Unordered
}
signature REAL{
 structure Math{
  type real => signature MATH
  val pi
  val e
  val sqrt
  val sin
  val cos
  val tan
  val asin
  val acos
  val atan
  val atan2
  val exp
  val pow
  val ln
  val log10
  val sinh
  val cosh
  val tanh
 }
 type real
 val radix
 val precision
 val maxFinite
 val minPos
 val minNormalPos
 val posInf
 val negInf
 val +
 val -
 val *
 val /
 val *+
 val *-
 val ~
 val abs
 val min
 val max
 val sign
 val signBit
 val sameSign
 val copySign
 val compare
 val compareReal
 val <
 val <=
 val >
 val >=
 val ==
 val !=
 val ?=
 val unordered
 val isFinite
 val isNan
 val isNormal
 val class
 val fmt
 val toString
 val fromString
 val scan
 val toManExp
 val fromManExp
 val split
 val realMod
 val rem
 val nextAfter
 val checkFloat
 val floor
 val ceil
 val trunc
 val round
 val realFloor
 val realCeil
 val realTrunc
 val toInt
 val toLargeInt
 val fromInt
 val fromLargeInt
 val toLarge
 val fromLarge
 val toDecimal
 val fromDecimal
}
signature TIME{
 type time
 val zeroTime
 val fromReal
 val toReal
 val toSeconds
 val fromSeconds
 val toMilliseconds
 val fromMilliseconds
 val toMicroseconds
 val fromMicroseconds
 val +
 val -
 val compare
 val <
 val <=
 val >
 val >=
 val now
 val toString
 val fromString
 val fmt
 val scan
 exception Time
}
signature OS_FILE_SYS{
 type dirstream
 type access_mode
 type file_id
 val openDir
 val readDir
 val rewindDir
 val closeDir
 val chDir
 val getDir
 val mkDir
 val rmDir
 val isDir
 val isLink
 val readLink
 val fullPath
 val realPath
 val fileSize
 val modTime
 val setTime
 val remove
 val rename
 val access
 val tmpName
 val fileId
 val hash
 val compare
}
signature OS_PATH{
 val parentArc
 val currentArc
 val validVolume
 val fromString
 val toString
 val getVolume
 val getParent
 val splitDirFile
 val joinDirFile
 val dir
 val file
 val splitBaseExt
 val joinBaseExt
 val base
 val ext
 val mkCanonical
 val isCanonical
 val mkAbsolute
 val mkRelative
 val isAbsolute
 val isRelative
 val isRoot
 val concat
 val fromUnixPath
 val toUnixPath
 exception Path
}
signature OS_PROCESS{
 type status
 val success
 val failure
 val system
 val atExit
 val exit
 val terminate
 val getEnv
}
signature OS_IO{
 structure Kind{
  val file
  val dir
  val symlink
  val tty
  val pipe
  val socket
  val device
 }
 type iodesc
 type iodesc_kind
 type poll_desc
 type poll_info
 val hash
 val compare
 val kind
 val pollDesc
 val pollToIODesc
 val pollIn
 val pollOut
 val pollPri
 val poll
 val isIn
 val isOut
 val isPri
 val infoToPollDesc
 exception Poll
}
signature OS{
 structure FileSys{
  type dirstream => signature OS_FILE_SYS
  type access_mode => signature OS_FILE_SYS
  type file_id => signature OS_FILE_SYS
  val openDir
  val readDir
  val rewindDir
  val closeDir
  val chDir
  val getDir
  val mkDir
  val rmDir
  val isDir
  val isLink
  val readLink
  val fullPath
  val realPath
  val fileSize
  val modTime
  val setTime
  val remove
  val rename
  val access
  val tmpName
  val fileId
  val hash
  val compare
 }
 structure Path{
  val parentArc
  val currentArc
  val validVolume
  val fromString
  val toString
  val getVolume
  val getParent
  val splitDirFile
  val joinDirFile
  val dir
  val file
  val splitBaseExt
  val joinBaseExt
  val base
  val ext
  val mkCanonical
  val isCanonical
  val mkAbsolute
  val mkRelative
  val isAbsolute
  val isRelative
  val isRoot
  val concat
  val fromUnixPath
  val toUnixPath
  exception Path
 }
 structure Process{
  type status => signature OS_PROCESS
  val success
  val failure
  val system
  val atExit
  val exit
  val terminate
  val getEnv
 }
 structure IO{
  structure Kind => signature OS_IO . structure Kind
  type iodesc => signature OS_IO
  type iodesc_kind => signature OS_IO
  type poll_desc => signature OS_IO
  type poll_info => signature OS_IO
  val hash
  val compare
  val kind
  val pollDesc
  val pollToIODesc
  val pollIn
  val pollOut
  val pollPri
  val poll
  val isIn
  val isOut
  val isPri
  val infoToPollDesc
  exception Poll
 }
 type syserror
 val errorName
 val syserror
 val errorMsg
 exception SysErr
}
signature BYTE{
 val byteToChar
 val charToByte
 val bytesToString
 val stringToBytes
 val unpackStringVec
 val unpackString
 val packString
}
signature POSIX_ERROR{
 type syserror
 val toWord
 val fromWord
 val errorMsg
 val errorName
 val syserror
 val toobig
 val acces
 val again
 val badf
 val badmsg
 val busy
 val canceled
 val child
 val deadlk
 val dom
 val exist
 val fault
 val fbig
 val inprogress
 val intr
 val inval
 val io
 val isdir
 val loop
 val mfile
 val mlink
 val msgsize
 val nametoolong
 val nfile
 val nodev
 val noent
 val noexec
 val nolck
 val nomem
 val nospc
 val nosys
 val notdir
 val notempty
 val notsup
 val notty
 val nxio
 val perm
 val pipe
 val range
 val rofs
 val spipe
 val srch
 val xdev
}
signature POSIX_SIGNAL{
 type signal
 val toWord
 val fromWord
 val abrt
 val alrm
 val fpe
 val hup
 val ill
 val int
 val kill
 val pipe
 val quit
 val segv
 val term
 val usr1
 val usr2
 val chld
 val cont
 val stop
 val tstp
 val ttin
 val ttou
 val bus
}
signature POSIX_FLAGS{
 type flags
 val toWord
 val fromWord
 val flags
 val allSet
 val anySet
}
signature POSIX_PROCESS{
 structure W{
  type flags => signature POSIX_FLAGS
  val toWord
  val fromWord
  val flags
  val allSet
  val anySet
  val untraced
 }
 type signal
 type pid
 type waitpid_arg
 type exit_status
 type killpid_arg
 val wordToPid
 val pidToWord
 val fork
 val exec
 val exece
 val execp
 val wait
 val waitpid
 val waitpid_nh
 val exit
 val kill
 val alarm
 val pause
 val sleep
}
signature POSIX_FILE_SYS{
 structure S{
  type flags => signature POSIX_FLAGS
  type mode
  val toWord
  val fromWord
  val flags
  val allSet
  val anySet
  val irwxu
  val irusr
  val iwusr
  val ixusr
  val irwxg
  val irgrp
  val iwgrp
  val ixgrp
  val irwxo
  val iroth
  val iwoth
  val ixoth
  val isuid
  val isgid
 }
 structure O{
  type flags => signature POSIX_FLAGS
  val toWord
  val fromWord
  val flags
  val allSet
  val anySet
  val append
  val dsync
  val excl
  val noctty
  val nonblock
  val rsync
  val sync
  val trunc
 }
 structure ST{
  type stat
  val isDir
  val isChr
  val isBlk
  val isReg
  val isFIFO
  val isLink
  val isSock
  val mode
  val ino
  val dev
  val nlink
  val uid
  val gid
  val size
  val atime
  val mtime
  val ctime
 }
 type uid
 type gid
 type file_desc
 type dirstream
 type open_mode
 type dev
 type ino
 type access_mode
 val fdToWord
 val wordToFD
 val fdToIOD
 val iodToFD
 val opendir
 val readdir
 val rewinddir
 val closedir
 val chdir
 val getcwd
 val stdin
 val stdout
 val stderr
 val openf
 val createf
 val creat
 val umask
 val link
 val mkdir
 val mkfifo
 val unlink
 val rmdir
 val rename
 val symlink
 val readlink
 val ftruncate
 val wordToDev
 val devToWord
 val wordToIno
 val inoToWord
 val stat
 val lstat
 val fstat
 val access
 val chmod
 val fchmod
 val chown
 val fchown
 val utime
 val pathconf
 val fpathconf
}
signature POSIX_IO{
 structure FD{
  type flags => signature POSIX_FLAGS
  val toWord
  val fromWord
  val flags
  val allSet
  val anySet
  val cloexec
 }
 structure O{
  type flags => signature POSIX_FLAGS
  val toWord
  val fromWord
  val flags
  val allSet
  val anySet
  val append
  val dsync
  val nonblock
  val rsync
  val sync
 }
 structure FLock{
  type flock
  val flock
  val ltype
  val whence
  val start
  val len
  val pid
 }
 type file_desc
 type pid
 type whence
 type open_mode
 type lock_type
 val pipe
 val dup
 val dup2
 val close
 val readVec
 val readArr
 val writeVec
 val writeArr
 val dupfd
 val getfd
 val setfd
 val getfl
 val setfl
 val getlk
 val setlk
 val setlkw
 val lseek
 val fsync
}
signature POSIX_PROC_ENV{
 type pid
 type file_desc
 type uid
 type gid
 val uidToWord
 val wordToUid
 val gidToWord
 val wordToGid
 val getpid
 val getppid
 val getuid
 val geteuid
 val getgid
 val getegid
 val setuid
 val setgid
 val getgroups
 val getlogin
 val getpgrp
 val setsid
 val setpgid
 val uname
 val time
 val times
 val getenv
 val environ
 val ctermid
 val ttyname
 val isatty
 val sysconf
}
signature POSIX_SYS_DB{
 structure Passwd{
  type passwd
  val name
  val uid
  val gid
  val home
  val shell
 }
 structure Group{
  type group
  val name
  val gid
  val members
 }
 type uid
 type gid
 val getgrgid
 val getgrnam
 val getpwuid
 val getpwnam
}
signature POSIX_TTY{
 structure I{
  type flags => signature POSIX_FLAGS
  val toWord
  val fromWord
  val flags
  val allSet
  val anySet
  val brkint
  val icrnl
  val ignbrk
  val igncr
  val ignpar
  val inlcr
  val inpck
  val istrip
  val ixoff
  val ixon
  val parmrk
 }
 structure O{
  type flags => signature POSIX_FLAGS
  val toWord
  val fromWord
  val flags
  val allSet
  val anySet
  val opost
 }
 structure C{
  type flags => signature POSIX_FLAGS
  val toWord
  val fromWord
  val flags
  val allSet
  val anySet
  val clocal
  val cread
  val csize
  val cs5
  val cs6
  val cs7
  val cs8
  val cstopb
  val hupcl
  val parenb
  val parodd
 }
 structure L{
  type flags => signature POSIX_FLAGS
  val toWord
  val fromWord
  val flags
  val allSet
  val anySet
  val echo
  val echoe
  val echok
  val echonl
  val icanon
  val iexten
  val isig
  val noflsh
  val tostop
 }
 structure V{
  type cc
  val eof
  val eol
  val erase
  val intr
  val kill
  val min
  val quit
  val susp
  val time
  val start
  val stop
  val nccs
  val cc
  val update
  val sub
 }
 structure TC{
  type set_action
  type flow_action
  type queue_sel
  val sanow
  val sadrain
  val saflush
  val ooff
  val oon
  val ioff
  val ion
  val iflush
  val oflush
  val ioflush
 }
 type pid
 type file_desc
 type speed
 type termios
 val compareSpeed
 val speedToWord
 val wordToSpeed
 val b0
 val b50
 val b75
 val b110
 val b134
 val b150
 val b200
 val b300
 val b600
 val b1200
 val b1800
 val b2400
 val b4800
 val b9600
 val b19200
 val b38400
 val termios
 val fieldsOf
 val getiflag
 val getoflag
 val getcflag
 val getlflag
 val getcc
 val getospeed
 val setospeed
 val getispeed
 val setispeed
 val getattr
 val setattr
 val sendbreak
 val drain
 val flush
 val flow
 val getpgrp
 val setpgrp
}
signature POSIX{
 structure Error{
  type syserror => signature POSIX_ERROR
  val toWord
  val fromWord
  val errorMsg
  val errorName
  val syserror
  val toobig
  val acces
  val again
  val badf
  val badmsg
  val busy
  val canceled
  val child
  val deadlk
  val dom
  val exist
  val fault
  val fbig
  val inprogress
  val intr
  val inval
  val io
  val isdir
  val loop
  val mfile
  val mlink
  val msgsize
  val nametoolong
  val nfile
  val nodev
  val noent
  val noexec
  val nolck
  val nomem
  val nospc
  val nosys
  val notdir
  val notempty
  val notsup
  val notty
  val nxio
  val perm
  val pipe
  val range
  val rofs
  val spipe
  val srch
  val xdev
 }
 structure Signal{
  type signal => signature POSIX_SIGNAL
  val toWord
  val fromWord
  val abrt
  val alrm
  val fpe
  val hup
  val ill
  val int
  val kill
  val pipe
  val quit
  val segv
  val term
  val usr1
  val usr2
  val chld
  val cont
  val stop
  val tstp
  val ttin
  val ttou
  val bus
 }
 structure Process{
  structure W => signature POSIX_PROCESS . structure W
  type signal => signature POSIX_PROCESS
  type pid => signature POSIX_PROCESS
  type waitpid_arg => signature POSIX_PROCESS
  type exit_status => signature POSIX_PROCESS
  type killpid_arg => signature POSIX_PROCESS
  val wordToPid
  val pidToWord
  val fork
  val exec
  val exece
  val execp
  val wait
  val waitpid
  val waitpid_nh
  val exit
  val kill
  val alarm
  val pause
  val sleep
 }
 structure ProcEnv{
  type pid => signature POSIX_PROC_ENV
  type file_desc => signature POSIX_PROC_ENV
  type uid => signature POSIX_PROC_ENV
  type gid => signature POSIX_PROC_ENV
  val uidToWord
  val wordToUid
  val gidToWord
  val wordToGid
  val getpid
  val getppid
  val getuid
  val geteuid
  val getgid
  val getegid
  val setuid
  val setgid
  val getgroups
  val getlogin
  val getpgrp
  val setsid
  val setpgid
  val uname
  val time
  val times
  val getenv
  val environ
  val ctermid
  val ttyname
  val isatty
  val sysconf
 }
 structure FileSys{
  structure S => signature POSIX_FILE_SYS . structure S
  structure O => signature POSIX_FILE_SYS . structure O
  structure ST => signature POSIX_FILE_SYS . structure ST
  type uid => signature POSIX_FILE_SYS
  type gid => signature POSIX_FILE_SYS
  type file_desc => signature POSIX_FILE_SYS
  type dirstream => signature POSIX_FILE_SYS
  type open_mode => signature POSIX_FILE_SYS
  type dev => signature POSIX_FILE_SYS
  type ino => signature POSIX_FILE_SYS
  type access_mode => signature POSIX_FILE_SYS
  val fdToWord
  val wordToFD
  val fdToIOD
  val iodToFD
  val opendir
  val readdir
  val rewinddir
  val closedir
  val chdir
  val getcwd
  val stdin
  val stdout
  val stderr
  val openf
  val createf
  val creat
  val umask
  val link
  val mkdir
  val mkfifo
  val unlink
  val rmdir
  val rename
  val symlink
  val readlink
  val ftruncate
  val wordToDev
  val devToWord
  val wordToIno
  val inoToWord
  val stat
  val lstat
  val fstat
  val access
  val chmod
  val fchmod
  val chown
  val fchown
  val utime
  val pathconf
  val fpathconf
 }
 structure IO{
  structure FD => signature POSIX_IO . structure FD
  structure O => signature POSIX_IO . structure O
  structure FLock => signature POSIX_IO . structure FLock
  type file_desc => signature POSIX_IO
  type pid => signature POSIX_IO
  type whence => signature POSIX_IO
  type open_mode => signature POSIX_IO
  type lock_type => signature POSIX_IO
  val pipe
  val dup
  val dup2
  val close
  val readVec
  val readArr
  val writeVec
  val writeArr
  val dupfd
  val getfd
  val setfd
  val getfl
  val setfl
  val getlk
  val setlk
  val setlkw
  val lseek
  val fsync
 }
 structure SysDB{
  structure Passwd => signature POSIX_SYS_DB . structure Passwd
  structure Group => signature POSIX_SYS_DB . structure Group
  type uid => signature POSIX_SYS_DB
  type gid => signature POSIX_SYS_DB
  val getgrgid
  val getgrnam
  val getpwuid
  val getpwnam
 }
 structure TTY{
  structure I => signature POSIX_TTY . structure I
  structure O => signature POSIX_TTY . structure O
  structure C => signature POSIX_TTY . structure C
  structure L => signature POSIX_TTY . structure L
  structure V => signature POSIX_TTY . structure V
  structure TC => signature POSIX_TTY . structure TC
  type pid => signature POSIX_TTY
  type file_desc => signature POSIX_TTY
  type speed => signature POSIX_TTY
  type termios => signature POSIX_TTY
  val compareSpeed
  val speedToWord
  val wordToSpeed
  val b0
  val b50
  val b75
  val b110
  val b134
  val b150
  val b200
  val b300
  val b600
  val b1200
  val b1800
  val b2400
  val b4800
  val b9600
  val b19200
  val b38400
  val termios
  val fieldsOf
  val getiflag
  val getoflag
  val getcflag
  val getlflag
  val getcc
  val getospeed
  val setospeed
  val getispeed
  val setispeed
  val getattr
  val setattr
  val sendbreak
  val drain
  val flush
  val flow
  val getpgrp
  val setpgrp
 }
}
signature CLEAN_UP{
 type when
 val atAll
 val addCleaner
 val removeCleaner
 val clean
}
signature VECTOR{
 type vector
 val maxLen
 val fromList
 val tabulate
 val length
 val sub
 val update
 val concat
 val appi
 val app
 val mapi
 val map
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
signature MONO_ARRAY_SLICE{
 type elem
 type array
 type slice
 type vector
 type vector_slice
 val length
 val sub
 val update
 val full
 val slice
 val subslice
 val base
 val vector
 val copy
 val copyVec
 val isEmpty
 val getItem
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
signature VECTOR_SLICE{
 type slice
 val length
 val sub
 val full
 val slice
 val subslice
 val base
 val vector
 val concat
 val isEmpty
 val getItem
 val appi
 val app
 val mapi
 val map
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
signature MONO_VECTOR_SLICE{
 type elem
 type vector
 type slice
 val length
 val sub
 val full
 val slice
 val subslice
 val base
 val vector
 val concat
 val isEmpty
 val getItem
 val appi
 val app
 val mapi
 val map
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
signature WEAK{
 type weak
 type weak'
 val weak
 val strong
 val weak'
 val strong'
}
signature INTERVAL_TIMER{
 val tick
 val setIntTimer
}
signature SYS_INFO{
 type os_kind
 val getOSKind
 val getOSName
 val getOSVersion
 val getHostArch
 val getTargetArch
 val hasSoftwarePolling
 val hasMultiprocessing
 val getHeapSuffix
 exception UNKNOWN
}
signature CINTERFACE{
 type c_function
 type system_const
 val c_function
 val bindCFun
 val findSysConst
 val bindSysConst
 exception CFunNotFound
 exception SysConstNotFound
}
signature CONT{
 type cont
 type control_cont
 val callcc
 val throw
 val isolate
 val capture
 val escape
}
signature POLL{
 val pollEvent
 val setHandler
 val inqHandler
 val setFreq
 val inqFreq
 exception BadPollFreq
}
signature UNSAFE_OBJECT{
 type object
 type representation
 val toObject
 val mkTuple
 val boxed
 val unboxed
 val rep
 val length
 val toTuple
 val toString
 val toRef
 val toArray
 val toRealArray
 val toByteArray
 val toVector
 val toByteVector
 val toExn
 val toReal
 val toInt
 val toInt32
 val toWord
 val toWord8
 val toWord32
 val nth
 exception Representation
}
signature UNSAFE_ARRAY{
 val sub
 val update
 val create
}
signature UNSAFE_VECTOR{
 val sub
 val create
}
signature UNSAFE_MONO_ARRAY{
 type array
 type elem
 val sub
 val update
 val create
}
signature UNSAFE_MONO_VECTOR{
 type vector
 type elem
 val sub
 val update
 val create
}
signature UNSAFE{
 structure CInterface{
  type c_function => signature CINTERFACE
  type system_const => signature CINTERFACE
  val c_function
  val bindCFun
  val findSysConst
  val bindSysConst
  exception CFunNotFound
  exception SysConstNotFound
 }
 structure Object{
  type object => signature UNSAFE_OBJECT
  type representation => signature UNSAFE_OBJECT
  val toObject
  val mkTuple
  val boxed
  val unboxed
  val rep
  val length
  val toTuple
  val toString
  val toRef
  val toArray
  val toRealArray
  val toByteArray
  val toVector
  val toByteVector
  val toExn
  val toReal
  val toInt
  val toInt32
  val toWord
  val toWord8
  val toWord32
  val nth
  exception Representation
 }
 structure Poll{
  val pollEvent
  val setHandler
  val inqHandler
  val setFreq
  val inqFreq
  exception BadPollFreq
 }
 structure Vector{
  val sub
  val create
 }
 structure Array{
  val sub
  val update
  val create
 }
 structure CharVector{
  type vector => signature UNSAFE_MONO_VECTOR
  type elem => signature UNSAFE_MONO_VECTOR
  val sub
  val update
  val create
 }
 structure CharArray{
  type array => signature UNSAFE_MONO_ARRAY
  type elem => signature UNSAFE_MONO_ARRAY
  val sub
  val update
  val create
 }
 structure Word8Vector{
  type vector => signature UNSAFE_MONO_VECTOR
  type elem => signature UNSAFE_MONO_VECTOR
  val sub
  val update
  val create
 }
 structure Word8Array{
  type array => signature UNSAFE_MONO_ARRAY
  type elem => signature UNSAFE_MONO_ARRAY
  val sub
  val update
  val create
 }
 structure Real64Array{
  type array => signature UNSAFE_MONO_ARRAY
  type elem => signature UNSAFE_MONO_ARRAY
  val sub
  val update
  val create
 }
 type runDynEnv
 val getHdlr
 val setHdlr
 val getVar
 val setVar
 val getPseudo
 val setPseudo
 val blastRead
 val blastWrite
 val boxed
 val cast
 val pStruct
 val topLevelCont
 val sigHandler
}
signature ARRAY{
 type array
 type vector
 val maxLen
 val array
 val fromList
 val tabulate
 val length
 val sub
 val update
 val vector
 val copy
 val copyVec
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
signature PROF_CONTROL{
 type compunit
 val getTimeArray
 val profMode
 val current
 val profileOn
 val profileOff
 val getTimingMode
 val getQuantum
 val runTimeIndex
 val minorGCIndex
 val majorGCIndex
 val otherIndex
 val compileIndex
 val numPredefIndices
 val units
 val reset
 val spaceProfiling
 val spaceProfRegister
}
signature GC{
 val doGC
 val messages
}
signature INTERNALS{
 structure CleanUp{
  type when => signature CLEAN_UP
  val atAll
  val addCleaner
  val removeCleaner
  val clean
 }
 structure ProfControl{
  type compunit => signature PROF_CONTROL
  val getTimeArray
  val profMode
  val current
  val profileOn
  val profileOff
  val getTimingMode
  val getQuantum
  val runTimeIndex
  val minorGCIndex
  val majorGCIndex
  val otherIndex
  val compileIndex
  val numPredefIndices
  val units
  val reset
  val spaceProfiling
  val spaceProfRegister
 }
 structure GC{
  val doGC
  val messages
 }
 structure BTrace{
  val install
  val mode
  val report
  val bthandle
  val save
  val trigger
 }
 val prHook
 val initSigTbl
 val clearSigTbl
 val resetSigTbl
 val resetTimers
}
signature SML_OF_NJ{
 structure Cont{
  type cont => signature CONT
  type control_cont => signature CONT
  val callcc
  val throw
  val isolate
  val capture
  val escape
 }
 structure IntervalTimer{
  val tick
  val setIntTimer
 }
 structure Internals{
  structure CleanUp => signature INTERNALS . structure CleanUp
  structure ProfControl => signature INTERNALS . structure ProfControl
  structure GC => signature INTERNALS . structure GC
  structure BTrace => signature INTERNALS . structure BTrace
  val prHook
  val initSigTbl
  val clearSigTbl
  val resetSigTbl
  val resetTimers
 }
 structure SysInfo{
  type os_kind => signature SYS_INFO
  val getOSKind
  val getOSName
  val getOSVersion
  val getHostArch
  val getTargetArch
  val hasSoftwarePolling
  val hasMultiprocessing
  val getHeapSuffix
  exception UNKNOWN
 }
 structure Weak{
  type weak => signature WEAK
  type weak' => signature WEAK
  val weak
  val strong
  val weak'
  val strong'
 }
 type frag
 val exportML
 val exportFn
 val getCmdName
 val getArgs
 val getAllArgs
 val exnHistory
}
signature NET_HOST_DB{
 type in_addr
 type addr_family
 type entry
 val name
 val aliases
 val addrType
 val addr
 val addrs
 val getByName
 val getByAddr
 val getHostName
 val scan
 val fromString
 val toString
}
signature SOCKET{
 structure AF{
  type addr_family
  val list
  val toString
  val fromString
 }
 structure SOCK{
  type sock_type
  val stream
  val dgram
  val list
  val toString
  val fromString
 }
 structure Ctl{
  val getDEBUG
  val setDEBUG
  val getREUSEADDR
  val setREUSEADDR
  val getKEEPALIVE
  val setKEEPALIVE
  val getDONTROUTE
  val setDONTROUTE
  val getLINGER
  val setLINGER
  val getBROADCAST
  val setBROADCAST
  val getOOBINLINE
  val setOOBINLINE
  val getSNDBUF
  val setSNDBUF
  val getRCVBUF
  val setRCVBUF
  val getTYPE
  val getERROR
  val getPeerName
  val getSockName
  val setNBIO
  val getNREAD
  val getATMARK
 }
 type sock
 type sock_addr
 type dgram
 type stream
 type passive
 type active
 type shutdown_mode
 type out_flags
 type in_flags
 type buf
 val sameAddr
 val familyOfAddr
 val accept
 val bind
 val connect
 val listen
 val close
 val shutdown
 val pollDesc
 val sendVec
 val sendArr
 val sendVec'
 val sendArr'
 val sendVecTo
 val sendArrTo
 val sendVecTo'
 val sendArrTo'
 val recvVec
 val recvArr
 val recvVec'
 val recvArr'
 val recvVecFrom
 val recvArrFrom
 val recvVecFrom'
 val recvArrFrom'
}
signature SIGNALS{
 type signal
 type sig_action
 type sigmask
 val listSignals
 val toString
 val fromString
 val setHandler
 val overrideHandler
 val inqHandler
 val maskSignals
 val unmaskSignals
 val masked
 val pause
 val sigINT
 val sigALRM
 val sigTERM
 val sigGC
}
signature EXPORT{
 val exportML
 val exportFn
}
signature PRE_GENERAL{
 type unit
 type exn
 type order
 val !
 val :=
 val o
 val before
 val ignore
 exception Bind
 exception Match
 exception Subscript
 exception Size
 exception Overflow
 exception Chr
 exception Div
 exception Domain
 exception Span
 exception Fail
}
signature GENERAL{
 type unit => signature PRE_GENERAL
 type exn => signature PRE_GENERAL
 type order => signature PRE_GENERAL
 val !
 val :=
 val o
 val before
 val ignore
 val exnName
 val exnMessage
 exception Bind
 exception Match
 exception Subscript
 exception Size
 exception Overflow
 exception Chr
 exception Div
 exception Domain
 exception Span
 exception Fail
}
signature ARRAY_SLICE{
 type slice
 val length
 val sub
 val update
 val full
 val slice
 val subslice
 val base
 val vector
 val copy
 val copyVec
 val isEmpty
 val getItem
 val appi
 val app
 val modifyi
 val modify
 val foldli
 val foldri
 val foldl
 val foldr
 val findi
 val find
 val exists
 val all
 val collate
}
signature ARRAY2{
 type array
 type region
 type traversal
 val array
 val fromList
 val tabulate
 val sub
 val update
 val dimensions
 val nCols
 val nRows
 val row
 val column
 val copy
 val appi
 val app
 val modifyi
 val modify
 val foldi
 val fold
}
signature BOOL{
 type bool
 val not
 val toString
 val fromString
 val scan
}
signature LIST{
 type list
 val null
 val hd
 val tl
 val last
 val getItem
 val nth
 val take
 val drop
 val length
 val rev
 val @
 val concat
 val revAppend
 val app
 val map
 val mapPartial
 val find
 val filter
 val partition
 val foldr
 val foldl
 val exists
 val all
 val tabulate
 val collate
 exception Empty
}
signature LIST_PAIR{
 val zip
 val zipEq
 val unzip
 val map
 val mapEq
 val app
 val appEq
 val foldl
 val foldr
 val foldlEq
 val foldrEq
 val all
 val allEq
 val exists
 exception UnequalLengths
}
signature COMMAND_LINE{
 val name
 val arguments
}
signature DATE{
 type weekday
 type month
 type date
 val year
 val month
 val day
 val hour
 val minute
 val second
 val weekDay
 val yearDay
 val isDst
 val offset
 val localOffset
 val date
 val fromTimeLocal
 val fromTimeUniv
 val toTime
 val toString
 val fmt
 val fromString
 val scan
 val compare
 exception Date
}
signature TIMER{
 type cpu_timer
 type real_timer
 val totalCPUTimer
 val startCPUTimer
 val checkCPUTimer
 val totalRealTimer
 val startRealTimer
 val checkRealTimer
}
signature OPTION{
 type option
 val getOpt
 val isSome
 val valOf
 val filter
 val join
 val app
 val map
 val mapPartial
 val compose
 val composePartial
 exception Option
}
signature SML90{
 type instream
 type outstream
 val sqrt
 val exp
 val ln
 val sin
 val cos
 val arctan
 val ord
 val chr
 val explode
 val implode
 val std_in
 val open_in
 val input
 val lookahead
 val close_in
 val end_of_stream
 val std_out
 val open_out
 val output
 val close_out
 exception Sqrt
 exception Ln
 exception Ord
 exception Io
 exception Abs
 exception Quot
 exception Prod
 exception Neg
 exception Sum
 exception Diff
 exception Floor
 exception Exp
 exception Interrupt
 exception Mod
}
signature MONO_ARRAY2{
 type array
 type vector
 type elem
 type region
 type traversal
 val array
 val fromList
 val tabulate
 val sub
 val update
 val dimensions
 val nCols
 val nRows
 val row
 val column
 val copy
 val appi
 val app
 val modifyi
 val modify
 val foldi
 val fold
}
signature PRIM_IO{
 type array
 type vector
 type elem
 type pos
 type reader
 type writer
 val compare
 val augmentReader
 val augmentWriter
}
signature OS_PRIM_IO{
 structure PrimIO{
  type array => signature PRIM_IO
  type vector => signature PRIM_IO
  type elem => signature PRIM_IO
  type pos => signature PRIM_IO
  type reader => signature PRIM_IO
  type writer => signature PRIM_IO
  val compare
  val augmentReader
  val augmentWriter
 }
 type file_desc
 val openRd
 val openWr
 val openApp
 val mkReader
 val mkWriter
}
signature IO{
 type buffer_mode
 exception Io
 exception BlockingNotSupported
 exception NonblockingNotSupported
 exception RandomAccessNotSupported
 exception TerminatedStream
 exception ClosedStream
}
signature STREAM_IO{
 type vector
 type elem
 type reader
 type writer
 type instream
 type outstream
 type pos
 type out_pos
 val input
 val input1
 val inputN
 val inputAll
 val canInput
 val closeIn
 val endOfStream
 val mkInstream
 val getReader
 val filePosIn
 val output
 val output1
 val flushOut
 val closeOut
 val setBufferMode
 val getBufferMode
 val mkOutstream
 val getWriter
 val getPosOut
 val setPosOut
 val filePosOut
}
signature TEXT_STREAM_IO{
 type vector => signature STREAM_IO
 type elem => signature STREAM_IO
 type reader => signature STREAM_IO
 type writer => signature STREAM_IO
 type instream => signature STREAM_IO
 type outstream => signature STREAM_IO
 type pos => signature STREAM_IO
 type out_pos => signature STREAM_IO
 val input
 val input1
 val inputN
 val inputAll
 val canInput
 val closeIn
 val endOfStream
 val mkInstream
 val getReader
 val filePosIn
 val output
 val output1
 val flushOut
 val closeOut
 val setBufferMode
 val getBufferMode
 val mkOutstream
 val getWriter
 val getPosOut
 val setPosOut
 val filePosOut
 val inputLine
 val outputSubstr
}
signature TEXT_IO{
 structure StreamIO{
  type vector => signature STREAM_IO
  type elem => signature STREAM_IO
  type reader => signature STREAM_IO
  type writer => signature STREAM_IO
  type instream => signature STREAM_IO
  type outstream => signature STREAM_IO
  type pos => signature STREAM_IO
  type out_pos => signature STREAM_IO
  val input
  val input1
  val inputN
  val inputAll
  val canInput
  val closeIn
  val endOfStream
  val mkInstream
  val getReader
  val filePosIn
  val output
  val output1
  val flushOut
  val closeOut
  val setBufferMode
  val getBufferMode
  val mkOutstream
  val getWriter
  val getPosOut
  val setPosOut
  val filePosOut
  val inputLine
  val outputSubstr
 }
 type vector
 type elem
 type instream
 type outstream
 val input
 val input1
 val inputN
 val inputAll
 val canInput
 val lookahead
 val closeIn
 val endOfStream
 val output
 val output1
 val flushOut
 val closeOut
 val mkInstream
 val getInstream
 val setInstream
 val getPosOut
 val setPosOut
 val mkOutstream
 val getOutstream
 val setOutstream
 val inputLine
 val outputSubstr
 val openIn
 val openString
 val openOut
 val openAppend
 val stdIn
 val stdOut
 val stdErr
 val print
 val scanStream
}
signature UNIX_SIGNALS{
 type signal => signature SIGNALS
 type sig_action => signature SIGNALS
 type sigmask => signature SIGNALS
 val listSignals
 val toString
 val fromString
 val setHandler
 val overrideHandler
 val inqHandler
 val maskSignals
 val unmaskSignals
 val masked
 val pause
 val sigINT
 val sigALRM
 val sigTERM
 val sigGC
 val sigPIPE
 val sigQUIT
 val sigUSR1
 val sigUSR2
 val sigCHLD
 val sigCONT
 val sigTSTP
 val sigTTIN
 val sigTTOU
}
signature IMPERATIVE_IO{
 structure StreamIO{
  type vector => signature STREAM_IO
  type elem => signature STREAM_IO
  type reader => signature STREAM_IO
  type writer => signature STREAM_IO
  type instream => signature STREAM_IO
  type outstream => signature STREAM_IO
  type pos => signature STREAM_IO
  type out_pos => signature STREAM_IO
  val input
  val input1
  val inputN
  val inputAll
  val canInput
  val closeIn
  val endOfStream
  val mkInstream
  val getReader
  val filePosIn
  val output
  val output1
  val flushOut
  val closeOut
  val setBufferMode
  val getBufferMode
  val mkOutstream
  val getWriter
  val getPosOut
  val setPosOut
  val filePosOut
 }
 type vector
 type elem
 type instream
 type outstream
 val input
 val input1
 val inputN
 val inputAll
 val canInput
 val lookahead
 val closeIn
 val endOfStream
 val output
 val output1
 val flushOut
 val closeOut
 val mkInstream
 val getInstream
 val setInstream
 val getPosOut
 val setPosOut
 val mkOutstream
 val getOutstream
 val setOutstream
}
signature BIN_IO{
 structure StreamIO => signature IMPERATIVE_IO . structure StreamIO
 type vector => signature IMPERATIVE_IO
 type elem => signature IMPERATIVE_IO
 type instream => signature IMPERATIVE_IO
 type outstream => signature IMPERATIVE_IO
 val input
 val input1
 val inputN
 val inputAll
 val canInput
 val lookahead
 val closeIn
 val endOfStream
 val output
 val output1
 val flushOut
 val closeOut
 val mkInstream
 val getInstream
 val setInstream
 val getPosOut
 val setPosOut
 val mkOutstream
 val getOutstream
 val setOutstream
 val openIn
 val openOut
 val openAppend
}
signature UNIX{
 type proc
 val executeInEnv
 val execute
 val streamsOf
 val reap
 val kill
}
signature PACK_WORD{
 val bytesPerElem
 val isBigEndian
 val subVec
 val subVecX
 val subArr
 val subArrX
 val update
}
signature NET_PROT_DB{
 type entry
 val name
 val aliases
 val protocol
 val getByName
 val getByNumber
}
signature NET_SERV_DB{
 type entry
 val name
 val aliases
 val port
 val protocol
 val getByName
 val getByPort
}
signature GENERIC_SOCK{
 val addressFamilies
 val socketTypes
 val socket
 val socketPair
 val socket'
 val socketPair'
}
signature INET_SOCK{
 structure UDP{
  val socket
  val socket'
 }
 structure TCP{
  val socket
  val socket'
  val getNODELAY
  val setNODELAY
 }
 type inet
 type sock
 type stream_sock
 type dgram_sock
 type sock_addr
 val inetAF
 val toAddr
 val fromAddr
 val any
}
signature NET_DB{
 type net_addr
 type addr_family
 type entry
 val name
 val aliases
 val addrType
 val addr
 val getByName
 val getByAddr
 val scan
 val fromString
 val toString
}
signature UNIX_SOCK{
 structure Strm{
  val socket
  val socketPair
 }
 structure DGrm{
  val socket
  val socketPair
 }
 type unix
 type sock
 type stream_sock
 type dgram_sock
 type sock_addr
 val unixAF
 val toAddr
 val fromAddr
}
functor OS_PathFn{
 structure P{
  val classify
  val parentArc
  val currentArc
  val validVolume
  val splitVolPath
  val joinVolPath
  val arcSepChar
  val sameVol
  exception Path
 }
 structure SS{
 }
 val arcSepStr
 val parentArc
 val currentArc
 val concatArcs
 val validVolume
 val fromString
 val toString
 val getVolume
 val getParent
 val splitDirFile
 val joinDirFile
 val dir
 val file
 val splitBaseExt
 val joinBaseExt
 val base
 val ext
 val mkCanonical
 val isCanonical
 val isAbsolute
 val isRelative
 val mkAbsolute
 val mkRelative
 val isRoot
 val concat
 val fromUnixPath
 val toUnixPath
 exception Path
}
functor PrimIO{
 structure A{
  type array => signature MONO_ARRAY
  type elem => signature MONO_ARRAY
  type vector => signature MONO_ARRAY
  val maxLen
  val array
  val fromList
  val tabulate
  val length
  val sub
  val update
  val vector
  val copy
  val copyVec
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldri
  val foldl
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure AS{
  type elem => signature MONO_ARRAY_SLICE
  type array => signature MONO_ARRAY_SLICE
  type slice => signature MONO_ARRAY_SLICE
  type vector => signature MONO_ARRAY_SLICE
  type vector_slice => signature MONO_ARRAY_SLICE
  val length
  val sub
  val update
  val full
  val slice
  val subslice
  val base
  val vector
  val copy
  val copyVec
  val isEmpty
  val getItem
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldri
  val foldl
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure V{
  type vector => signature MONO_VECTOR
  type elem => signature MONO_VECTOR
  val maxLen
  val fromList
  val tabulate
  val length
  val sub
  val concat
  val update
  val appi
  val app
  val mapi
  val map
  val foldli
  val foldri
  val foldl
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure VS{
  type elem => signature MONO_VECTOR_SLICE
  type vector => signature MONO_VECTOR_SLICE
  type slice => signature MONO_VECTOR_SLICE
  val length
  val sub
  val full
  val slice
  val subslice
  val base
  val vector
  val concat
  val isEmpty
  val getItem
  val appi
  val app
  val mapi
  val map
  val foldli
  val foldri
  val foldl
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 type elem
 type vector
 type array
 type pos
 type reader
 type writer
 val compare
 val blockingOperation
 val nonblockingOperation
 val augmentReader
 val augmentWriter
}
functor TextIOFn{
 structure PIO{
  type array => signature PRIM_IO
  type vector => signature PRIM_IO
  type elem => signature PRIM_IO
  type pos => signature PRIM_IO
  type reader => signature PRIM_IO
  type writer => signature PRIM_IO
  val compare
  val augmentReader
  val augmentWriter
 }
 structure A{
  structure String => structure CharArray . structure String
  structure A => structure CharArray . structure A
  type elem => structure CharArray
  type vector => structure CharArray
  type array => structure CharArray
  val --
  val ++
  val uupd
  val usub
  val vuupd
  val vusub
  val vlength
  val maxLen
  val array
  val tabulate
  val fromList
  val length
  val sub
  val update
  val vector
  val copy
  val copyVec
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure V{
  structure String => structure CharVector . structure String
  type elem => structure CharVector
  type vector => structure CharVector
  val --
  val ++
  val usub
  val uupd
  val maxLen
  val fromList
  val tabulate
  val length
  val sub
  val concat
  val update
  val appi
  val app
  val mapi
  val map
  val foldli
  val foldri
  val foldl
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure AS{
  type elem => structure CharArraySlice
  type array => structure CharArraySlice
  type vector => structure CharArraySlice
  type vector_slice => structure CharArraySlice
  type slice => structure CharArraySlice
  val --
  val ++
  val usub
  val uupd
  val vusub
  val vuupd
  val alength
  val vlength
  val length
  val sub
  val update
  val full
  val slice
  val subslice
  val base
  val vector
  val copy
  val copyVec
  val isEmpty
  val getItem
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure VS{
  type elem => structure CharVectorSlice
  type vector => structure CharVectorSlice
  type slice => structure CharVectorSlice
  val --
  val ++
  val usub
  val vlength
  val length
  val sub
  val full
  val slice
  val subslice
  val base
  val vector
  val isEmpty
  val getItem
  val appi
  val app
  val foldli
  val foldl
  val foldri
  val foldr
  val concat
  val mapi
  val map
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure StreamIO{
  type vector
  type elem
  type reader
  type writer
  type pos
  type instream
  type in_buffer
  type more
  type info
  type outstream
  type out_pos
  val infoOfIBuf
  val chunkSzOfIBuf
  val readVec
  val inputExn
  val extendStream
  val getBuffer
  val readChunk
  val generalizedInput
  val terminate
  val input
  val input1
  val inputN
  val inputAll
  val canInput
  val closeIn
  val endOfStream
  val mkInstream
  val getReader
  val filePosIn
  val inputLine
  val outputExn
  val isNL
  val isClosedOut
  val flushBuffer
  val lineBufCopyVec
  val blockBufCopyVec
  val output
  val output1
  val flushOut
  val closeOut
  val mkOutstream
  val getWriter
  val getPosOut
  val filePosOut
  val setPosOut
  val outputSubstr
  val setBufferMode
  val getBufferMode
  exception WouldBlock
 }
 type vector
 type elem
 type instream
 type outstream
 val someElem
 val vecExtract
 val vecSub
 val arrUpdate
 val substringBase
 val empty
 val input
 val input1
 val inputN
 val inputAll
 val canInput
 val lookahead
 val closeIn
 val endOfStream
 val output
 val output1
 val flushOut
 val closeOut
 val getPosOut
 val setPosOut
 val mkInstream
 val getInstream
 val setInstream
 val mkOutstream
 val getOutstream
 val setOutstream
 val bufferMode
 val openIn
 val openOut
 val openAppend
 val inputLine
 val outputSubstr
 val openString
 val stdIn
 val stdOut
 val stdErr
 val print
 val scanStream
}
functor BinIOFn{
 structure PIO{
  type array => signature PRIM_IO
  type vector => signature PRIM_IO
  type elem => signature PRIM_IO
  type pos => signature PRIM_IO
  type reader => signature PRIM_IO
  type writer => signature PRIM_IO
  val compare
  val augmentReader
  val augmentWriter
 }
 structure A{
  structure A => structure Word8Array . structure A
  structure V => structure Word8Array . structure V
  type array => structure Word8Array
  type elem => structure Word8Array
  type vector => structure Word8Array
  val --
  val ++
  val uupd
  val usub
  val vuupd
  val vusub
  val vlength
  val emptyV
  val maxLen
  val array
  val tabulate
  val fromList
  val length
  val sub
  val update
  val vector
  val copy
  val copyVec
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure AS{
  type elem => structure Word8ArraySlice
  type array => structure Word8ArraySlice
  type vector => structure Word8ArraySlice
  type vector_slice => structure Word8ArraySlice
  type slice => structure Word8ArraySlice
  val --
  val ++
  val usub
  val uupd
  val vusub
  val vuupd
  val alength
  val vlength
  val length
  val sub
  val update
  val full
  val slice
  val subslice
  val base
  val vector
  val copy
  val copyVec
  val isEmpty
  val getItem
  val appi
  val app
  val modifyi
  val modify
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure V{
  structure V => structure Word8Vector . structure V
  type vector => structure Word8Vector
  type elem => structure Word8Vector
  val --
  val ++
  val usub
  val uupd
  val vector0
  val createVec
  val maxLen
  val fromList
  val tabulate
  val length
  val sub
  val concat
  val appi
  val app
  val update
  val mapi
  val map
  val v2cv
  val foldli
  val foldl
  val foldri
  val foldr
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure VS{
  type elem => structure Word8VectorSlice
  type vector => structure Word8VectorSlice
  type slice => structure Word8VectorSlice
  val --
  val ++
  val usub
  val vlength
  val length
  val sub
  val full
  val slice
  val subslice
  val base
  val vector
  val isEmpty
  val getItem
  val appi
  val app
  val foldli
  val foldl
  val foldri
  val foldr
  val concat
  val mapi
  val map
  val findi
  val find
  val exists
  val all
  val collate
 }
 structure Pos{
  structure I31 => structure Int31Imp . structure I31
  structure I32 => structure Int31Imp . structure I32
  type int => structure Int31Imp
  val precision
  val minIntVal
  val minInt
  val maxInt
  val toLarge
  val fromLarge
  val toInt
  val fromInt
  val ~
  val *
  val +
  val -
  val div
  val mod
  val quot
  val rem
  val min
  val max
  val abs
  val sign
  val sameSign
  val compare
  val >
  val >=
  val <
  val <=
  val fmt
  val scan
  val toString
  val fromString
  exception Div
  exception Overflow
 }
 structure StreamIO{
  type vector
  type elem
  type reader
  type writer
  type pos
  type instream
  type in_buffer
  type more
  type info
  type outstream
  type out_pos
  val infoOfIBuf
  val chunkSzOfIBuf
  val readVec
  val inputExn
  val extendStream
  val getBuffer
  val readChunk
  val generalizedInput
  val terminate
  val input
  val input1
  val inputN
  val inputAll
  val canInput
  val closeIn
  val endOfStream
  val mkInstream
  val getReader
  val filePosIn
  val outputExn
  val isClosedOut
  val flushBuffer
  val output
  val output1
  val flushOut
  val closeOut
  val mkOutstream
  val getWriter
  val getPosOut
  val filePosOut
  val setPosOut
  val setBufferMode
  val getBufferMode
  exception WouldBlock
 }
 type vector
 type elem
 type instream
 type outstream
 val someElem
 val vecExtract
 val vecSub
 val arrUpdate
 val empty
 val input
 val input1
 val inputN
 val inputAll
 val canInput
 val lookahead
 val closeIn
 val endOfStream
 val output
 val output1
 val flushOut
 val closeOut
 val getPosOut
 val setPosOut
 val mkInstream
 val getInstream
 val setInstream
 val mkOutstream
 val getOutstream
 val setOutstream
 val openIn
 val openOut
 val openAppend
}

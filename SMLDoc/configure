#!/bin/sh
#
# easy configuration script for SMLDoc
#
# This script does
#   * generate Makefile from Makefile.in
#   * generate src/test/smlunitlib.cm (optional)
#
# @author UENO Katsuhiro
# @author YAMATODANI Kiyoshi
# @version $Id: configure,v 1.23 2007/11/08 03:09:50 katsu Exp $

###############################################################################

pwd=`pwd`
host_os=`uname -s|sed y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/`
srcdirname=srcdir_smldoc
appname=smldoc
unittestdir=src/test

prefix=/usr/local
smlformatdir="$pwd"
smlunitdir="$pwd/../SMLUnit"
compiler=mlton

###############################################################################

usage="Usage: $0 OPTIONS...

Options:
  --help                print this message.
  --prefix=DIR          install files to DIR [default=$prefix]
  --exec-prefix=DIR     isntall executables to DIR [default=$prefix]
  --with-smlformat=DIR  use SMLFormat [default=$smlformatdir]
  --with-smlunit=DIR    use SMLUnit [default=$smlunitdir]
  --with-smlnj          use SML/NJ [default=no]
  --with-mlton          use MLton [default=yes]
  --with-smlsharp       use SML# [default=no]
"

for opt in "$@"
do
  optarg=`expr "x$opt" : 'x[^=]*=\(.*\)'`
  case "$opt" in
    --help)
      echo "$usage"
      exit 0
      ;;
    --prefix=*)
      prefix="$optarg"
      ;;
    --exec_prefix=*)
      exec_prefix="$optarg"
      ;;
    --with-smlformatdir=*)
      smlformatdir="$optarg"
      ;;
    --with-smlunit=*)
      smlunitdir="$optarg"
      ;;
    --without-smlunit)
      smlunitdir=
      ;;
    --with-smlnj)
      compiler=smlnj
      ;;
    --with-mlton)
      compiler=mlton
      ;;
    --with-smlsharp)
      compiler=smlsharp
      ;;
    *)
      echo "$0: error: unrecognized option: $opt" 1>&2
      echo "Try \`$0 --help' for more information." 1>&2
      exit 1
      ;;
  esac
done

echo "SML compiler for building $appname... $compiler"

###############################################################################

msyspath () {
  case "$1" in
    /[a-zA-Z]/*) echo "$1" | sed 's,/\(.\)/,\1:/,' ;;
    /[a-zA-Z]) echo "$1" | sed 's,/\(.\),\1:/,' ;;
    /*) root=`cd / && pwd -W`; echo "$root$1" ;;
    [a-zA-Z]:*) echo "$1" ;;
    *) echo "$1" ;;
  esac
}

cmpath () {
  case "$host_os" in
    *cygwin*)
      if test "x$SMLNJ_CYGWIN_RUNTIME" = "x"; then
        # Win32 SML/NJ CM requires '\' as separator.
        # On cygwin, the path must be converted to Windows style.
        cygpath -aw "$1"
      else
        # Cygwin SML/NJ CM requires UNIX form path.
        cygpath -au "$1"
      fi
      ;;
    *mingw*)
      msyspath "$1" | sed 's,/,\\\\,g'
      ;;
    *)
      echo "$1"
      ;;
  esac
}

if test "x$exec_prefix" = "x"; then
  exec_prefix='${prefix}'
fi

smlunitlib_cm="$smlunitdir/smlunitlib.cm"
if test -f "$smlunitlib_cm"; then
  smlunitlib_cm=`cmpath "$smlunitlib_cm"`
  echo 'creating $unittestdir/smlunitlib.cm'
  echo "Alias \"$smlunitlib_cm\"" > ./$unittestdir/smlunitlib.cm
else
  echo '*** NOTICE: --with-smlunit option is not specified.' 1>&2
  echo '***         generation for SMLUnit is skipped.' 1>&2
fi

###############################################################################

SMLFORMATDIR="$smlformatdir"
SMLUNITDIR="$smlunitdir"
EXEEXT=
MKSMLRUN=:
MKSMLHEAP=:

case "$host_os" in
*cygwin*)
  SMLFORMATDIR=`cygpath -am "$SMLFORMATDIR"`
  SMLUNITDIR=`cygpath -am "$SMLUNITDIR"`
  EXEEXT=.exe
  # make requires UNIX path
  abspath=`cygpath -au "$pwd"`
  ;;
*mingw*)
  SMLFORMATDIR=`msyspath "$SMLFORMATDIR"`
  SMLUNITDIR=`msyspath "$SMLUNITDIR"`
  EXEEXT=.exe
  abspath=`msyspath "$pwd"`
  ;;
*)
  abspath="$pwd"
  ;;
esac

###############################################################################

case "$compiler" in
mlton)
  MLLEX=mllex
  MLYACC=mlyacc
  ;;

smlsharp)
  MLLEX=smllex
  MLYACC=smlyacc
  ;;

smlnj)
  case "$host_os" in
  *cygwin*)
    if test "x$SMLNJ_CYGWIN_RUNTIME" = "x"; then
      SML=sml.bat
      MLLEX=ml-lex.bat
      MLYACC=ml-yacc.bat
      SML_HEAP_SUFFIX=x86-win32
      MAINFUNC='(fn (p,_::ps)=> Main.main(p,ps) | (p,nil)=> Main.main(p,nil))'
    else
      SML=sml
      MLLEX=ml-lex
      MLYACC=ml-yacc
      SML_HEAP_SUFFIX=x86-cygwin
      MAINFUNC=Main.main
    fi
    SMLCM=sml-cm.bat
    ;;
  *mingw*)
    # we don't support the combination of mingw and cygwin runtime.
    if test "x$SMLNJ_CYGWIN_RUNTIME" = "x"; then
      SML='cmd /c sml.bat'
      SMLCM='cmd /c sml-cm.bat'
      MLLEX='cmd /c ml-lex.bat'
      MLYACC='cmd /c ml-yacc.bat'
      SML_HEAP_SUFFIX=x86-win32
      MAINFUNC='(fn (p,_::ps)=> Main.main(p,ps) | (p,nil)=> Main.main(p,nil))'
    else
      echo 'cygwin runtime on mingw is not supported.' 1>&2
      exit 1
    fi
    RUNSML="sml.bat"
    EXEC='cmd /c \"\$$SML @SMLload=\$$HEAPNAME \$$*\"'
    ;;
  *)
    SML=sml
    SMLCM=sml-cm
    MLLEX=ml-lex
    MLYACC=ml-yacc
    SML_HEAP_SUFFIX='*'
    MAINFUNC=Main.main
    ;;
  esac

  echo 'checking for new CM... '
  if echo 'CM.make;' | $SML | grep 'string ->' > /dev/null; then
    echo 'new CM detected.'
    CM_MAKE_ARG='\"sources.cm\"'
    SMLCM="$SML"
  else
    echo 'old CM detected.'
    CM_MAKE_ARG='()'
  fi

  test "x$RUNSML" = "x" && RUNSML="$SML"
  test "x$EXEC" = "x" && EXEC='exec \"\$$SML\" @SMLload=\"\$$HEAPNAME\" \"\$$@\"'

  MKSMLHEAP='$(SHELL) -c '"'"'set -x;echo "CM.make '"$CM_MAKE_ARG"';SMLofNJ.exportFn(\"$$0\",'"$MAINFUNC"');"|$(SMLCM)'"'"

  MKSMLRUN='$(SHELL) -c '"'"'{ set -x;q="'"'\\''"'";echo "\#!/bin/sh"|sed "s/\\\\//";echo "SML=$${q}'"$RUNSML"'$${q}";echo "HEAPNAME=$${q}$$1/$$0$${q}";echo "'"$EXEC"'"; } > "$$2" && chmod +x "$$2"'"'"
  ;;

*)
  echo "*** BUG ***" 1>&2
  exit 127
esac

###############################################################################

echo "creating commonrule"
cat > commonrule <<EOF
# This file is automatically generated by configure script.
host_os = $host_os
prefix = $prefix
exec_prefix = $exec_prefix
bindir = \$(exec_prefix)/bin
libdir = \$(prefix)/lib
libdir_$appname = \$(libdir)/$appname
heapdir = \$(libdir_${appname})/heap
#DESTDIR =
EXEEXT = $EXEEXT
SMLFORMATDIR = $SMLFORMATDIR
SMLUNITDIR = $SMLUNITDIR
EGREP = egrep
INSTALL = install
INSTALL_PROGRAM = \$(INSTALL)
INSTALL_DATA = \$(INSTALL)
MLYACC = $MLYACC
MLLEX = $MLLEX
MLTON = mlton
SML = $SML
SMLCM = $SMLCM
SML_HEAP_SUFFIX = $SML_HEAP_SUFFIX
MKSMLRUN = $MKSMLRUN
MKSMLHEAP = $MKSMLHEAP
EOF
cat >> commonrule <<\EOF
MKSMLPATH = $(SHELL) -c 'echo "$$1" | sed s/\\\\\\\\/\\\\\\\\\\\\\\\\/g\\;s/\\"/\\\\\\\\\\"/g\\;s/\\\\\\\\/\\\\\\\\\\\\\\\\/g\\;s/\\"/\\\\\\\\\\"/g\\;s/\\\\\\$$/\\\\\\\\\\$$/g'
# commonrule ends here.
EOF

for i in \
  Makefile
do
  echo "creating $i"
  sed "
s|@${srcdirname}@|.|
s|@builddir@|$abspath|
s|@top_srcdir@|$abspath|
s|@top_builddir@|$abspath|
s|@DEFAULT_SML_COMPILER@|$compiler|
  " "$i.in" > "$i"
done

# configure ends here.

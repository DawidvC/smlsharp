functor MLLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : ML_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* Copyright 1989 by AT&T Bell Laboratories *)
open ErrorMsg Symbol Access Basics BasicTypes TypesUtil Absyn
open EnvAccess Misc CoreLang Signs Strs TyvarSet
fun fire a b c = (a(); b c)
fun markexp (e as MARKexp _, _, _) = e
  | markexp(e,a,b) = if !System.Control.markabsyn
			then MARKexp(e,a,b) else e
fun markdec((d as MARKdec _, e), _, _) = (d,e)
  | markdec((d,e),a,b) = if !System.Control.markabsyn
			then (MARKdec(d,a,b),e) else (d,e)

fun markdec' d =
  let val (d,e) = markdec d
  in ([d],e)
  end

fun markdec'' (([d],e),a,b) = markdec'((d,e),a,b)
  | markdec'' ((s,e),a,b) = markdec'((SEQdec s, e),a,b)

fun markstr(f,a,b) $ = case f $
			of s as (MARKstr _,x,y) => s
			 | s as (t,x,y) => if !System.Control.markabsyn
				  then (MARKstr(t,a,b),x,y) else s

infix \/ 
val op \/ = union_tyvars

fun V(_,vars) = vars and E(e,_) = e

fun sequence (do1,do2) (env,a2,a3,a4) =
	let val (r1,env1) = do1 (env,a2,a3,a4)
	    val (r2,env2) = do2 (Env.atop(env1,env),a2,a3,a4)
	in (r1 @ r2, Env.atop(env2,env1))
	end

fun sequence' (do1,do2) env =
	let val (r1,env1) = do1 env
	    val (r2,env2) = do2 (Env.atop(env1,env))
        in (r1 @ r2, Env.atop(env2,env1))
	end	

fun seqdec (d,e) = ([d],e)


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\002\000\000\000\000\000\
\\001\000\003\000\046\000\005\000\045\000\006\000\044\000\007\000\043\000\
\\008\000\042\000\009\000\041\000\010\000\040\000\015\000\039\000\
\\016\000\038\000\020\000\037\000\022\000\036\000\026\000\035\000\
\\027\000\034\000\028\000\033\000\030\000\032\000\031\000\031\000\
\\034\000\030\000\035\000\029\000\036\000\028\000\037\000\027\000\
\\038\000\026\000\040\000\025\000\041\000\024\000\042\000\023\000\
\\044\000\022\000\048\000\021\000\050\000\020\000\052\000\019\000\
\\053\000\018\000\054\000\017\000\058\000\016\000\061\000\015\000\
\\062\000\014\000\063\000\013\000\069\000\012\000\000\000\
\\001\000\003\000\046\000\005\000\045\000\006\000\044\000\007\000\043\000\
\\008\000\042\000\015\000\039\000\020\000\037\000\026\000\035\000\
\\030\000\032\000\031\000\031\000\036\000\028\000\040\000\025\000\
\\044\000\022\000\054\000\017\000\058\000\016\000\061\000\015\000\
\\062\000\014\000\063\000\013\000\000\000\
\\001\000\003\000\046\000\005\000\045\000\006\000\044\000\007\000\043\000\
\\008\000\042\000\015\000\039\000\020\000\037\000\026\000\035\000\
\\030\000\032\000\031\000\031\000\036\000\028\000\040\000\025\000\
\\044\000\022\000\054\000\017\000\058\000\016\000\061\000\015\000\
\\062\000\014\000\063\000\013\000\065\000\065\000\000\000\
\\001\000\003\000\046\000\005\000\045\000\006\000\044\000\007\000\043\000\
\\008\000\042\000\015\000\039\000\020\000\037\000\026\000\035\000\
\\030\000\032\000\031\000\031\000\036\000\028\000\040\000\025\000\
\\044\000\022\000\054\000\017\000\058\000\016\000\061\000\015\000\
\\062\000\014\000\063\000\013\000\066\000\062\000\000\000\
\\001\000\003\000\050\000\020\000\037\000\058\000\016\000\000\000\
\\001\000\003\000\073\000\005\000\072\000\058\000\071\000\000\000\
\\001\000\003\000\073\000\005\000\072\000\058\000\071\000\064\000\070\000\000\000\
\\001\000\003\000\073\000\005\000\072\000\058\000\071\000\064\000\236\000\000\000\
\\001\000\003\000\073\000\040\000\183\000\058\000\071\000\000\000\
\\001\000\003\000\092\000\005\000\045\000\006\000\044\000\007\000\091\000\
\\008\000\090\000\040\000\089\000\045\000\088\000\055\000\087\000\
\\058\000\071\000\061\000\086\000\062\000\085\000\063\000\084\000\000\000\
\\001\000\003\000\092\000\005\000\045\000\006\000\044\000\007\000\091\000\
\\008\000\090\000\040\000\089\000\055\000\087\000\058\000\071\000\
\\061\000\086\000\062\000\085\000\063\000\084\000\000\000\
\\001\000\003\000\092\000\005\000\045\000\006\000\044\000\007\000\091\000\
\\008\000\090\000\040\000\089\000\055\000\087\000\058\000\071\000\
\\061\000\086\000\062\000\085\000\063\000\084\000\065\000\173\000\000\000\
\\001\000\003\000\092\000\005\000\045\000\006\000\044\000\007\000\091\000\
\\008\000\090\000\040\000\089\000\055\000\087\000\058\000\071\000\
\\061\000\086\000\062\000\085\000\063\000\084\000\066\000\170\000\000\000\
\\001\000\003\000\092\000\005\000\045\000\006\000\044\000\007\000\091\000\
\\008\000\090\000\040\000\089\000\055\000\087\000\058\000\071\000\
\\061\000\086\000\062\000\085\000\063\000\127\000\000\000\
\\001\000\003\000\106\000\020\000\037\000\052\000\106\001\058\000\016\000\000\000\
\\001\000\003\000\106\000\020\000\037\000\058\000\016\000\000\000\
\\001\000\003\000\150\000\000\000\
\\001\000\003\000\150\000\004\000\149\000\061\000\148\000\063\000\147\000\000\000\
\\001\000\003\000\179\000\005\000\072\000\017\000\178\000\058\000\071\000\000\000\
\\001\000\003\000\179\000\005\000\072\000\017\000\178\000\058\000\071\000\
\\064\000\177\000\000\000\
\\001\000\003\000\186\000\000\000\
\\001\000\003\000\017\001\047\000\016\001\000\000\
\\001\000\003\000\086\001\020\000\037\000\036\000\085\001\049\000\084\001\
\\058\000\016\000\000\000\
\\001\000\003\000\149\001\000\000\
\\001\000\004\000\189\000\000\000\
\\001\000\008\000\058\000\000\000\
\\001\000\011\000\187\000\056\000\125\001\000\000\
\\001\000\011\000\222\000\056\000\226\000\057\000\225\000\000\000\
\\001\000\012\000\228\000\013\000\088\001\000\000\
\\001\000\012\000\228\000\060\000\066\001\066\000\065\001\000\000\
\\001\000\013\000\168\000\020\000\167\000\000\000\
\\001\000\013\000\168\000\025\000\217\000\000\000\
\\001\000\013\000\168\000\060\000\253\000\000\000\
\\001\000\013\000\168\000\060\000\253\000\066\000\252\000\000\000\
\\001\000\013\000\004\001\020\000\200\001\059\000\003\001\060\000\039\002\
\\064\000\039\002\000\000\
\\001\000\018\000\093\001\029\000\056\000\059\000\055\000\067\000\054\000\
\\068\000\053\000\000\000\
\\001\000\019\000\089\001\000\000\
\\001\000\019\000\091\001\000\000\
\\001\000\019\000\126\001\000\000\
\\001\000\019\000\138\001\000\000\
\\001\000\019\000\142\001\000\000\
\\001\000\019\000\143\001\000\000\
\\001\000\019\000\166\001\000\000\
\\001\000\019\000\187\001\000\000\
\\001\000\019\000\194\001\000\000\
\\001\000\019\000\196\001\000\000\
\\001\000\020\000\161\000\000\000\
\\001\000\020\000\194\000\000\000\
\\001\000\020\000\002\001\000\000\
\\001\000\020\000\009\001\000\000\
\\001\000\020\000\014\001\000\000\
\\001\000\020\000\045\001\000\000\
\\001\000\020\000\057\001\000\000\
\\001\000\020\000\079\001\000\000\
\\001\000\020\000\153\001\000\000\
\\001\000\020\000\173\001\000\000\
\\001\000\023\000\162\000\029\000\056\000\059\000\055\000\067\000\054\000\
\\068\000\053\000\000\000\
\\001\000\026\000\134\001\000\000\
\\001\000\029\000\056\000\039\000\224\000\059\000\055\000\067\000\054\000\
\\068\000\053\000\000\000\
\\001\000\029\000\056\000\051\000\206\000\059\000\055\000\067\000\054\000\
\\068\000\053\000\000\000\
\\001\000\032\000\199\000\000\000\
\\001\000\032\000\202\000\000\000\
\\001\000\032\000\023\001\000\000\
\\001\000\032\000\025\001\000\000\
\\001\000\032\000\156\001\000\000\
\\001\000\032\000\167\001\000\000\
\\001\000\059\000\195\000\000\000\
\\001\000\059\000\069\001\000\000\
\\001\000\059\000\115\001\000\000\
\\001\000\059\000\151\001\000\000\
\\001\000\059\000\175\001\000\000\
\\001\000\063\000\208\000\000\000\
\\001\000\064\000\159\000\000\000\
\\001\000\064\000\000\001\000\000\
\\001\000\064\000\067\001\000\000\
\\001\000\065\000\157\000\000\000\
\\001\000\065\000\254\000\000\000\
\\001\000\066\000\153\000\000\000\
\\001\000\066\000\156\000\000\000\
\\001\000\066\000\011\001\000\000\
\\001\000\066\000\064\001\000\000\
\\001\000\066\000\094\001\000\000\
\\001\000\066\000\132\001\000\000\
\\001\000\066\000\189\001\000\000\
\\001\000\066\000\190\001\000\000\
\\198\001\000\000\
\\199\001\000\000\
\\200\001\000\000\
\\200\001\024\000\185\000\000\000\
\\201\001\000\000\
\\202\001\000\000\
\\202\001\024\000\139\000\000\000\
\\202\001\024\000\197\000\000\000\
\\202\001\024\000\197\000\063\000\137\001\000\000\
\\203\001\000\000\
\\204\001\000\000\
\\205\001\000\000\
\\206\001\040\000\133\000\000\000\
\\207\001\000\000\
\\208\001\000\000\
\\209\001\000\000\
\\210\001\000\000\
\\211\001\000\000\
\\212\001\000\000\
\\213\001\000\000\
\\214\001\024\000\237\000\000\000\
\\215\001\012\000\228\000\000\000\
\\216\001\000\000\
\\217\001\060\000\068\001\000\000\
\\218\001\000\000\
\\219\001\000\000\
\\220\001\000\000\
\\221\001\000\000\
\\222\001\000\000\
\\223\001\000\000\
\\224\001\000\000\
\\225\001\000\000\
\\226\001\003\000\150\000\058\000\230\000\000\000\
\\227\001\000\000\
\\228\001\012\000\228\000\000\000\
\\229\001\003\000\150\000\058\000\230\000\000\000\
\\230\001\012\000\228\000\060\000\066\001\000\000\
\\231\001\000\000\
\\232\001\014\000\218\000\000\000\
\\233\001\000\000\
\\234\001\029\000\056\000\059\000\055\000\067\000\054\000\068\000\053\000\000\000\
\\235\001\029\000\056\000\059\000\055\000\067\000\054\000\068\000\053\000\000\000\
\\236\001\000\000\
\\237\001\060\000\160\000\000\000\
\\238\001\002\000\155\000\029\000\056\000\059\000\055\000\060\000\154\000\
\\067\000\054\000\068\000\053\000\000\000\
\\238\001\002\000\155\000\029\000\056\000\059\000\055\000\067\000\054\000\
\\068\000\053\000\000\000\
\\239\001\000\000\
\\240\001\000\000\
\\241\001\059\000\055\000\068\000\053\000\000\000\
\\242\001\059\000\055\000\000\000\
\\243\001\012\000\228\000\000\000\
\\244\001\003\000\046\000\005\000\045\000\006\000\044\000\007\000\043\000\
\\008\000\042\000\020\000\037\000\030\000\032\000\036\000\028\000\
\\040\000\025\000\058\000\016\000\061\000\015\000\062\000\014\000\
\\063\000\013\000\000\000\
\\245\001\000\000\
\\246\001\000\000\
\\247\001\029\000\056\000\059\000\055\000\067\000\054\000\068\000\053\000\000\000\
\\248\001\029\000\056\000\059\000\055\000\067\000\054\000\068\000\053\000\000\000\
\\249\001\029\000\056\000\059\000\055\000\067\000\054\000\068\000\053\000\000\000\
\\250\001\000\000\
\\251\001\000\000\
\\252\001\000\000\
\\253\001\000\000\
\\254\001\000\000\
\\255\001\000\000\
\\000\002\000\000\
\\001\002\000\000\
\\002\002\000\000\
\\003\002\000\000\
\\004\002\000\000\
\\005\002\000\000\
\\006\002\000\000\
\\007\002\000\000\
\\008\002\000\000\
\\009\002\000\000\
\\010\002\000\000\
\\011\002\000\000\
\\012\002\000\000\
\\013\002\029\000\056\000\059\000\055\000\060\000\154\000\067\000\054\000\
\\068\000\053\000\000\000\
\\014\002\029\000\056\000\059\000\055\000\060\000\158\000\067\000\054\000\
\\068\000\053\000\000\000\
\\015\002\000\000\
\\016\002\000\000\
\\016\002\066\000\049\001\000\000\
\\017\002\059\000\247\000\000\000\
\\017\002\059\000\247\000\066\000\118\001\000\000\
\\018\002\013\000\168\000\000\000\
\\019\002\059\000\166\000\000\000\
\\020\002\012\000\228\000\000\000\
\\021\002\012\000\228\000\000\000\
\\022\002\000\000\
\\023\002\000\000\
\\024\002\000\000\
\\025\002\000\000\
\\026\002\000\000\
\\027\002\000\000\
\\028\002\000\000\
\\029\002\000\000\
\\030\002\000\000\
\\031\002\000\000\
\\032\002\000\000\
\\033\002\000\000\
\\034\002\000\000\
\\035\002\000\000\
\\036\002\000\000\
\\037\002\000\000\
\\038\002\013\000\168\000\000\000\
\\040\002\013\000\168\000\000\000\
\\041\002\012\000\228\000\013\000\133\001\000\000\
\\042\002\013\000\168\000\000\000\
\\043\002\000\000\
\\044\002\060\000\001\001\000\000\
\\045\002\000\000\
\\046\002\013\000\168\000\060\000\255\000\000\000\
\\047\002\000\000\
\\048\002\011\000\163\000\000\000\
\\049\002\029\000\056\000\059\000\055\000\067\000\054\000\068\000\053\000\000\000\
\\050\002\059\000\211\000\000\000\
\\051\002\012\000\228\000\000\000\
\\052\002\000\000\
\\053\002\011\000\005\001\000\000\
\\054\002\014\000\209\000\000\000\
\\055\002\000\000\
\\056\002\011\000\212\000\000\000\
\\057\002\000\000\
\\058\002\000\000\
\\059\002\000\000\
\\060\002\000\000\
\\061\002\003\000\092\000\005\000\045\000\006\000\044\000\007\000\091\000\
\\008\000\090\000\040\000\089\000\055\000\087\000\058\000\071\000\
\\061\000\086\000\062\000\085\000\063\000\084\000\000\000\
\\062\002\000\000\
\\063\002\029\000\056\000\059\000\055\000\067\000\054\000\068\000\053\000\000\000\
\\064\002\012\000\228\000\000\000\
\\065\002\011\000\187\000\000\000\
\\066\002\000\000\
\\067\002\000\000\
\\068\002\004\000\096\000\063\000\095\000\000\000\
\\069\002\060\000\012\001\000\000\
\\070\002\000\000\
\\071\002\011\000\222\000\000\000\
\\072\002\000\000\
\\073\002\014\000\161\001\000\000\
\\074\002\000\000\
\\075\002\039\000\186\001\000\000\
\\076\002\012\000\228\000\000\000\
\\077\002\020\000\054\001\039\000\053\001\000\000\
\\078\002\012\000\228\000\000\000\
\\079\002\000\000\
\\080\002\011\000\219\000\000\000\
\\081\002\003\000\106\000\020\000\037\000\058\000\016\000\000\000\
\\082\002\000\000\
\\083\002\003\000\106\000\020\000\037\000\058\000\016\000\000\000\
\\084\002\000\000\
\\085\002\005\000\045\000\006\000\044\000\000\000\
\\086\002\000\000\
\\087\002\005\000\045\000\006\000\044\000\000\000\
\\088\002\000\000\
\\089\002\000\000\
\\090\002\011\000\163\000\000\000\
\\091\002\011\000\005\001\000\000\
\\092\002\000\000\
\\093\002\011\000\187\000\000\000\
\\094\002\011\000\222\000\057\000\221\000\000\000\
\\095\002\011\000\187\000\000\000\
\\096\002\000\000\
\\097\002\000\000\
\\098\002\011\000\219\000\000\000\
\\099\002\000\000\
\\100\002\000\000\
\\101\002\000\000\
\\102\002\011\000\170\001\029\000\056\000\059\000\055\000\067\000\054\000\
\\068\000\053\000\000\000\
\\103\002\000\000\
\\104\002\002\000\115\000\010\000\040\000\016\000\038\000\022\000\036\000\
\\027\000\034\000\034\000\030\000\035\000\029\000\037\000\114\000\
\\038\000\026\000\041\000\024\000\042\000\023\000\052\000\019\000\
\\053\000\018\000\000\000\
\\105\002\000\000\
\\106\002\000\000\
\\107\002\000\000\
\\108\002\003\000\050\000\020\000\037\000\058\000\016\000\000\000\
\\109\002\000\000\
\\110\002\002\000\043\001\003\000\042\001\016\000\041\001\021\000\040\001\
\\022\000\039\001\033\000\038\001\034\000\030\000\035\000\029\000\
\\037\000\037\001\038\000\026\000\041\000\036\001\046\000\035\001\
\\050\000\034\001\052\000\033\001\053\000\032\001\000\000\
\\110\002\002\000\043\001\016\000\041\001\021\000\040\001\022\000\039\001\
\\033\000\038\001\034\000\030\000\035\000\029\000\037\000\037\001\
\\038\000\026\000\041\000\036\001\046\000\035\001\050\000\034\001\
\\052\000\033\001\053\000\032\001\000\000\
\\111\002\000\000\
\\112\002\000\000\
\\113\002\011\000\150\001\000\000\
\\114\002\011\000\222\000\000\000\
\\115\002\011\000\148\001\000\000\
\\116\002\011\000\148\001\000\000\
\\117\002\011\000\146\001\000\000\
\\118\002\011\000\157\001\000\000\
\\119\002\000\000\
\\120\002\011\000\152\001\000\000\
\\121\002\000\000\
\\122\002\000\000\
\\123\002\000\000\
\\124\002\011\000\150\001\000\000\
\\125\002\000\000\
\\126\002\011\000\148\001\000\000\
\\127\002\000\000\
\\128\002\011\000\146\001\000\000\
\\129\002\012\000\228\000\000\000\
\\130\002\011\000\157\001\000\000\
\\131\002\039\000\158\001\000\000\
\\132\002\012\000\228\000\000\000\
\\133\002\011\000\152\001\000\000\
\\134\002\000\000\
\\135\002\000\000\
\\136\002\020\000\153\001\000\000\
\\137\002\000\000\
\\138\002\000\000\
\\139\002\000\000\
\\140\002\059\000\192\000\000\000\
\\141\002\000\000\
\\142\002\011\000\193\000\000\000\
\\143\002\000\000\
\\144\002\000\000\
\\145\002\000\000\
\\146\002\000\000\
\\147\002\000\000\
\\148\002\000\000\
\\149\002\000\000\
\\150\002\000\000\
\\151\002\000\000\
\\152\002\002\000\111\000\003\000\086\001\009\000\041\000\010\000\040\000\
\\016\000\038\000\020\000\037\000\022\000\036\000\027\000\034\000\
\\028\000\033\000\034\000\030\000\035\000\029\000\036\000\085\001\
\\037\000\110\000\038\000\026\000\041\000\024\000\042\000\023\000\
\\048\000\021\000\049\000\084\001\050\000\020\000\052\000\019\000\
\\053\000\018\000\058\000\016\000\000\000\
\\152\002\002\000\111\000\009\000\041\000\010\000\040\000\016\000\038\000\
\\022\000\036\000\027\000\034\000\028\000\033\000\034\000\030\000\
\\035\000\029\000\037\000\110\000\038\000\026\000\041\000\024\000\
\\042\000\023\000\048\000\021\000\050\000\020\000\052\000\019\000\
\\053\000\018\000\000\000\
\\153\002\000\000\
\\154\002\000\000\
\\155\002\009\000\041\000\010\000\040\000\016\000\038\000\022\000\036\000\
\\027\000\034\000\028\000\033\000\034\000\030\000\035\000\029\000\
\\037\000\027\000\038\000\026\000\041\000\024\000\042\000\023\000\
\\048\000\021\000\050\000\020\000\052\000\019\000\053\000\018\000\000\000\
\\156\002\009\000\041\000\010\000\040\000\016\000\038\000\022\000\036\000\
\\027\000\034\000\028\000\033\000\034\000\030\000\035\000\029\000\
\\037\000\027\000\038\000\026\000\041\000\024\000\042\000\023\000\
\\048\000\021\000\050\000\020\000\052\000\019\000\053\000\018\000\000\000\
\\157\002\011\000\190\000\000\000\
\\158\002\011\000\190\000\000\000\
\\159\002\011\000\193\000\000\000\
\\160\002\011\000\207\000\000\000\
\\161\002\000\000\
\\162\002\000\000\
\\163\002\011\000\190\000\000\000\
\\164\002\000\000\
\\165\002\000\000\
\\166\002\000\000\
\\167\002\011\000\207\000\000\000\
\\168\002\008\000\058\000\000\000\
\\169\002\000\000\
\\170\002\000\000\
\\171\002\000\000\
\\172\002\029\000\056\000\059\000\055\000\067\000\054\000\068\000\053\000\000\000\
\"
val actionRowNumbers =
"\001\000\052\001\066\001\057\001\
\\005\000\143\000\137\000\068\001\
\\149\000\144\000\026\000\004\000\
\\003\000\007\000\095\000\002\000\
\\010\000\218\000\005\000\005\000\
\\002\000\005\000\016\000\005\000\
\\239\000\048\001\254\000\237\000\
\\235\000\002\000\006\000\005\000\
\\014\000\011\000\098\000\096\000\
\\218\000\002\000\218\000\005\000\
\\151\000\150\000\087\000\086\000\
\\092\000\049\001\250\000\002\001\
\\091\000\145\000\146\000\002\000\
\\002\000\018\000\011\000\067\001\
\\064\001\078\000\130\000\079\000\
\\155\000\076\000\163\000\159\000\
\\073\000\129\000\047\000\103\000\
\\154\000\090\000\104\000\088\000\
\\057\000\240\000\175\000\173\000\
\\211\000\170\000\165\000\031\000\
\\181\000\176\000\013\000\012\000\
\\020\000\184\000\009\000\005\000\
\\183\000\182\000\089\000\021\000\
\\243\000\025\000\216\000\053\001\
\\035\001\055\001\048\000\142\000\
\\067\000\249\000\233\000\102\000\
\\093\000\147\000\048\001\061\000\
\\048\001\048\001\062\000\254\000\
\\254\000\254\000\238\000\236\000\
\\060\000\152\000\056\001\072\000\
\\204\000\200\000\242\000\206\000\
\\211\000\013\000\032\000\124\000\
\\138\000\248\000\005\000\097\000\
\\244\000\005\000\059\000\028\000\
\\054\001\016\000\003\001\135\000\
\\134\000\136\000\119\000\121\000\
\\116\000\018\000\008\000\110\000\
\\106\000\133\000\065\001\157\000\
\\002\000\002\000\156\000\158\000\
\\002\000\153\000\006\000\002\000\
\\002\000\011\000\167\000\211\000\
\\018\000\002\000\011\000\034\000\
\\177\000\077\000\196\000\185\000\
\\074\000\194\000\049\000\187\000\
\\195\000\035\000\241\000\200\000\
\\099\000\005\000\179\000\016\000\
\\050\000\218\000\080\000\219\000\
\\005\000\051\000\022\000\005\000\
\\022\000\018\000\234\000\016\000\
\\044\001\048\001\063\000\045\001\
\\002\000\255\000\064\000\000\001\
\\002\000\005\000\004\001\014\000\
\\052\000\018\000\014\000\210\000\
\\211\000\166\000\033\000\002\000\
\\011\000\098\000\227\000\218\000\
\\218\000\053\000\011\000\218\000\
\\254\000\148\000\018\000\115\000\
\\018\000\081\000\030\000\075\000\
\\109\000\068\000\112\000\017\000\
\\161\000\162\000\131\000\132\000\
\\164\000\128\000\127\000\140\000\
\\198\000\018\000\212\000\172\000\
\\199\000\169\000\174\000\011\000\
\\186\000\011\000\188\000\019\000\
\\011\000\018\000\011\000\009\000\
\\054\000\100\000\180\000\018\000\
\\215\000\217\000\025\000\059\001\
\\023\000\036\001\005\001\033\001\
\\037\001\038\001\029\000\101\000\
\\037\000\048\001\038\000\254\000\
\\036\000\063\001\082\000\005\001\
\\061\001\005\000\098\000\218\000\
\\005\000\015\000\016\000\005\001\
\\005\000\005\000\218\000\218\000\
\\069\000\005\001\205\000\002\000\
\\201\000\207\000\168\000\211\000\
\\126\000\125\000\230\000\018\000\
\\016\000\245\000\221\000\098\000\
\\139\000\027\000\039\000\120\000\
\\117\000\118\000\017\000\114\000\
\\018\000\111\000\006\000\018\000\
\\105\000\171\000\083\000\197\000\
\\193\000\189\000\191\000\190\000\
\\203\000\058\000\214\000\220\000\
\\058\001\039\001\048\001\048\001\
\\094\000\040\000\002\000\051\001\
\\041\000\160\000\042\000\002\000\
\\035\001\006\001\014\001\012\001\
\\005\000\010\001\024\000\008\001\
\\070\000\030\001\015\001\055\000\
\\016\000\016\001\231\000\065\000\
\\018\001\013\001\026\001\011\001\
\\009\001\022\000\007\001\213\000\
\\211\000\209\000\228\000\229\000\
\\223\000\222\000\005\000\254\000\
\\246\000\113\000\123\000\122\000\
\\108\000\107\000\178\000\011\000\
\\011\000\043\000\066\000\047\001\
\\034\001\251\000\252\000\050\001\
\\048\001\254\000\141\000\056\000\
\\098\000\071\000\218\000\022\001\
\\005\000\022\000\015\000\016\000\
\\029\001\232\000\005\001\005\000\
\\018\000\060\001\208\000\098\000\
\\225\000\044\000\192\000\202\000\
\\040\001\023\000\084\000\085\000\
\\002\000\046\001\001\001\023\000\
\\023\001\018\000\021\001\019\001\
\\020\001\028\001\032\001\031\001\
\\045\000\025\001\027\001\224\000\
\\018\000\247\000\046\000\041\001\
\\042\001\253\000\062\001\024\001\
\\017\001\226\000\043\001\000\000"
val gotoT =
"\
\\001\000\009\000\003\000\008\000\021\000\007\000\022\000\006\000\
\\023\000\005\000\052\000\004\000\053\000\003\000\070\000\002\000\
\\071\000\001\000\076\000\195\001\000\000\
\\052\000\004\000\053\000\003\000\070\000\045\000\071\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\047\000\056\000\046\000\000\000\
\\000\000\
\\001\000\050\000\003\000\008\000\023\000\049\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\075\000\055\000\000\000\
\\001\000\009\000\003\000\008\000\020\000\059\000\021\000\058\000\
\\022\000\006\000\023\000\005\000\025\000\057\000\000\000\
\\001\000\009\000\003\000\008\000\021\000\062\000\022\000\006\000\
\\023\000\005\000\024\000\061\000\000\000\
\\002\000\067\000\008\000\066\000\018\000\065\000\019\000\064\000\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\072\000\022\000\006\000\
\\023\000\005\000\000\000\
\\002\000\081\000\003\000\080\000\026\000\079\000\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\
\\036\000\073\000\000\000\
\\044\000\092\000\045\000\091\000\000\000\
\\001\000\096\000\072\000\095\000\000\000\
\\001\000\098\000\067\000\097\000\000\000\
\\001\000\009\000\003\000\008\000\021\000\099\000\022\000\006\000\
\\023\000\005\000\000\000\
\\001\000\100\000\000\000\
\\001\000\103\000\006\000\102\000\051\000\101\000\000\000\
\\001\000\105\000\000\000\
\\000\000\
\\052\000\004\000\053\000\003\000\069\000\107\000\071\000\106\000\000\000\
\\052\000\004\000\053\000\111\000\055\000\110\000\000\000\
\\003\000\114\000\000\000\
\\003\000\115\000\000\000\
\\001\000\009\000\003\000\008\000\021\000\116\000\022\000\006\000\
\\023\000\005\000\000\000\
\\002\000\067\000\008\000\117\000\000\000\
\\001\000\119\000\074\000\118\000\000\000\
\\002\000\081\000\003\000\080\000\030\000\124\000\031\000\074\000\
\\039\000\123\000\040\000\122\000\042\000\121\000\043\000\120\000\000\000\
\\002\000\081\000\003\000\080\000\016\000\128\000\017\000\127\000\
\\026\000\126\000\027\000\078\000\028\000\077\000\029\000\076\000\
\\030\000\075\000\031\000\074\000\000\000\
\\004\000\130\000\050\000\129\000\000\000\
\\000\000\
\\045\000\133\000\047\000\132\000\000\000\
\\001\000\009\000\003\000\008\000\021\000\134\000\022\000\006\000\
\\023\000\005\000\000\000\
\\045\000\133\000\047\000\135\000\000\000\
\\001\000\096\000\072\000\136\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\047\000\056\000\138\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\139\000\022\000\006\000\
\\023\000\005\000\000\000\
\\001\000\009\000\003\000\008\000\021\000\140\000\022\000\006\000\
\\023\000\005\000\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\141\000\000\000\
\\002\000\081\000\003\000\080\000\016\000\149\000\017\000\127\000\
\\026\000\126\000\027\000\078\000\028\000\077\000\029\000\076\000\
\\030\000\075\000\031\000\074\000\000\000\
\\000\000\
\\075\000\150\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\029\000\163\000\030\000\075\000\
\\031\000\074\000\041\000\162\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\026\000\167\000\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\000\000\
\\002\000\081\000\003\000\080\000\026\000\170\000\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\
\\035\000\169\000\000\000\
\\002\000\067\000\008\000\174\000\032\000\173\000\033\000\172\000\000\000\
\\000\000\
\\002\000\180\000\005\000\179\000\038\000\178\000\000\000\
\\001\000\182\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\046\000\186\000\000\000\
\\000\000\
\\000\000\
\\066\000\189\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\103\000\006\000\102\000\051\000\194\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\004\000\053\000\003\000\069\000\196\000\071\000\106\000\000\000\
\\000\000\
\\052\000\004\000\053\000\003\000\069\000\198\000\071\000\106\000\000\000\
\\052\000\004\000\053\000\003\000\069\000\199\000\071\000\106\000\000\000\
\\000\000\
\\052\000\004\000\053\000\111\000\055\000\201\000\000\000\
\\052\000\004\000\053\000\111\000\055\000\202\000\000\000\
\\052\000\004\000\053\000\111\000\055\000\203\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\037\000\208\000\000\000\
\\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\029\000\163\000\030\000\075\000\
\\031\000\074\000\041\000\211\000\000\000\
\\002\000\081\000\003\000\080\000\026\000\214\000\027\000\213\000\
\\028\000\077\000\029\000\212\000\030\000\075\000\031\000\074\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\218\000\000\000\
\\000\000\
\\000\000\
\\001\000\221\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\103\000\006\000\225\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\227\000\000\000\
\\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\230\000\
\\015\000\229\000\000\000\
\\002\000\067\000\008\000\233\000\010\000\232\000\011\000\231\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\237\000\022\000\006\000\
\\023\000\005\000\025\000\236\000\000\000\
\\001\000\009\000\003\000\008\000\020\000\239\000\021\000\238\000\
\\022\000\006\000\023\000\005\000\000\000\
\\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\062\000\022\000\006\000\
\\023\000\005\000\024\000\240\000\000\000\
\\000\000\
\\002\000\067\000\008\000\066\000\018\000\065\000\019\000\241\000\000\000\
\\001\000\009\000\003\000\008\000\021\000\242\000\022\000\006\000\
\\023\000\005\000\000\000\
\\001\000\009\000\003\000\008\000\021\000\243\000\022\000\006\000\
\\023\000\005\000\000\000\
\\002\000\081\000\003\000\080\000\026\000\079\000\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\
\\036\000\244\000\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\029\000\163\000\030\000\075\000\
\\031\000\074\000\041\000\246\000\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\247\000\000\000\
\\001\000\009\000\003\000\008\000\021\000\248\000\022\000\006\000\
\\023\000\005\000\000\000\
\\002\000\081\000\003\000\080\000\026\000\249\000\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\037\000\004\001\000\000\
\\000\000\
\\001\000\005\001\000\000\
\\000\000\
\\001\000\103\000\006\000\006\001\000\000\
\\000\000\
\\044\000\008\001\045\000\091\000\000\000\
\\000\000\
\\000\000\
\\001\000\096\000\072\000\011\001\000\000\
\\000\000\
\\065\000\013\001\000\000\
\\001\000\098\000\067\000\016\001\000\000\
\\065\000\017\001\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\018\001\000\000\
\\000\000\
\\001\000\103\000\006\000\019\001\000\000\
\\000\000\
\\052\000\004\000\053\000\003\000\069\000\020\001\071\000\106\000\000\000\
\\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\020\000\022\001\021\000\238\000\
\\022\000\006\000\023\000\005\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\024\001\022\000\006\000\
\\023\000\005\000\000\000\
\\001\000\119\000\074\000\025\001\000\000\
\\052\000\029\001\057\000\028\001\058\000\027\001\073\000\026\001\000\000\
\\002\000\081\000\003\000\080\000\030\000\124\000\031\000\074\000\
\\039\000\042\001\042\000\121\000\043\000\120\000\000\000\
\\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\044\001\000\000\
\\002\000\081\000\003\000\080\000\030\000\124\000\031\000\074\000\
\\039\000\123\000\040\000\045\001\042\000\121\000\043\000\120\000\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\029\000\163\000\030\000\075\000\
\\031\000\074\000\041\000\046\001\000\000\
\\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\048\001\022\000\006\000\
\\023\000\005\000\000\000\
\\002\000\081\000\003\000\080\000\016\000\049\001\017\000\127\000\
\\026\000\126\000\027\000\078\000\028\000\077\000\029\000\076\000\
\\030\000\075\000\031\000\074\000\000\000\
\\004\000\130\000\050\000\050\001\000\000\
\\000\000\
\\044\000\053\001\045\000\091\000\000\000\
\\045\000\133\000\047\000\054\001\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\016\000\056\001\017\000\127\000\
\\026\000\126\000\027\000\078\000\028\000\077\000\029\000\076\000\
\\030\000\075\000\031\000\074\000\000\000\
\\044\000\057\001\045\000\091\000\000\000\
\\052\000\004\000\053\000\111\000\055\000\058\001\000\000\
\\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\059\001\000\000\
\\000\000\
\\009\000\144\000\012\000\061\001\013\000\060\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\068\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\069\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\026\000\170\000\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\
\\035\000\070\001\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\026\000\170\000\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\
\\035\000\071\001\000\000\
\\000\000\
\\002\000\067\000\008\000\174\000\032\000\173\000\033\000\072\001\000\000\
\\002\000\081\000\003\000\080\000\026\000\073\001\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\074\001\000\000\
\\002\000\081\000\003\000\080\000\026\000\075\001\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\000\000\
\\002\000\180\000\005\000\179\000\038\000\076\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\078\001\000\000\
\\000\000\
\\000\000\
\\046\000\079\001\000\000\
\\000\000\
\\001\000\103\000\006\000\081\001\068\000\080\001\000\000\
\\000\000\
\\052\000\029\001\057\000\085\001\058\000\027\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\004\000\053\000\003\000\069\000\088\001\071\000\106\000\000\000\
\\000\000\
\\052\000\004\000\053\000\111\000\055\000\090\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\029\001\057\000\093\001\058\000\027\001\000\000\
\\000\000\
\\001\000\047\000\056\000\094\001\000\000\
\\004\000\096\001\061\000\095\001\000\000\
\\045\000\098\001\060\000\097\001\000\000\
\\001\000\100\001\059\000\099\001\000\000\
\\001\000\103\000\006\000\103\001\063\000\102\001\064\000\101\001\000\000\
\\001\000\103\000\006\000\106\001\007\000\105\001\000\000\
\\052\000\029\001\057\000\107\001\058\000\027\001\000\000\
\\001\000\108\001\000\000\
\\001\000\110\001\062\000\109\001\000\000\
\\045\000\098\001\060\000\111\001\000\000\
\\045\000\133\000\047\000\112\001\000\000\
\\000\000\
\\052\000\029\001\057\000\114\001\058\000\027\001\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\115\001\022\000\006\000\
\\023\000\005\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\029\000\163\000\030\000\075\000\
\\031\000\074\000\041\000\117\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\118\001\000\000\
\\001\000\103\000\006\000\119\001\000\000\
\\000\000\
\\000\000\
\\004\000\122\001\048\000\121\001\049\000\120\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\227\000\000\000\
\\009\000\125\001\000\000\
\\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\127\001\
\\015\000\126\001\000\000\
\\000\000\
\\002\000\067\000\008\000\233\000\010\000\232\000\011\000\128\001\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\129\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\004\000\053\000\003\000\069\000\133\001\071\000\106\000\000\000\
\\052\000\004\000\053\000\003\000\069\000\134\001\071\000\106\000\000\000\
\\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\138\001\022\000\006\000\
\\023\000\005\000\054\000\137\001\000\000\
\\052\000\004\000\053\000\003\000\070\000\139\001\071\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\142\001\022\000\006\000\
\\023\000\005\000\000\000\
\\066\000\143\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\145\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\103\000\006\000\103\001\064\000\152\001\000\000\
\\000\000\
\\001\000\103\000\006\000\106\001\007\000\153\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\065\000\157\001\000\000\
\\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\029\000\163\000\030\000\075\000\
\\031\000\074\000\041\000\158\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\160\001\000\000\
\\052\000\004\000\053\000\111\000\055\000\161\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\081\000\003\000\080\000\026\000\162\001\027\000\078\000\
\\028\000\077\000\029\000\076\000\030\000\075\000\031\000\074\000\000\000\
\\002\000\081\000\003\000\080\000\016\000\163\001\017\000\127\000\
\\026\000\126\000\027\000\078\000\028\000\077\000\029\000\076\000\
\\030\000\075\000\031\000\074\000\000\000\
\\000\000\
\\000\000\
\\001\000\103\000\006\000\081\001\052\000\004\000\053\000\003\000\
\\068\000\167\001\069\000\166\001\071\000\106\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\004\000\053\000\003\000\069\000\169\001\071\000\106\000\000\000\
\\052\000\004\000\053\000\111\000\055\000\170\001\000\000\
\\000\000\
\\000\000\
\\004\000\096\001\061\000\172\001\000\000\
\\000\000\
\\045\000\098\001\060\000\174\001\000\000\
\\000\000\
\\001\000\100\001\059\000\175\001\000\000\
\\065\000\176\001\000\000\
\\001\000\103\000\006\000\103\001\063\000\177\001\064\000\101\001\000\000\
\\001\000\103\000\006\000\179\001\064\000\178\001\000\000\
\\000\000\
\\000\000\
\\052\000\029\001\057\000\180\001\058\000\027\001\000\000\
\\001\000\110\001\062\000\181\001\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\182\001\000\000\
\\000\000\
\\000\000\
\\004\000\122\001\048\000\183\001\049\000\120\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\103\000\006\000\081\001\068\000\186\001\000\000\
\\000\000\
\\000\000\
\\001\000\009\000\003\000\008\000\021\000\138\001\022\000\006\000\
\\023\000\005\000\054\000\189\001\000\000\
\\000\000\
\\000\000\
\\001\000\103\000\006\000\081\001\068\000\190\001\000\000\
\\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\191\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\144\000\012\000\143\000\013\000\142\000\014\000\193\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 452
val numrules = 231
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = pos*pos -> ErrorMsg.severity -> string -> unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit | STRING of  (string)
 | REAL of  (string) | INT0 of  (int) | INT of  (int)
 | TYVAR of  (string) | ID of  (string)
 | interdec of  (dec withenv enved) | importdec of  (string list)
 | fctb of  ( ( symbol * functorVar * fctb )  list enved)
 | fparam of  (functorFormal)
 | strb of  (bool ->  ( symbol*structureVar*strb )  list epathstamped)
 | sdec of  (dec withenv epathnstamped)
 | sdecs' of  (dec list withenv epathnstamped)
 | sdecs of  (dec list withenv epathnstamped) | str of  (strtype)
 | sigb of  (signatureVar list withenv enved)
 | sigconstraint_op of  ( ( Basics.env * Structure )  -> Structure option)
 | sign of  (bool*bool*Structure -> signtype)
 | patheqn of  ( ( string->symbol )  -> symbol list list)
 | sharespec of  (spectype) | exnspec of  (spectype)
 | valspec of  (spectype) | tyspec of  (eqprop -> spectype)
 | strspec of  (spectype) | spec of  (spectype)
 | spec_s of  (spectype) | ops of  (symbol list)
 | ldecs of  (dec withenv epathvstamped uvars)
 | exp_pa of  (exp list evstamped)
 | ldec of  (dec withenv epathvstamped uvars) | fixity of  (fixity)
 | qid_p of  (structureVar list enved)
 | eb of  (eb list withenv epathvstamped uvars)
 | constr of  ( ( Basics.env * ty -> symbol * bool * ty )  uvars)
 | constrs of  ( ( Basics.env * ty  -> (symbol * bool * ty) list )  uvars)
 | db of  ( ( symbol * int * datacon list withenv epathed )  list)
 | tyvar_pc of  (tyvar list) | tyvars of  (tyvar list)
 | tb of  (bool -> tb list withenv epathvstamped)
 | clause of  (rawclause enved uvars)
 | clause' of  ( ( symbol * pat list )  enved uvars)
 | apats of  ( ( pat * fixity * complainer )  list enved uvars)
 | fb of  (rawclause list list enved uvars)
 | fb' of  (rawclause list enved uvars) | rvb of  (rawrvb list enved)
 | constraint of  (ty option enved uvars) | vb of  (vb list evstamped)
 | pat_list of  (pat list enved uvars)
 | pat_2c of  (pat list enved uvars)
 | plabels of  ( ( (symbol * pat) list * bool )  enved uvars)
 | plabel of  ( ( symbol * pat )  enved uvars)
 | apat'' of  (pat enved uvars)
 | apat' of  ( ( pat * fixity * complainer )  enved uvars)
 | apat of  ( ( pat * fixity * complainer )  enved uvars)
 | pat'' of  (pat enved uvars) | pat' of  (pat enved uvars)
 | pat of  (pat enved uvars) | exp_2c of  (exp list evstamped uvars)
 | exp_list of  (exp list evstamped uvars)
 | aexp of  (exp evstamped uvars)
 | app_exp of  (exp precStack evstamped uvars)
 | exp of  (exp evstamped uvars)
 | exp_ps of  (exp list evstamped uvars)
 | elabels of  ( ( symbol * exp )  list evstamped uvars)
 | elabel of  ( ( symbol * exp )  evstamped uvars)
 | rule of  (rule evstamped uvars)
 | match of  (rule list evstamped uvars)
 | ty0_pc of  (ty list enved uvars) | ty of  (ty enved uvars)
 | tuple_ty of  (ty list enved uvars) | ty' of  (ty enved uvars)
 | tlabels of  ( ( symbol * ty )  list enved uvars)
 | tlabel of  ( ( symbol * ty )  enved uvars)
 | tycon of  (symbol list) | selector of  (symbol)
 | qid_p0 of  (symbol list list)
 | qid of  ( ( (string->symbol) -> symbol list ) )
 | opid of  (symbol enved) | op_op of  (unit susp) | int of  (int)
 | id of  (string) | ident of  (string)
end
type svalue = MlyValue.svalue
type result = dec withenv enved
end
structure EC=
struct
open LrTable
val is_keyword =
fn (T 8) => true | (T 9) => true | (T 10) => true | (T 12) => true | 
(T 14) => true | (T 15) => true | (T 16) => true | (T 17) => true | 
(T 18) => true | (T 20) => true | (T 21) => true | (T 22) => true | 
(T 24) => true | (T 25) => true | (T 26) => true | (T 27) => true | 
(T 28) => true | (T 30) => true | (T 31) => true | (T 32) => true | 
(T 33) => true | (T 34) => true | (T 35) => true | (T 36) => true | 
(T 37) => true | (T 38) => true | (T 39) => true | (T 40) => true | 
(T 41) => true | (T 43) => true | (T 44) => true | (T 45) => true | 
(T 46) => true | (T 47) => true | (T 48) => true | (T 49) => true | 
(T 50) => true | (T 51) => true | (T 52) => true | (T 53) => true | 
(T 55) => true | (T 56) => true | (T 66) => true | (T 67) => true | 
(T 68) => true | _ => false
val preferred_change = 
((T 24) :: nil
,(T 19) :: nil
)::
((T 19) :: nil
,(T 24) :: nil
)::
((T 10) :: nil
,(T 67) :: nil
)::
((T 58) :: nil
,(T 38) :: nil
)::
((T 1) :: nil
,(T 59) :: nil
)::
((T 59) :: nil
,(T 1) :: nil
)::
(nil
,(T 52) :: nil
)::
(nil
,(T 50) :: nil
)::
(nil
,(T 17) :: nil
)::
(nil
,(T 62) :: nil
)::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "SEMICOLON"
  | (T 2) => "ID"
  | (T 3) => "TYVAR"
  | (T 4) => "INT"
  | (T 5) => "INT0"
  | (T 6) => "REAL"
  | (T 7) => "STRING"
  | (T 8) => "ABSTRACTION"
  | (T 9) => "ABSTYPE"
  | (T 10) => "AND"
  | (T 11) => "ARROW"
  | (T 12) => "AS"
  | (T 13) => "BAR"
  | (T 14) => "CASE"
  | (T 15) => "DATATYPE"
  | (T 16) => "DOTDOTDOT"
  | (T 17) => "ELSE"
  | (T 18) => "END"
  | (T 19) => "EQUAL"
  | (T 20) => "EQTYPE"
  | (T 21) => "EXCEPTION"
  | (T 22) => "DO"
  | (T 23) => "DOT"
  | (T 24) => "DARROW"
  | (T 25) => "FN"
  | (T 26) => "FUN"
  | (T 27) => "FUNCTOR"
  | (T 28) => "HANDLE"
  | (T 29) => "HASH"
  | (T 30) => "IF"
  | (T 31) => "IN"
  | (T 32) => "INCLUDE"
  | (T 33) => "INFIX"
  | (T 34) => "INFIXR"
  | (T 35) => "LET"
  | (T 36) => "LOCAL"
  | (T 37) => "NONFIX"
  | (T 38) => "OF"
  | (T 39) => "OP"
  | (T 40) => "OPEN"
  | (T 41) => "OVERLOAD"
  | (T 42) => "QUERY"
  | (T 43) => "RAISE"
  | (T 44) => "REC"
  | (T 45) => "SHARING"
  | (T 46) => "SIG"
  | (T 47) => "SIGNATURE"
  | (T 48) => "STRUCT"
  | (T 49) => "STRUCTURE"
  | (T 50) => "THEN"
  | (T 51) => "TYPE"
  | (T 52) => "VAL"
  | (T 53) => "WHILE"
  | (T 54) => "WILD"
  | (T 55) => "WITH"
  | (T 56) => "WITHTYPE"
  | (T 57) => "ASTERISK"
  | (T 58) => "COLON"
  | (T 59) => "COMMA"
  | (T 60) => "LBRACE"
  | (T 61) => "LBRACKET"
  | (T 62) => "LPAREN"
  | (T 63) => "RBRACE"
  | (T 64) => "RBRACKET"
  | (T 65) => "RPAREN"
  | (T 66) => "ORELSE"
  | (T 67) => "ANDALSO"
  | (T 68) => "IMPORT"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 2) => MlyValue.ID(("bogus")) | 
(T 3) => MlyValue.TYVAR(("'bogus")) | 
(T 4) => MlyValue.INT((1)) | 
(T 5) => MlyValue.INT0((0)) | 
(T 6) => MlyValue.REAL(("0.0")) | 
(T 7) => MlyValue.STRING(("")) | 
_ => MlyValue.VOID
end
val terms = (T 0) :: (T 1) :: (T 8) :: (T 9) :: (T 10) :: (T 11) :: 
(T 12) :: (T 13) :: (T 14) :: (T 15) :: (T 16) :: (T 17) :: (T 18) :: 
(T 19) :: (T 20) :: (T 21) :: (T 22) :: (T 23) :: (T 24) :: (T 25) :: 
(T 26) :: (T 27) :: (T 28) :: (T 29) :: (T 30) :: (T 31) :: (T 32) :: 
(T 33) :: (T 34) :: (T 35) :: (T 36) :: (T 37) :: (T 38) :: (T 39) :: 
(T 40) :: (T 41) :: (T 42) :: (T 43) :: (T 44) :: (T 45) :: (T 46) :: 
(T 47) :: (T 48) :: (T 49) :: (T 50) :: (T 51) :: (T 52) :: (T 53) :: 
(T 54) :: (T 55) :: (T 56) :: (T 57) :: (T 58) :: (T 59) :: (T 60) :: 
(T 61) :: (T 62) :: (T 63) :: (T 64) :: (T 65) :: (T 66) :: (T 67) :: 
(T 68) :: nil
end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (error):arg) =>
case (i392,stack)
of 1076382048 => fn _ => 1076385016| 1076398112 => fn _ => 1076401088
| 1076414792 => fn _ => 1076417744| 1076430832 => fn _ => 1076433584| 
1076446696 => fn _ => 1076449648| 1076463344 => fn _ => 1076466096| 
1076479208 => fn _ => 1076481952| 1076495656 => fn _ => 1076498376| 
1076510856 => fn _ => 1076512248| 1076524880 => fn _ => 1076527832| 
1076541592 => fn _ => 1076545736| 1076560880 => fn _ => 1076566432| 
1076579568 => fn _ => 1076582544| 1076596248 => fn _ => 1076599208| 
1076612296 => fn _ => 1076615272| 1076630400 => fn _ => 1076635960| 
1076649096 => fn _ => 1076652048| 1076667104 => fn _ => 1076672688| 
1076687200 => fn _ => 1076692816| 1076706576 => fn _ => 1076709560| 
1076722656 => fn _ => 1076725632| 1076740792 => fn _ => 1076746168| 
1076759984 => fn _ => 1076763920| 1076779888 => fn _ => 1076786672| 
1076801296 => fn _ => 1076806632| 1076821056 => fn _ => 1076825448| 
1076838568 => fn _ => 1076841544| 1076856608 => fn _ => 1076862224| 
1076876640 => fn _ => 1076882040| 1076895792 => fn _ => 1076898784| 
1076913160 => fn _ => 1076918520| 1076932264 => fn _ => 1076935232| 
1076949592 => fn _ => 1076954952| 1076970056 => fn _ => 1076975624| 
1076988760 => fn _ => 1076991736| 1077006896 => fn _ => 1077012480| 
1077027080 => fn _ => 1077032656| 1077047768 => fn _ => 1077053368| 
1077067880 => fn _ => 1077073496| 1077087256 => fn _ => 1077090240| 
1077103336 => fn _ => 1077106304| 1077121464 => fn _ => 1077127056| 
1077141656 => fn _ => 1077147240| 1077162256 => fn _ => 1077167640| 
1077182048 => fn _ => 1077187440| 1077202648 => fn _ => 1077208208| 
1077221352 => fn _ => 1077224344| 1077238736 => fn _ => 1077242880| 
1077258232 => fn _ => 1077264984| 1077280792 => fn _ => 1077287344| 
1077304048 => fn _ => 1077313016| 1077327504 => fn _ => 1077331664| 
1077344784 => fn _ => 1077347768| 1077361472 => fn _ => 1077364456| 
1077378224 => fn _ => 1077382648| 1077397056 => fn _ => 1077401480| 
1077415280 => fn _ => 1077419424| 1077434568 => fn _ => 1077440120| 
1077453256 => fn _ => 1077456224| 1077469928 => fn _ => 1077472904| 
1077486000 => fn _ => 1077488976| 1077503352 => fn _ => 1077507536| 
1077522120 => fn _ => 1077527496| 1077541920 => fn _ => 1077545856| 
1077559648 => fn _ => 1077563584| 1077578768 => fn _ => 1077584128| 
1077598728 => fn _ => 1077604088| 1077619296 => fn _ => 1077624688| 
1077638520 => fn _ => 1077642472| 1077659080 => fn _ => 1077667016| 
1077681568 => fn _ => 1077687152| 1077702168 => fn _ => 1077707552| 
1077720696 => fn _ => 1077723672| 1077738736 => fn _ => 1077744344| 
1077757496 => fn _ => 1077760472| 1077774848 => fn _ => 1077779248| 
1077793632 => fn _ => 1077798992| 1077812744 => fn _ => 1077815720| 
1077830960 => fn _ => 1077837952| 1077853184 => fn _ => 1077858752| 
1077871896 => fn _ => 1077874872| 1077890032 => fn _ => 1077895384| 
1077908528 => fn _ => 1077911504| 1077925208 => fn _ => 1077928160| 
1077941920 => fn _ => 1077945856| 1077962448 => fn _ => 1077970432| 
1077984296 => fn _ => 1077988440| 1078003584 => fn _ => 1078009136| 
1078022904 => fn _ => 1078025872| 1078039576 => fn _ => 1078042552| 
1078055648 => fn _ => 1078058624| 1078072328 => fn _ => 1078075072| 
1078088840 => fn _ => 1078092792| 1078107992 => fn _ => 1078113384| 
1078127216 => fn _ => 1078131152| 1078146336 => fn _ => 1078151712| 
1078166216 => fn _ => 1078171816| 1078185576 => fn _ => 1078188528| 
1078203040 => fn _ => 1078208576| 1078223744 => fn _ => 1078229288| 
1078245352 => fn _ => 1078253480| 1078268632 => fn _ => 1078274248| 
1078287400 => fn _ => 1078290384| 1078304088 => fn _ => 1078306848| 
1078319960 => fn _ => 1078322936| 1078338000 => fn _ => 1078343608| 
1078358024 => fn _ => 1078363376| 1078378576 => fn _ => 1078384152| 
1078396688 => fn _ => 1078398088| 1078411392 => fn _ => 1078415544| 
1078431528 => fn _ => 1078439736| 1078454800 => fn _ => 1078460176| 
1078473320 => fn _ => 1078476296| 1078491456 => fn _ => 1078497032| 
1078510176 => fn _ => 1078513144| 1078528208 => fn _ => 1078533760| 
1078549736 => fn _ => 1078557752| 1078573792 => fn _ => 1078580584| 
1078594424 => fn _ => 1078598832| 1078611952 => fn _ => 1078613344| 
1078626040 => fn _ => 1078630440| 1078646376 => fn _ => 1078653424| 
1078668840 => fn _ => 1078675808| 1078690848 => fn _ => 1078696200| 
1078709336 => fn _ => 1078712312| 1078727472 => fn _ => 1078732848| 
1078745384 => fn _ => 1078746776| 1078759408 => fn _ => 1078762392| 
1078776912 => fn _ => 1078782528| 1078797552 => fn _ => 1078802904| 
1078818248 => fn _ => 1078825280| 1078839064 => fn _ => 1078842048| 
1078856600 => fn _ => 1078862208| 1078876640 => fn _ => 1078881040| 
1078896368 => fn _ => 1078903336| 1078917784 => fn _ => 1078922184| 
1078937512 => fn _ => 1078944480| 1078960464 => fn _ => 1078967472| 
1078981904 => fn _ => 1078987256| 1079001000 => fn _ => 1079003968| 
1079017736 => fn _ => 1079022128| 1079035856 => fn _ => 1079038824| 
1079052592 => fn _ => 1079056984| 1079070712 => fn _ => 1079073456| 
1079087224 => fn _ => 1079091384| 1079105112 => fn _ => 1079107856| 
1079121624 => fn _ => 1079125784| 1079139512 => fn _ => 1079142256| 
1079156024 => fn _ => 1079160160| 1079175248 => fn _ => 1079180584| 
1079194400 => fn _ => 1079198536| 1079212936 => fn _ => 1079217080| 
1079230872 => fn _ => 1079235024| 1079251000 => fn _ => 1079257752| 
1079273888 => fn _ => 1079281840| 1079300144 => fn _ => 1079310696| 
1079324616 => fn _ => 1079328768| 1079343176 => fn _ => 1079347344| 
1079361136 => fn _ => 1079365528| 1079383000 => fn _ => 1079392360| 
1079405584 => fn _ => 1079408552| 1079423616 => fn _ => 1079429192| 
1079441728 => fn _ => 1079443120| 1079456424 => fn _ => 1079460824| 
1079474616 => fn _ => 1079478792| 1079495968 => fn _ => 1079504936| 
1079518152 => fn _ => 1079521128| 1079535504 => fn _ => 1079539896| 
1079552408 => fn _ => 1079553800| 1079567104 => fn _ => 1079571504| 
1079585296 => fn _ => 1079589472| 1079603880 => fn _ => 1079608072| 
1079621880 => fn _ => 1079626032| 1079640440 => fn _ => 1079644608| 
1079658400 => fn _ => 1079662568| 1079676968 => fn _ => 1079681144| 
1079694944 => fn _ => 1079699136| 1079713552 => fn _ => 1079717944| 
1079731736 => fn _ => 1079735928| 1079750344 => fn _ => 1079754512| 
1079770448 => fn _ => 1079778192| 1079792664 => fn _ => 1079796840| 
1079811232 => fn _ => 1079816656| 1079831784 => fn _ => 1079837384| 
1079851792 => fn _ => 1079857176| 1079871600 => fn _ => 1079875976| 
1079890360 => fn _ => 1079895784| 1079911760 => fn _ => 1079918760| 
1079933192 => fn _ => 1079938616| 1079952384 => fn _ => 1079955368| 
1079969824 => fn _ => 1079975376| 1079990392 => fn _ => 1079995816| 
1080009648 => fn _ => 1080013840| 1080027576 => fn _ => 1080030576| 
1080044952 => fn _ => 1080050344| 1080065456 => fn _ => 1080071064| 
1080084216 => fn _ => 1080087168| 1080102224 => fn _ => 1080107568| 
1080120104 => fn _ => 1080121512| 1080134816 => fn _ => 1080139000| 
1080153384 => fn _ => 1080158768| 1080173880 => fn _ => 1080179472| 
1080192616 => fn _ => 1080195584| 1080210648 => fn _ => 1080216000| 
1080231352 => fn _ => 1080238112| 1080254088 => fn _ => 1080260840| 
1080276864 => fn _ => 1080284792| 1080299896 => fn _ => 1080304296| 
1080318088 => fn _ => 1080322264| 1080339440 => fn _ => 1080348408| 
1080361016 => fn _ => 1080362408| 1080375712 => fn _ => 1080380112| 
1080396768 => fn _ => 1080405936| 1080422576 => fn _ => 1080430320| 
1080443512 => fn _ => 1080446488| 1080460864 => fn _ => 1080465040| 
1080478840 => fn _ => 1080483040| 1080497456 => fn _ => 1080501632| 
1080515432 => fn _ => 1080519608| 1080533344 => fn _ => 1080536320| 
1080551560 => fn _ => 1080558632| 1080573672 => fn _ => 1080579056| 
1080593624 => fn _ => 1080599192| 1080612936 => fn _ => 1080615912| 
1080633408 => fn _ => 1080644288| 1080659400 => fn _ => 1080664784| 
1080677928 => fn _ => 1080680912| 1080695288 => fn _ => 1080699712| 
1080712840 => fn _ => 1080715824| 1080730200 => fn _ => 1080734392| 
1080747520 => fn _ => 1080750496| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.interdec x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a 
end
end
structure Tokens : ML_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.ID i,p1,p2))
fun TYVAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.TYVAR i,p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.INT i,p1,p2))
fun INT0 (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.INT0 i,p1,p2))
fun REAL (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.REAL i,p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.STRING i,p1,p2))
fun ABSTRACTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun ABSTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun ARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun AS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun BAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun CASE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun DATATYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun EQTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun EXCEPTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun DARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun FN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun FUN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun HANDLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun HASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun INCLUDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIXR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LOCAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun NONFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun OP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun OPEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun OVERLOAD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun QUERY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun RAISE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun REC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun SHARING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun SIG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun SIGNATURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCTURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun VAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun WILD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun WITH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun ASTERISK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun ORELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDALSO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun IMPORT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
end
end

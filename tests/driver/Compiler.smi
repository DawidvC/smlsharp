_require "../../src/basis.smi"
_require "../../src/smlformat-lib.smi"
_require local "../../src/basis/main/SMLSharp_Runtime.smi"
_require local "../../src/config/main/Config.smi"
_require "../../src/compiler/data/control/main/Control.ppg.smi"
_require "../../src/compiler/extensions/usererror/main/UserError.ppg.smi"
_require "../../src/compiler/libs/toolchain/main/Filename.smi"
_require local "../../src/compiler/libs/toolchain/main/CoreUtils.smi"
_require local "../../src/compiler/libs/toolchain/main/LLVMUtils.smi"
_require local "../../src/compiler/libs/toolchain/main/TempFile.smi"
_require local "../../src/compiler/compilePhases/parser/main/Parser.smi"
_require local "../../src/compiler/compilePhases/toplevel/main/Top.smi"
_require local "../../src/compiler/compilePhases/main/main/Main.smi"
_require "../../src/compiler/compilePhases/main/main/Interactive.smi"
_require "../../src/compiler/compilePhases/main/main/FilenameMap.smi"
_require local "../../src/compiler/extensions/reflection/main/ReifiedTerm.ppg.smi"

(* needed to make the prelude library available *)
_require "../../src/prelude.smi"

structure Compiler =
struct

  (* some errors occurred during initialization *)
  exception Init of string

  (* some compile errors or warnings occurred during compilation.
   * The first "string" is the formatted error message. *)
  exception CompileError of string * UserError.errorInfo list

  (* exceptions raised by "execute" when the program aborts *)
  exception Failure of int
  exception CoreDumped
  exception Signaled of int

  (* found an uncaught exception during interactive execution
   * The first "string" is the formatted error message. *)
  exception UncaughtException of string * exn

  type srcfile = string
  type objfiles (= boxed)
  type exefile (= boxed)
  type error = UserError.errorInfo

  val systemBaseDir : Filename.filename
  val dataDir : Filename.filename

  (* initialize this driver *)
  val init : unit -> unit

  (* compile and execute the given SML# program.
   * These are provided for compiler and library tests.
   * The entire source code is given to the compiler at once.
   *)
  val eval : string -> unit
  val eval' : string -> {errors : error list}
  val evalFile : string -> unit
  val evalFile' : string -> {errors : error list}

  (* emulation of interactive mode (with the value printer).
   * These are provided for interactive mode and value printer tests.
   * The input code is splitted by semicolons and is read step-by-step.
   *)
  val interactive : string -> {prints : string list}
  val interactive' : string -> {errors : error list, prints : string list}
  val interactiveFile : string -> {prints : string list}
  val interactiveFile' : string -> {errors : error list, prints : string list}

  (* batch compilation *)
  val compile : string list -> objfiles
  val compile' : string list -> {objfiles : objfiles, errors : error list}
  val link : string -> objfiles -> exefile
  val link' : string -> objfiles -> {exefile : exefile, errors : error list}
  val execute : exefile -> unit

  val raiseCompileError : error list -> 'a

end

datatype dtDatatypeRep
con DDatatypeRep : dtDatatypeRep
signature SDatatypeRep =
  sig
datatype et con D : dtDatatypeRep -> et datatype ft = datatype dtDatatypeRep
  end
structure PDatatypeRep : sig datatype dt con DDatatypeRep : dt end
functor FDatatypeRep ('X : sig datatype dt = datatype dtDatatypeRep end) :
sig datatype et con D : 'X.dt -> et datatype ft con DDatatypeRep : ft end
structure TDatatypeRep
: sig
  datatype et
  con D : PDatatypeRep.dt -> et
  datatype dt
  con DDatatypeRep : PDatatypeRep.dt
  end
val xDatatypeRep = D DDatatypeRep : TDatatypeRep.et
val yDatatypeRep = DDatatypeRep : PDatatypeRep.dt
functor FDatatypeRepTrans ('X :
sig datatype dt = datatype dtDatatypeRep end) :
SDatatypeRep
structure TDatatypeRepTrans
: sig
  datatype et
  con D : PDatatypeRep.dt -> et
  datatype dt
  con DDatatypeRep : PDatatypeRep.dt
  end
val xDatatypeRepTrans = D DDatatypeRep : TDatatypeRepTrans.et
val yDatatypeRepTrans = DDatatypeRep : PDatatypeRep.dt
functor FDatatypeRepOpaq ('X : sig datatype dt = datatype dtDatatypeRep end) :
SDatatypeRep
structure TDatatypeRepOpaq
: sig
  datatype et
  con D : PDatatypeRep.dt -> et
  datatype dt
  con DDatatypeRep : PDatatypeRep.dt
  end
val xDatatypeRepOpaq = D DDatatypeRep : TDatatypeRepOpaq.et
val yDatatypeRepOpaq = DDatatypeRep : PDatatypeRep.dt

(**
 *	
 * static type env for separate compilation
 * @copyright (c) 2006, Tohoku University.
 * @author Liu Bochao
 * @version $Id: StaticTypeEnv.ppg,v 1.9 2007/01/21 13:41:33 kiyoshiy Exp $
 *)
structure StaticTypeEnv =
struct
local
    structure TU = TypesUtils
    structure TY = Types
    open TypeContext Types TypeContextUtils
in
  (***************************************************************)
  (* separate compilation type environment *)
  (*% 
   * @params(btvEnv)
   * @formatter(tyConEnv) Types.format_tyConEnv
   * @formatter(varEnv) Types.format_varEnv
   * @formatter(strEnv) Types.format_strEnv
   *)
  type typeEnv = 
       (*%
        * @format({tyConEnv,varEnv,strEnv})
        *  "tyConEnv:" + 2[tyConEnv()(btvEnv)] +1
        *  "varEnv:" + 2[varEnv()(btvEnv)] +1
        *  "strEnv" + 2[strEnv()(btvEnv)]
        *)       
       {
        tyConEnv : tyConEnv,
        varEnv : varEnv,
        strEnv : strEnv
       }
  type importTypeEnv = typeEnv and exportTypeEnv = typeEnv

  (*% 
   * @params(btvEnv)
   * @formatter(tyConIdSet) Types.format_tyConIdSet
   * @formatter(importTypeEnv) format_typeEnv
   * @formatter(exportTypeEnv) format_typeEnv
   * @formatter(exnTagSet) Types.format_exnTagSet
   *)
  type staticTypeEnv = 
       (*%
        * @format({importTyConIdSet,importTypeEnv,exportTypeEnv, generativeExnTagSet})
        * "importTyConIdSet:" +1 2[importTyConIdSet] +1
        * "importTypeEnv:" +1 2[importTypeEnv()(btvEnv)] +1
        * "exportTypeEnv:" +1 2[exportTypeEnv()(btvEnv)] +1
        * "generativeExnTagSet:" +1 2[generativeExnTagSet] 
        *)       
       {
        importTyConIdSet : tyConIdSet,
        importTypeEnv : importTypeEnv, 
        exportTypeEnv : exportTypeEnv,
        generativeExnTagSet : exnTagSet
       }

  (****************************************************************)
  (* utility functions *)
  val emptyTypeEnv =
      {
       tyConEnv = TY.emptyTyConEnv,
       varEnv = TY.emptyVarEnv,
       strEnv = TY.emptyStrEnv
       }
  val emptyImportTypeEnv = emptyTypeEnv
  val emptyExportTypeEnv = emptyTypeEnv
  val emptyStaticTypeEnv:staticTypeEnv =
      { 
       importTyConIdSet = ID.Set.empty,
       importTypeEnv = emptyTypeEnv,
       exportTypeEnv = emptyTypeEnv,
       generativeExnTagSet = Types.emptyExnTagSet
       }

  (******************************************************************************)

  fun sizeTagBoxedKindValue boxedKindValue  =
      case boxedKindValue of
        BOXEDty => let val size = 1 and tag = 1 in
                     (ST_CONST size, ST_CONST tag)
                   end
      | ATOMty => let val size = 1 and tag = 0 in
                    (ST_CONST size, ST_CONST tag)
                  end
      | DOUBLEty => let val size = 2 and tag = 0 in
                      (ST_CONST size, ST_CONST tag)
                    end
      | BOUNDVARty n => (ST_BDVAR n, ST_BDVAR n)
      | (* imported type specification *)
        SPECty (CONty {tyCon as {id, boxedKind, ...}, args}) =>
        (case (!boxedKind) of 
             GENERICty => (case args of
                               nil => (ST_VAR id, ST_VAR id)
                             | args => 
                               let
                                   val (argSizes, argTags) = 
                                       foldr (fn (arg, (sizeInfos, tagInfos)) =>
                                                 let
                                                     val (sizeInfo, tagInfo) = 
                                                         TU.computeTy sizeTagBoxedKindValue arg
                                                 in
                                                     (sizeInfo :: sizeInfos,
                                                      tagInfo :: tagInfos)
                                                 end)
                                             (nil, nil)
                                             args
                               in
                                   (ST_APP {stfun = ST_VAR id, args = argSizes},
                                    ST_APP {stfun = ST_VAR id, args = argTags})
                               end)
           | _ => sizeTagBoxedKindValue (!boxedKind))
      | ty => raise Control.Bug ("illegal SPECty type:"^(TypeFormatter.tyToString ty))

  fun sizeTagTyBindInfo tyBindInfo =
      case tyBindInfo of
        TYCON (tyCon as {name, boxedKind = boxedKind,...}) =>
        (* currently optimization on boxedKind computation of tyCon 
         * is surpressed in TypesUtils.sml, so boxedKind should always be decided.
         * This case should be explored in the future under optimized version.
         *)
         sizeTagBoxedKindValue (!boxedKind)
      | TYSPEC {spec, impl = SOME _} =>
        raise Control.Bug ("import signature type specification"^
                           "should not contain implementation")
      | TYSPEC {spec = {id, boxedKind, ...}, impl = NONE} => 
        (case boxedKind of
             GENERICty => (ST_VAR id, ST_VAR id)
           | _ => sizeTagBoxedKindValue boxedKind)
      | TYFUN {name, tyargs, body} =>
        let
          val argOrderEnv = 
              IEnv.foldli (fn (btvid, btv as {index,...}, argEnv) =>
                              IEnv.insert(argEnv, index, btvid))
                          IEnv.empty
                          tyargs
          val (sizeBody, tagBody) = TU.computeTy sizeTagBoxedKindValue body
        (* to be : listItems is not reliable, should be implemented on our own *)
        in
          (ST_FUN {args = IEnv.listItems argOrderEnv, body = sizeBody},
           ST_FUN {args = IEnv.listItems argOrderEnv, body = tagBody})
        end

  fun contextToTypeEnv (context:context) =
      {
       tyConEnv = #tyConEnv context,
       varEnv = #varEnv context,
       strEnv = #strEnv context
       }

  fun EnvToTypeEnv (tyConEnv, varEnv, strEnv) =
      {tyConEnv =  tyConEnv, varEnv = varEnv, strEnv = strEnv}

  fun typeEnvToEnv (typeEnv : typeEnv) =
      (#tyConEnv typeEnv, #varEnv typeEnv, #strEnv typeEnv)
      
  fun extendTypeEnvWithTypeEnv 
      {newTypeEnv = {tyConEnv = newTyConEnv,
                     varEnv = newVarEnv,
                     strEnv = STRUCTURE newStrEnvCont},
       oldTypeEnv = {tyConEnv = oldTyConEnv,
                     varEnv = oldVarEnv,
                     strEnv = STRUCTURE oldStrEnvCont}}
      =
      {
       tyConEnv = SEnv.unionWith #1 (newTyConEnv, oldTyConEnv),
       varEnv = SEnv.unionWith #1 (newVarEnv,oldVarEnv),
       strEnv = STRUCTURE (SEnv.unionWith #1 (newStrEnvCont, oldStrEnvCont))
       }
      
  fun extendImportTypeEnvWithImportTypeEnv {newImportTypeEnv, oldImportTypeEnv} =
      extendTypeEnvWithTypeEnv{newTypeEnv = newImportTypeEnv,
                               oldTypeEnv = oldImportTypeEnv}

  fun extendExportTypeEnvWithExportTypeEnv {newExportTypeEnv, oldExportTypeEnv} =
      extendTypeEnvWithTypeEnv{newTypeEnv = newExportTypeEnv,
                               oldTypeEnv = oldExportTypeEnv}

  fun injectContextIntoEmptyExportTypeEnv (context:context) =
      {tyConEnv = #tyConEnv context,
       varEnv = #varEnv context,
       strEnv = #strEnv context}

  fun injectExportTypeEnvInStaticTypeEnv 
          (exportTypeEnv, staticTypeEnv : staticTypeEnv)  
    =
    {
     importTyConIdSet = #importTyConIdSet staticTypeEnv,
     importTypeEnv = #importTypeEnv staticTypeEnv : importTypeEnv, 
     exportTypeEnv = exportTypeEnv : exportTypeEnv,
     generativeExnTagSet =  #generativeExnTagSet staticTypeEnv : exnTagSet
    }
  fun substTyConIdInTypeEnv tyConIdSubst ({
                                           tyConEnv, 
                                           varEnv, 
                                           strEnv = STRUCTURE strEnvCont
                                           } :typeEnv) =
      let
          val (visited, tyConEnv) = 
              substTyConIdInTyConEnv ID.Set.empty tyConIdSubst tyConEnv
          val (visited, varEnv) = 
              substTyConIdInVarEnv visited tyConIdSubst varEnv
          val (visited, strEnvCont) = 
              substTyConIdInStrEnvCont visited tyConIdSubst strEnvCont
      in
          {
           tyConEnv = tyConEnv,
           varEnv = varEnv,
           strEnv =  STRUCTURE strEnvCont
           }
      end

  fun substTyConInTypeEnv tyConSubst ({
                                       tyConEnv,
                                       varEnv,
                                       strEnv = STRUCTURE strEnvCont
                                      } : typeEnv) =
      let
          val (visited, tyConEnv) = 
              substTyConInTyConEnv ID.Set.empty tyConSubst tyConEnv
          val (visited, varEnv) = 
              substTyConInVarEnv visited tyConSubst varEnv
          val (visited, strEnv) = 
              substTyConInStrEnvCont visited tyConSubst strEnvCont
      in
          {
           tyConEnv = tyConEnv,
           varEnv = varEnv,
           strEnv = STRUCTURE strEnvCont
           }
      end

end
end

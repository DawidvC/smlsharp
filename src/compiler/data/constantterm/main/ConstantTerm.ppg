
(* -*- sml -*- *)
(** * constant terms.
 * @copyright (c) 2006, Tohoku University.
 * @author Atsushi Ohori
 * @author YAMATODANI Kiyoshi
 * @version $Id: ConstantTerm.ppg,v 1.1 2008/11/19 19:57:44 ohori Exp $
 *)
structure ConstantTerm =
struct

(*
  structure PT = PredefinedTypes
*)
  structure BT = BuiltinTypes
  structure T = Types
  structure RC = RecordCalc
  structure TU = TypesBasics
  structure A = AbsynConst

 (* for debugging *)
  fun printType ty =
      print (Bug.prettyPrint (Types.format_ty nil ty) ^ "\n")

  (*%
   * @formatter(Int8.int) TermFormat.format_Int8_dec_ML
   * @formatter(Int16.int) TermFormat.format_Int16_dec_ML
   * @formatter(Int32.int) TermFormat.format_Int32_dec_ML
   * @formatter(Int64.int) TermFormat.format_Int64_dec_ML
   * @formatter(Word8.word) TermFormat.format_Word8_hex_ML
   * @formatter(Word16.word) TermFormat.format_Word16_hex_ML
   * @formatter(Word32.word) TermFormat.format_Word32_hex_ML
   * @formatter(Word64.word) TermFormat.format_Word64_hex_ML
   * @formatter(IntInf.int) TermFormat.format_IntInf_dec_ML
   * @formatter(stringLiteral) TermFormat.format_string_ML
   * @formatter(charLiteral) TermFormat.format_char_ML
   *)
  datatype constant
    = (*%
       * @format(value) value
       *)
      INT8 of Int8.int
    | (*%
       * @format(value) value
       *)
      INT16 of Int16.int
    | (*%
       * @format(value) value
       *)
      INT32 of Int32.int
    | (*%
       * @format(value) value
       *)
      INT64 of Int64.int
    | (*%
       * @format(value) value
       *)
      INTINF of IntInf.int
    | (*%
       * @format(value) value
       *)
      WORD8 of Word8.word
    | (*%
       * @format(value) value
       *)
      WORD16 of Word16.word
    | (*%
       * @format(value) value
       *)
      WORD32 of Word32.word
    | (*%
       * @format(value) value
       *)
      WORD64 of Word64.word
    | (*%
       * @format(value) value:stringLiteral
       *)
      STRING of string
    | (*%
       * @format(value) value
       *)
      REAL64 of string
    | (*%
       * @format(value) value "f"
       *)
      REAL32 of string
    | (*%
       * @format(value) value:charLiteral
       *)
      CHAR of char
    | (*%
       * @format(value) "()"
       *)
      UNIT
    | (*%
       * @format "NULLPTR"
       *)
      NULLPOINTER   (* null C pointer *)
    | (*%
       * @format "NULLBOXED"
       *)
      NULLBOXED     (* null pointer (boxed type) *)
    | (*%
       * @format(x) "contag(" x ")"
       *)
      CONTAG of Word32.word

  (*% *)
  exception
  (*%
   * @format "too" +d "large" +d "constant"
   *)
  TooLargeConstant

  fun compare (x, y) =
      let
        fun order const =
            case const of
              INT8 _ => 0
            | INT16 _ => 1
            | INT32 _ => 2
            | INT64 _ => 3
            | INTINF _ => 4
            | WORD8 _ => 5
            | WORD16 _ => 6
            | WORD32 _ => 7
            | WORD64 _ => 8
            | STRING _ => 9
            | REAL64 _ => 10
            | REAL32 _ => 11
            | CHAR _ => 12
            | UNIT => 13
            | NULLPOINTER => 14
            | NULLBOXED => 15
            | CONTAG _ => 16
      in
        case (x, y) of
          (INT8 x, INT8 y) => Int8.compare (x, y)
        | (INT8 _, _) => Int.compare (order x, order y)
        | (INT16 x, INT16 y) => Int16.compare (x, y)
        | (INT16 _, _) => Int.compare (order x, order y)
        | (INT32 x, INT32 y) => Int32.compare (x, y)
        | (INT32 _, _) => Int.compare (order x, order y)
        | (INT64 x, INT64 y) => Int64.compare (x, y)
        | (INT64 _, _) => Int.compare (order x, order y)
        | (INTINF x, INTINF y) => IntInf.compare (x, y)
        | (INTINF _, _) => Int.compare (order x, order y)
        | (WORD8 x, WORD8 y) => Word8.compare (x, y)
        | (WORD8 _, _) => Int.compare (order x, order y)
        | (WORD16 x, WORD16 y) => Word16.compare (x, y)
        | (WORD16 _, _) => Int.compare (order x, order y)
        | (WORD32 x, WORD32 y) => Word32.compare (x, y)
        | (WORD32 _, _) => Int.compare (order x, order y)
        | (WORD64 x, WORD64 y) => Word64.compare (x, y)
        | (WORD64 _, _) => Int.compare (order x, order y)
        | (STRING x, STRING y) => String.compare (x, y)
        | (STRING _, _) => Int.compare (order x, order y)
        | (REAL64 x, REAL64 y) => String.compare (x, y)
        | (REAL64 _, _) => Int.compare (order x, order y)
        | (REAL32 x, REAL32 y) => String.compare (x, y)
        | (REAL32 _, _) => Int.compare (order x, order y)
        | (CHAR x, CHAR y) => Char.compare (x, y)
        | (CHAR _, _) => Int.compare (order x, order y)
        | (UNIT, UNIT) => EQUAL
        | (UNIT, _) => Int.compare (order x, order y)
        | (NULLPOINTER, NULLPOINTER) => EQUAL
        | (NULLPOINTER, _) => Int.compare (order x, order y)
        | (NULLBOXED, NULLBOXED) => EQUAL
        | (NULLBOXED, _) => Int.compare (order x, order y)
        | (CONTAG x, CONTAG y) => Word32.compare (x, y)
        | (CONTAG _, _) => Int.compare (order x, order y)
      end

  local

    fun decomposePolyTy (T.POLYty {boundtvars, constraints, body}) = (boundtvars, body)
      | decomposePolyTy ty = (BoundTypeVarID.Map.empty, ty)

    fun polyTy (btvEnv, bodyTy) =
        if BoundTypeVarID.Map.isEmpty btvEnv
        then bodyTy else T.POLYty {boundtvars=btvEnv, constraints=nil, body=bodyTy}

    fun overloadTy tys =
        let
          val (btvEnvs, tys) = ListPair.unzip (map decomposePolyTy tys)
          val btvEnv = foldl (BoundTypeVarID.Map.unionWith
                                (fn _ => raise Bug.Bug "unionTys"))
                             BoundTypeVarID.Map.empty
                             btvEnvs
        in
          case tys of
            [ty] => polyTy (btvEnv, ty)
          | _ =>
            let
              val btv = BoundTypeVarID.generate ()
              val btvKind = T.KIND {tvarKind = T.OCONSTkind tys, eqKind = T.NONEQ, subkind = T.ANY, dynKind=false, reifyKind=false}
              val btvEnv = BoundTypeVarID.Map.insert (btvEnv, btv, btvKind)
            in
              T.POLYty {boundtvars = btvEnv, constraints = nil, body = T.BOUNDVARty btv}
            end
        end

(*
    fun sqlExpTy elemTy =
        let
          val (btvEnv, elemTy) = decomposePolyTy elemTy
          val btv1 = BoundTypeVarID.generate ()
          val btv2 = BoundTypeVarID.generate ()
          val btvKind = {tvarKind = T.UNIV, eqKind = T.NONEQ, boxedKind = T.ANY, dynKind=false, reifyKind=false}
          val btvEnv = BoundTypeVarID.Map.insert (btvEnv, btv1, btvKind)
          val btvEnv = BoundTypeVarID.Map.insert (btvEnv, btv2, btvKind)
        in
          [T.POLYty
             {boundtvars = btvEnv,
              constraints = nil,
              body = T.CONSTRUCTty
                       {tyCon = ULP.SQL_exp_tyCon (),
                        args = [T.FUNMty ([T.BOUNDVARty btv1], elemTy),
                                T.BOUNDVARty btv2]}}]
          handle ULP.IDNotFound _ => []
        end

    fun optionTy elemTy =
        let
          val (btvEnv, elemTy) = decomposePolyTy elemTy
          val tyCon = BT.optionTyCon
        in
          polyTy (btvEnv, T.CONSTRUCTty {tyCon = tyCon, args = [elemTy]})
        end

*)

    fun polyPtrTy () =
        let
          val btv = BoundTypeVarID.generate ()
          val btvKind = #kind T.univKind
          val btvEnv = BoundTypeVarID.Map.singleton (btv, btvKind)
        in
          polyTy (btvEnv, T.CONSTRUCTty {tyCon = BT.ptrTyCon,
                                         args = [T.BOUNDVARty btv]})
        end

    fun intType () =
        overloadTy
          [BT.intTy,
           BT.int8Ty,
           BT.int16Ty,
           BT.int64Ty,
           BT.intInfTy]

    fun wordType () =
        overloadTy
          [BT.wordTy,
           BT.word8Ty,
           BT.word16Ty,
           BT.word64Ty]

    fun stringType () =
        BT.stringTy

    fun realType () =
        overloadTy
          [BT.realTy,
           BT.real32Ty]

    fun charType () =
        BT.charTy

    fun unitType () =
        BT.unitTy

    fun nullType () =
        overloadTy
        [
(*
          polyPtrTy (),
*)
          T.CONSTRUCTty {tyCon = BT.ptrTyCon, args = [BT.unitTy]},
          BT.boxedTy
        ]
  in
    fun constTy const =
        case const of
          A.INT _ => intType ()
        | A.WORD _ => wordType ()
        | A.STRING _ => stringType ()
        | A.REAL _ => realType ()
        | A.CHAR _ => charType ()
        | A.UNITCONST _ => unitType ()
        | A.NULLCONST _ => nullType ()
  end

  fun typeOf const =
      case const of
        INT8 _ => BT.int8Ty
      | INT16 _ => BT.int16Ty
      | INT32 _ => BT.intTy
      | INT64 _ => BT.int64Ty
      | INTINF _ => BT.intInfTy
      | WORD8 _ => BT.word8Ty
      | WORD16 _ => BT.word16Ty
      | WORD32 _ => BT.wordTy
      | WORD64 _ => BT.word64Ty
      | STRING _ => BT.stringTy
      | REAL64 _ => BT.realTy
      | REAL32 _ => BT.real32Ty
      | CHAR _ => BT.charTy
      | UNIT => BT.unitTy
      | NULLPOINTER => T.CONSTRUCTty {tyCon = BT.ptrTyCon, args = []}
      | NULLBOXED => BT.boxedTy
      | CONTAG _ => BT.contagTy

  (**
   * fix the form of constant expression according to its type.
   *)
  fun fixConst {constTerm : constant -> 'exp,
                tupleTerm : ('exp * Types.ty) list -> 'exp,
                conTerm : {con: RC.conInfo, instTyList: Types.ty list,
                           arg: 'exp option} -> 'exp,
                fnTerm : Types.ty * ('exp * Types.ty) -> 'exp}
               (const, ty) =
      let
        datatype constTy =
                 INT8ty | INT16ty | INT32ty | INT64ty | INTINFty
               | WORD8ty | WORD16ty | WORD32ty | WORD64ty
               | REAL64ty | REAL32ty
               | CHARty | STRINGty | UNITty | PTRty | BOXEDty
        fun constTy ty =
            case TU.derefTy ty of
              T.CONSTRUCTty {tyCon={id,...}, args=[]} =>
              if TypID.eq (id, #id BT.int8TyCon) then INT8ty
              else if TypID.eq (id, #id BT.int16TyCon) then INT16ty
              else if TypID.eq (id, #id BT.intTyCon) then INT32ty
              else if TypID.eq (id, #id BT.int64TyCon) then INT64ty
              else if TypID.eq (id, #id BT.word8TyCon) then WORD8ty
              else if TypID.eq (id, #id BT.word16TyCon) then WORD16ty
              else if TypID.eq (id, #id BT.wordTyCon) then WORD32ty
              else if TypID.eq (id, #id BT.word64TyCon) then WORD64ty
              else if TypID.eq (id, #id BT.charTyCon) then CHARty
              else if TypID.eq (id, #id BT.stringTyCon) then STRINGty
              else if TypID.eq (id, #id BT.realTyCon) then REAL64ty
              else if TypID.eq (id, #id BT.real32TyCon) then REAL32ty
              else if TypID.eq (id, #id BT.intInfTyCon) then INTINFty
              else if TypID.eq (id, #id BT.unitTyCon) then UNITty
              else if TypID.eq (id, #id BT.boxedTyCon) then BOXEDty
              else
                (printType ty;
                 raise Bug.Bug "constTy"
                )
            | T.CONSTRUCTty {tyCon={id,...}, args=[arg]} =>
              if TypID.eq (id, #id BT.ptrTyCon)
              then PTRty
              else (printType ty; raise Bug.Bug "constTy")
            | _ =>
              (printType ty;
               raise Bug.Bug "constTy")

        fun scanInt scanFn ({radix, digits}, loc) =
            let
              val r =
                  StringCvt.scanString (scanFn radix) digits
                  handle Overflow => raise TooLargeConstant
            in
              case r of
                SOME x => x
              | NONE => raise Bug.Bug "scanInt"
            end

      in
        case (const, constTy ty) of
          (A.INT x, INT8ty) =>
          constTerm (INT8 (scanInt Int8.scan x))
        | (A.INT x, INT16ty) =>
          constTerm (INT16 (scanInt Int16.scan x))
        | (A.INT x, INT32ty) =>
          constTerm (INT32 (scanInt Int32.scan x))
        | (A.INT x, INT64ty) =>
          constTerm (INT64 (scanInt Int64.scan x))
        | (A.INT x, INTINFty) =>
          constTerm (INTINF (scanInt IntInf.scan x))
        | (A.INT _, _) => raise Bug.Bug "fixConst: INT"
        | (A.WORD x, WORD8ty) =>
          constTerm (WORD8 (scanInt Word8.scan x))
        | (A.WORD x, WORD16ty) =>
          constTerm (WORD16 (scanInt Word16.scan x))
        | (A.WORD x, WORD32ty) =>
          constTerm (WORD32 (scanInt Word32.scan x))
        | (A.WORD x, WORD64ty) =>
          constTerm (WORD64 (scanInt Word64.scan x))
        | (A.WORD _, _) => raise Bug.Bug "fixConst: WORD"
        | (A.STRING (x, loc), STRINGty) => constTerm (STRING x)
        | (A.STRING _, _) => raise Bug.Bug "fixConst: STRING"
        | (A.REAL (x, loc), REAL64ty) => constTerm (REAL64 x)
        | (A.REAL (x, loc), REAL32ty) => constTerm (REAL32 x)
        | (A.REAL _, _) => raise Bug.Bug "fixConst: REAL"
        | (A.CHAR (x, loc), CHARty) => constTerm (CHAR x)
        | (A.CHAR _, _) => raise Bug.Bug "fixConst: CHAR"
        | (A.UNITCONST (_, loc), UNITty) => constTerm UNIT
        | (A.UNITCONST _, _) => raise Bug.Bug "fixConst: UNITCONST"
        | (A.NULLCONST _, PTRty) => constTerm NULLPOINTER
        | (A.NULLCONST _, BOXEDty) => constTerm NULLBOXED
        | (A.NULLCONST _, _) => raise Bug.Bug "fixConst: NULLCONST"
      end

end

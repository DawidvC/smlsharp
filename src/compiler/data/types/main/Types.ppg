(**
 * type structures.
 * @copyright (c) 2006 - 2011 Tohoku University.
 * @author Atsushi Ohori
 * @author Liu Bochao
 * @author YAMATODANI Kiyoshi
 *)
structure Types =
struct
  fun bug s = Bug.Bug ("Types: " ^ s)

  fun formatEnclosedTypIDMap args map =
      TermFormat.formatEnclosedMap
        TypID.format_id
        TypID.Map.listItemsi
        args
        map

  (*%
     @formatter(Symbol.symbol) Symbol.format_symbol
   *)
  (*% @prefix print_
     @formatter(Symbol.symbol) Symbol.format_symbol
   *)
  (*% @prefix formatWithType_
     @formatter(Symbol.symbol) Symbol.format_symbol
   *)
  type symbol = Symbol.symbol

  (*% 
      @formatter(Symbol.longsymbol) Symbol.format_longsymbol
   *)
  (*% @prefix print_
      @formatter(Symbol.longsymbol) Symbol.format_longsymbol
   *)
  (*% @prefix formatWithType_
      @formatter(Symbol.longsymbol) Symbol.format_longsymbol
   *)
  type longsymbol = Symbol.longsymbol

  (*%
      @formatter(TypID.id) TypID.format_id
   *)
  (*% @prefix print_
      @formatter(TypID.id) TypID.format_id
   *)
  (*% @prefix formatWithType_
      @formatter(TypID.id) TypID.format_id
   *)
  type typId =
    (*%
       @format(id) "t" id
     *)
    (*% @prefix print_
       @format(id) "t" id
     *)
    (*% @prefix formatWithType_
       @format(id) "t" id
     *)
    TypID.id

  (*%
     @formatter(RevealID.id) RevealID.format_id
   *)
  (*% @prefix print_
     @formatter(RevealID.id) RevealID.format_id
   *)
  (*% @prefix formatWithType_
     @formatter(RevealID.id) RevealID.format_id
   *)
  type revealKey =
    (*%
       @format(id) "rv" id
     *)
    (*% @prefix print_
       @format(id) "rv" id
     *)
    (*% @prefix formatWithType_
       @format(id) "rv" id
     *)
    RevealID.id

  (*%
     @formatter(TvarID.id) TvarID.format_id
   *)
  (*% @prefix print_
     @formatter(TvarID.id) TvarID.format_id
   *)
  (*% @prefix formatWithType_
     @formatter(TvarID.id) TvarID.format_id
   *)
  type tvarId =
    (*%
       @format(id) "tv" id
     *)
    (*% @prefix print_
       @format(id) "tv" id
     *)
    (*% @prefix formatWithType_
       @format(id) "tv" id
     *)
    TvarID.id

  (*%
     @formatter(AbsynTy.eq) AbsynTy.format_eq
   *)
  (*% @prefix print_
     @formatter(AbsynTy.eq) AbsynTy.format_eq
   *)
  (*% @prefix formatWithType_
     @formatter(AbsynTy.eq) AbsynTy.format_eq
   *)
  datatype eq =
   datatype AbsynTy.eq

  (*%
   *)
  (*%  @prefix print_
   *)
  (*% @prefix formatWithType_
   *)
  type utvar =
     (*%
        @format({symbol, id, eq, lifted})
          eq symbol
       *)
     (*% @prefix print_
        @format({symbol, id, eq, lifted})
          eq symbol
       *)
     (*% @prefix formatWithType_
        @format({symbol, id, eq, lifted})
          eq symbol
       *)
     {symbol:symbol, id:tvarId, eq:eq, lifted:bool}

  (*% @formatter(AbsynTy.eq) AbsynTy.format_eq *)
  (*% @prefix print_ @formatter(AbsynTy.eq) AbsynTy.format_eq *)
  (*% @prefix formatWithType_
      @formatter(AbsynTy.eq) AbsynTy.format_eq 
   *)
  type eqKind =
    (*% @format(x) x *) 
    (*%  @prefix print_ @format(x) x *) 
    (*% @prefix formatWithType_
        @format(x) x
      *) 
    AbsynTy.eq


  (*% *)
  (*% @prefix print_ *)
  (*% @prefix formatWithType_ *)
  datatype subkind =
      (*% @format "#unboxed" *)
      (*% @prefix print_ @format "#unboxed" *)
      (*% @prefix formatWithType_ @format "#unboxed" *)
      UNBOXED
    | (*% @format "#json" *)
      (*% @prefix print_ @format "#json" *)
      (*% @prefix formatWithType_ @format "#json" *)
      JSON
    | (*% @format "#json" *)
      (*% @prefix print_ @format "#json" *)
      (*% @prefix formatWithType_ @format "#json_atomic" *)
      JSON_ATOMIC
    | (*% @format *)
      (*% @prefix print_ @format *)
      (*% @prefix formatWithType_ @format *)
      ANY

  (* utilities for pretty printer of types *)
  datatype ('kind, 'ty) btvOrdEnv =
    ENV of
      {btvEnv : 'kind TermFormat.btvEnv,
       btvOrder : 'kind BoundTypeVarID.Map.map * 'ty -> BoundTypeVarID.id list,
       formatPrefix : 'kind -> TermFormat.format,
       formatSuffix : ('kind, 'ty) btvOrdEnv list -> 'kind -> TermFormat.format}

  fun unpackEnv [ENV x] = x
    | unpackEnv nil =
      {btvEnv = TermFormat.emptyBtvEnv,
       btvOrder = fn _ => nil,
       formatPrefix = fn _ => format_eqKind NONEQ,
       formatSuffix = fn _ => fn _ => nil}
    | unpackEnv _ = raise Bug.Bug "Types.unpackEnv"

  fun packEnv x = [ENV x]

  fun format_tyvarWithEqKind btvOrdEnv tyvar kind =
      let
        val {formatPrefix, ...} = unpackEnv btvOrdEnv
      in
        formatPrefix kind @ tyvar
      end

  fun format_tyvarWithKind (btvOrdEnv, tyvar) kind =
      let
        val {formatPrefix, formatSuffix, ...} = unpackEnv btvOrdEnv
      in
        formatPrefix kind @ tyvar @ formatSuffix btvOrdEnv kind
      end

  fun print_tyvarWithKind (btvOrdEnv, envList, sname, tyvar) kind =
      let
        val {formatPrefix, formatSuffix, ...} = unpackEnv btvOrdEnv
      in
        formatPrefix kind @ tyvar @ formatSuffix btvOrdEnv kind
      end

  fun format_boundTyvar btvOrdEnv btvId =
      TermFormat.formatBoundTyvar
        (format_tyvarWithEqKind btvOrdEnv)
        (#btvEnv (unpackEnv btvOrdEnv))
        btvId

  fun format_boundTypeVarID btvOrdEnv btvId =
      format_boundTyvar btvOrdEnv btvId
      @ TermFormat.FormatComb.term
          ("(" ^ Int.toString (BoundTypeVarID.toInt btvId) ^ ")")

  fun format_btvEnv_forPolyTy btvOrdEnv boundtvars =
      TermFormat.formatBtvEnv
        (fn tyvar => format_tyvarWithKind (btvOrdEnv, tyvar))
        (#btvEnv (unpackEnv btvOrdEnv))
        boundtvars

  fun print_btvEnv_forPolyTy (btvOrdEnv,envList,sname) boundtvars =
      TermFormat.formatBtvEnv
        (fn tyvar => format_tyvarWithKind (btvOrdEnv, tyvar))
        (#btvEnv (unpackEnv btvOrdEnv))
        boundtvars

  fun formatWithType_btvEnv_forPolyTy btvOrdEnv boundtvars =
      TermFormat.formatBtvEnvWithType
        (fn tyvar => format_tyvarWithKind (btvOrdEnv, tyvar))
        (#btvEnv (unpackEnv btvOrdEnv))
        boundtvars

  fun extendBtvEnv btvOrdEnv {boundtvars, constraints, body} =
      let
        val {btvEnv, btvOrder, formatPrefix, formatSuffix} = unpackEnv btvOrdEnv
        val order = btvOrder (boundtvars, body)
        val btvEnv = TermFormat.extendBtvEnvWithOrder
                       btvEnv (boundtvars, order)
      in
        packEnv {btvEnv = btvEnv, btvOrder = btvOrder,
                 formatPrefix = formatPrefix, formatSuffix = formatSuffix}
      end

  (*% @formatter(DummyTyID.id) DummyTyID.format_id *)
  (*%   @prefix print_  @formatter(DummyTyID.id) DummyTyID.format_id *)
  (*% @prefix formatWithType_
   * @formatter(DummyTyID.id) DummyTyID.format_id *)
  type dummyTyID = 
    (*% @format(id) "?X" id *) 
    (*%  @prefix print_ @format(id) "?X" id *) 
    (*% @prefix formatWithType_ 
        @format(id) "?X" id
      *) 
    DummyTyID.id

  (*% 
      @formatter(FreeTypeVarID.id) TermFormat.formatFreeTyvar
   *)
  (*% @prefix print_ 
      @formatter(FreeTypeVarID.id) TermFormat.formatFreeTyvar
   *)
  (*% @prefix formatWithType_
      @formatter(FreeTypeVarID.id) TermFormat.formatFreeTyvar
   *)
  type freeTypeVarID = FreeTypeVarID.id

  (* this is a temporal definition *)
  (*% *)
  type lambdaDepth = int
  val infiniteDepth = valOf Int.maxInt (* the largest word in SML/NJ *)
  val toplevelDepth = 0
  fun youngerDepth {contextDepth:int, tyvarDepth:int} = contextDepth <= tyvarDepth
  fun strictlyYoungerDepth {tyvarDepth=tyvarDepth:int,contextDepth=contextDepth:int} =
      contextDepth < tyvarDepth

  (*
   datatype lambdaDepth = INF | FIN of int
   val infiniteDepth = INF
   val toplevelDepth = FIN 0
   fun youngerDepth {contextDepth, tyvarDepth} =
       case (contextDepth, tyvarDepth) of
         (_, INF) => true
       | (INF, FIN _) => false
       | (FIN n, FIN m) =>  n <= m
   fun strictlyYoungerDepth {contextDepth, tyvarDepth} =
       case (contextDepth, tyvarDepth) of
         (INF, INF) => false
       | (_, INF) => true
       | (INF, FIN _) => false
       | (FIN n, FIN m) =>  n < m
   fun incDepth INF = INF
     | incDepth (FIN n) = (FIN (n + 1))
   fun decDepth INF = INF
     | decDepth (FIN n) = (FIN (n - 1))
  *)

   fun staticTyConName (env, sname) tyCon =
       SmlppgUtil.makeToken (sname (env, tyCon))


  (*%
    @params(btvOrdEnv)
    @formatter(formatUserLongSymbol) Symbol.formatUserLongSymbol
    @formatter(enclosedLabelMap) TermFormat.formatEnclosedLabelMap
    @formatter(freeTypeVarID) format_freeTypeVarID
    @formatter(enclosedList) TermFormat.formatEnclosedList
    @formatter(enclosedListWithBound) TermFormat.formatEnclosedListWithBound
    @formatter(seqList) TermFormat.formatSeqList
    @formatter(appList) TermFormat.formatAppList
    @formatter(optionalList) TermFormat.formatOptionalList
    @formatter(ifCons) TermFormat.formatIfCons
    @formatter(recordTy) TermFormat.formatRecordTy
    @formatter(dummyRecordTy) TermFormat.formatDummyRecordTy
    @formatter(option) TermFormat.formatOptionalOption
    @formatter(withDefault) SmlppgUtil.formatOptWithDefault
    @formatter(extendBtvEnv) extendBtvEnv
    @formatter(format_btvEnv_forPolyTy) format_btvEnv_forPolyTy
    @formatter(BoundTypeVarID.id) format_boundTyvar
    @formatter(OPrimID.id) OPrimID.format_id
    @formatter(TypID.Map.map) formatEnclosedTypIDMap
    @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
    @formatter(bool) SmlppgUtil.formatBinaryChoice
    @formatter(FFIAttributes.attributes) FFIAttributes.format_attributes
    @formatter(RecordLabel.label) RecordLabel.format_label
    @formatter(tyvarWithKind) format_tyvarWithKind
   *)
  (*%
    @prefix print_
    @params(btvOrdEnv,envList,sname)
    @formatter(formatUserLongSymbol) Symbol.formatUserLongSymbol
    @formatter(enclosedLabelMap) TermFormat.formatEnclosedLabelMap
    @formatter(freeTypeVarID) format_freeTypeVarID
    @formatter(enclosedList) TermFormat.formatEnclosedList
    @formatter(enclosedListWithBound) TermFormat.formatEnclosedListWithBound
    @formatter(seqList) TermFormat.formatSeqList
    @formatter(appList) TermFormat.formatAppList
    @formatter(optionalList) TermFormat.formatOptionalList
    @formatter(ifCons) TermFormat.formatIfCons
    @formatter(recordTy) TermFormat.formatRecordTy
    @formatter(dummyRecordTy) TermFormat.formatDummyRecordTy
    @formatter(option) TermFormat.formatOptionalOption
    @formatter(withDefault) SmlppgUtil.formatOptWithDefault
    @formatter(extendBtvEnv) extendBtvEnv
    @formatter(format_btvEnv_forPolyTy) format_btvEnv_forPolyTy
    @formatter(BoundTypeVarID.id) format_boundTyvar
    @formatter(OPrimID.id) OPrimID.format_id
    @formatter(TypID.Map.map) formatEnclosedTypIDMap
    @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
    @formatter(bool) SmlppgUtil.formatBinaryChoice
    @formatter(FFIAttributes.attributes) FFIAttributes.format_attributes
    @formatter(RecordLabel.label) RecordLabel.format_label
    @formatter(tyvarWithKind) print_tyvarWithKind
    @formatter(staticTyConName) staticTyConName
   *)
  (*%
    @prefix formatWithType_
    @params(btvOrdEnv)
    @formatter(enclosedLabelMap) TermFormat.formatEnclosedLabelMap
    @formatter(freeTypeVarID) format_freeTypeVarID
    @formatter(enclosedList) TermFormat.formatEnclosedList
    @formatter(enclosedListWithBound) TermFormat.formatEnclosedListWithBound
    @formatter(seqList) TermFormat.formatSeqList
    @formatter(appList) TermFormat.formatAppList
    @formatter(optionalList) TermFormat.formatOptionalList
    @formatter(ifCons) TermFormat.formatIfCons
    @formatter(recordTy) TermFormat.formatRecordTy
    @formatter(dummyRecordTy) TermFormat.formatDummyRecordTy
    @formatter(option) TermFormat.formatOptionalOption
    @formatter(withDefault) SmlppgUtil.formatOptWithDefault
    @formatter(extendBtvEnv) extendBtvEnv
    @formatter(format_btvEnv_forPolyTy) format_btvEnv_forPolyTy
    @formatter(BoundTypeVarID.id) format_boundTypeVarID
    @formatter(OPrimID.id) OPrimID.format_id
    @formatter(TypID.Map.map) formatEnclosedTypIDMap
    @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
    @formatter(bool) SmlppgUtil.formatBinaryChoice
    @formatter(FFIAttributes.attributes) FFIAttributes.format_attributes
    @formatter(RecordLabel.label) RecordLabel.format_label
    @formatter(tyvarWithKind) format_tyvarWithKind
   *)
  datatype ty =
      (*% @format(t) t()(btvOrdEnv)  *)
      (*% @prefix print_ @format(t) t()(btvOrdEnv,envList,sname)  *)
      (*% @prefix formatWithType_
         @format(t) t()(btvOrdEnv) 
       *)
      (* a singleton type for type-directed compilation *)
      SINGLETONty of singletonTy
    | (*% @format(t) t()(btvOrdEnv) *)
      (*% @prefix print_ @format(t) t()(btvOrdEnv,envList,sname) *)
      (*% @prefix formatWithType_ @format(t) t()(btvOrdEnv) *)
      (* singleton types introduced by compiler backend *)
      BACKENDty of backendTy
    | (*% @format "ERRORty" *)
      (*% @prefix print_ @format "ERRORty" *)
      (*% @prefix formatWithType_
          @format "ERRORty"
       *)
      ERRORty
    | (*% @format(id * kind) id *)
      (*% @prefix print_ @format(id * kind) id *)
      (*% @prefix formatWithType_ 
         @format(id * kind) id kind()(btvOrdEnv)
       *)
      DUMMYty of dummyTyID * kind
    | (*% @format(tv tvRef) tvRef(tv()(btvOrdEnv)) *)
      (*% @prefix print_ @format(tv tvRef) tvRef(tv()(btvOrdEnv,envList,sname)) *)
      (*% @prefix formatWithType_ 
          @format(tv tvRef) tvRef(tv()(btvOrdEnv))
       *)
      TYVARty of tvState ref
    | (*% @format(id) id()(btvOrdEnv) *)
      (*% @prefix print_ @format(id) id()(btvOrdEnv) *)
      (*% @prefix formatWithType_ 
          @format(id) id()(btvOrdEnv)
       *)
      BOUNDVARty of BoundTypeVarID.id
    | (*%
       * @format(argTy argTys * retTy)
        R4{
          2[ 
            argTys:appList(argTy()(btvOrdEnv))("{",",","}")
            +1 
            "->" 
            + retTy()(btvOrdEnv)
           ]
          }
       *)
      (*% @prefix print_
       * @format(argTy argTys * retTy)
        R4{
          2[ 
            argTys:appList(argTy()(btvOrdEnv,envList,sname))("{",",","}")
            +1 
            "->" 
            + retTy()(btvOrdEnv,envList,sname)
           ]
          }
       *)
      (*% @prefix formatWithType_ 
       * @format(argTy argTys * retTy)
       * R4{ argTys:appList(argTy()(btvOrdEnv))("{",",","}")
       *     +1 "->" +d retTy()(btvOrdEnv) }
       *)
      FUNMty of ty list * ty
    | (*% @format(ty tys) 
          tys:recordTy(ty()(btvOrdEnv))
       *)
      (*% @prefix print_ 
          @format(ty tys) 
          tys:recordTy(ty()(btvOrdEnv,envList,sname))
       *)
      (*% @prefix formatWithType_ 
          @format(ty tys) tys:recordTy(ty()(btvOrdEnv))
       *)
      RECORDty of ty RecordLabel.Map.map
    | (*%
       * @format({tyCon, args: argTy argTys})
       * L8{ 2[ argTys:seqList(argTy()(btvOrdEnv))("(",",",")")
       *        argTys:ifCons()(+1) tyCon()(btvOrdEnv) ] }
       *)
      (*% @prefix print_
       * @format({tyCon:tyCon:staticTyConName, args: argTy argTys})
       * L8{ 2[ argTys:seqList(argTy()(btvOrdEnv,envList,sname))("(",",",")")
       *        argTys:ifCons()(+1) tyCon()(envList,sname) ] }
       *)
      (*%  @prefix formatWithType_ 
       * @format({tyCon, args: argTy argTys})
         L8{ 2[ argTys:seqList(argTy()(btvOrdEnv))("(",",",")")
                argTys:ifCons()(+1) 
                tyCon()(btvOrdEnv) 
              ] 
           }
       *)
      CONSTRUCTty of
      {
        tyCon : tyCon,
        args : ty list
      }
    | (*%
         @format(polyTy)
           polyTy()(polyTy:extendBtvEnv()(btvOrdEnv))
       *)
      (*% @prefix print_
         @format(polyTy)
           polyTy()(polyTy:extendBtvEnv()(btvOrdEnv),envList,sname)
       *)
      (*% @prefix formatWithType_ 
       * @format(polyTy)
       * polyTy()(polyTy:extendBtvEnv()(btvOrdEnv))
       *)
      POLYty of polyTy

  and constraint =
      (* 2016-07-01 sasaki: 制約を示すデータ型を追加 *)
      (*%
       * @format({res, args : (arg1 * arg2), loc})
       * res()(btvOrdEnv) +1 "=" + 2[arg1()(btvOrdEnv) +1 "join" +1 arg2()(btvOrdEnv)]
       *)
      (*% @prefix print_
       * @format({res, args : (arg1 * arg2), loc})
       * res()(btvOrdEnv,envList,sname) +1 "=" + 2[arg1()(btvOrdEnv,envList,sname) +1 "join" +1 arg2()(btvOrdEnv,envList,sname)]
       *)
      (*%
       * @prefix formatWithType_
       * @format({res, args : (arg1 * arg2), loc})
       * res()(btvOrdEnv) +1 "=" + 2[arg1()(btvOrdEnv) +1 "join" +1 arg2()(btvOrdEnv)]
       *)
      JOIN of {res : ty, args : ty * ty, loc:Loc.loc}

  and tvarKind =
      (*%
       * @format(ty tys)
       * "::" tys:enclosedListWithBound(ty()(btvOrdEnv))("{",",","}")
       *)
      (*% @prefix print_
       * @format(ty tys)
       * "::" tys:enclosedListWithBound(ty()(btvOrdEnv,envList,sname))("{",",","}")
       *)
      (*% @prefix formatWithType_ 
       * @format(ty tys)
       * "::" tys:enclosedListWithBound(ty()(btvOrdEnv))("{",",","}")
       *)
      (* for overloaded constants *)
      OCONSTkind of ty list
    | (*
       * @format({instances: ty tys,
       *          operators: oper opers})
       * "::" opers:enclosedListWithBound(oper()(btvOrdEnv))("{",",","}")
       *      tys:enclosedListWithBound(ty()(btvOrdEnv))("{",",","}")
       *)
      (*%
         @format({instances: ty tys,
                  operators: oper opers})
         "::" tys:enclosedListWithBound(ty()(btvOrdEnv))("{",",","}")
       *)
      (*%  @prefix print_
         @format({instances: ty tys,
                  operators: oper opers})
         "::" tys:enclosedListWithBound(ty()(btvOrdEnv,envList,sname))("{",",","}")
       *)
      (*% @prefix formatWithType_ 
       * @format({instances: ty tys,
       *          operators: oper opers})
       * "::" opers:enclosedListWithBound(oper()(btvOrdEnv))("{",",","}")
       *      tys:enclosedListWithBound(ty()(btvOrdEnv))("{",",","}")
       *)
      OPRIMkind of {instances : ty list, operators : oprimSelector list}
    | (*%  @format  *)
      (*% @prefix print_  @format  *)
      (*% @prefix formatWithType_ 
          @format 
       *)
      UNIV
    | (*%  @format "#boxed" *)
      (*% @prefix print_  @format "#boxed" *)
      (*% @prefix formatWithType_ 
          @format "#boxed"
       *)
      BOXED
    | (*%
       * @format(ty tys)
       * "#" tys:enclosedLabelMap(ty()(btvOrdEnv))("{",",",":","}")
       *)
      (*% @prefix print_
       * @format(ty tys)
       * "#" tys:enclosedLabelMap(ty()(btvOrdEnv,envList,sname))("{",",",":","}")
       *)
      (*% @prefix formatWithType_ 
       * @format(ty tys)
       * "#" tys:enclosedLabelMap(ty()(btvOrdEnv))("{",",",":","}")
       *)
      REC of ty RecordLabel.Map.map

  and dtyKind
    = (*% @format *)
      (*% @prefix print_ @format *)
      (*% @prefix formatWithType_ 
          @format "DTY"
       *)
      (* datatype including atomic types *)
      DTY
    | (*%
          @format({opaqueRep, revealKey})
                 "[opaque("revealKey "," opaqueRep()(btvOrdEnv) ")" "]"
       *)
      (*% @prefix print_
          @format({opaqueRep, revealKey})
                 "[opaque("revealKey "," opaqueRep()(btvOrdEnv,envList,sname) ")" "]"
       *)
      (*% @prefix formatWithType_ 
          @format({opaqueRep, revealKey})
                 "[opaque("revealKey "," opaqueRep()(btvOrdEnv) ")" "]"
       *)
      (* opaque types of builtin types; opqaue types of datatypes are DTYs *)
      OPAQUE of {opaqueRep:opaqueRep, revealKey:revealKey}
    | (*%
          @format(builtin)
       *)
      (*% @prefix print_
          @format(builtin)
       *)
      (*% @prefix formatWithType_ 
          @format(builtin)  "BUILTIN"
       *)
      (* builtin types *)
      BUILTIN of BuiltinTypeNames.bty

  and opaqueRep 
    = (*% 
         @format(tyCon) tyCon()(btvOrdEnv)
       *)
      (*% @prefix print_
         @format(tyCon) tyCon()(btvOrdEnv,envList,sname)
       *)
      (*% @prefix formatWithType_ 
          @format(tyCon) tyCon()(btvOrdEnv)
       *)
      TYCON of tyCon 
    | (*%
         @format({iseq, arity, polyTy}) polyTy()(btvOrdEnv)
       *)
      (*% @prefix print_
         @format({iseq, arity, polyTy}) polyTy()(btvOrdEnv,envList,sname)
       *)
      (*% @prefix formatWithType_ 
         @format({iseq, arity, polyTy}) polyTy()(btvOrdEnv)
       *)
      TFUNDEF of {iseq:bool, arity:int, polyTy:ty}

  and tvState =
      (*%  @format(tvKind) tvKind()(btvOrdEnv)  *) 
      (*% @prefix print_ @format(tvKind) tvKind()(btvOrdEnv,envList,sname)  *) 
      (*% @prefix formatWithType_ 
          @format(tvKind) tvKind()(btvOrdEnv) 
       *)
      TVAR of tvKind
    | (*% @format(ty) ty()(btvOrdEnv) *)
      (*% @prefix print_  @format(ty) ty()(btvOrdEnv,envList,sname) *)
      (*% @prefix formatWithType_ 
           @format(ty) ty()(btvOrdEnv)
       *)
      SUBSTITUTED of ty

  and singletonTy =
      (*%
       * @format(operator) "INSTCODE(" !N0{ operator()(btvOrdEnv) ")" }
       *)
      (*% @prefix print_
       * @format(operator) "INSTCODE(" !N0{ operator()(btvOrdEnv,envList,sname) ")" }
       *)
      (*% @prefix formatWithType_ 
       * @format(operator) "INSTCODE(" !N0{ operator()(btvOrdEnv) ")" }
       *)
      (* a singletonset denoting the instance function for a type 'a *)
      INSTCODEty of oprimSelector
    | (*%
       * @format(label * ty) "INDEX(" !N0{ label "," +1 ty()(btvOrdEnv) ")" }
       *)
      (*% @prefix print_
       * @format(label * ty) "INDEX(" !N0{ label "," +1 ty()(btvOrdEnv,envList,sname) ")" }
       *)
      (*% @prefix formatWithType_ 
       * @format(label * ty) "INDEX(" !N0{ label "," +1 ty()(btvOrdEnv) ")" }
       *)
      INDEXty of RecordLabel.label * ty
    | (*%
       * @format(ty) "TAG(" !N0{ ty()(btvOrdEnv) ")" }
       *)
      (*% @prefix print_
       * @format(ty) "TAG(" !N0{ ty()(btvOrdEnv,envList,sname) ")" }
       *)
      (*% @prefix formatWithType_ 
       * @format(ty) "TAG(" !N0{ ty()(btvOrdEnv) ")" }
       *)
      TAGty of ty
    | (*%
       * @format(ty) "SIZE(" !N0{ ty()(btvOrdEnv) ")" }
       *)
      (*% @prefix print_
       * @format(ty) "SIZE(" !N0{ ty()(btvOrdEnv,envList,sname) ")" }
       *)
      (*% @prefix formatWithType_ 
       * @format(ty) "SIZE(" !N0{ ty()(btvOrdEnv) ")" }
       *)
      SIZEty of ty
    | (*%
       * @format(ty) "TYPE(" !N0{ ty()(btvOrdEnv) ")" }
       *)
      (*% @prefix print_
       * @format(ty) "TYPE(" !N0{ ty()(btvOrdEnv,envList,sname) ")" }
       *)
      (*% @prefix formatWithType_ 
       * @format(ty) "TYPE(" !N0{ ty()(btvOrdEnv) ")" }
       *)
      TYPEty of ty
    | (*%
       * @format(ty) "REIFYTy(" !N0{ ty()(btvOrdEnv) ")" }
       *)
      (*% @prefix print_
       * @format(ty) "REIFYTy(" !N0{ ty()(btvOrdEnv,envList,sname) ")" }
       *)
      (*% @prefix formatWithType_ 
       * @format(ty) "REIFYty(" !N0{ ty()(btvOrdEnv) ")" }
       *)
      REIFYty of ty

  and backendTy =
      (*% @format(ty) "RECORDSIZE(" !N0{ ty()(btvOrdEnv) } ")" *)
      (*% @prefix print_ 
          @format(ty) "RECORDSIZE(" !N0{ ty()(btvOrdEnv,envList,sname) } ")" *)
      (*% @prefix formatWithType_
       * @format(ty) "RECORDSIZE(" !N0{ ty()(btvOrdEnv) } ")" *)
      (* type of the number of bytes of records of type ty *)
      RECORDSIZEty of ty
    | (*% @format(i * ty) "RECORDBITMAPINDEX(" !N0{ i "," ty()(btvOrdEnv) } ")"
       *)
      (*% @prefix print_ @format(i * ty) "RECORDBITMAPINDEX(" !N0{ i "," ty()(btvOrdEnv,envList,sname) } ")"
       *)
      (*% @prefix formatWithType_
       * @format(i * ty) "RECORDBITMAPINDEX(" !N0{ i "," ty()(btvOrdEnv) } ")"
       *)
      (* type of the index of i-th word of the bitmap of records of type ty *)
      RECORDBITMAPINDEXty of int * ty
    | (*% @format(i * ty) "RECORDBITMAP(" !N0{ i "," ty()(btvOrdEnv) } ")" *)
      (*% @prefix print_ @format(i * ty) "RECORDBITMAP(" !N0{ i "," ty()(btvOrdEnv,envList,sname) } ")" *)
      (*% @prefix formatWithType_
       * @format(i * ty) "RECORDBITMAP(" !N0{ i "," ty()(btvOrdEnv) } ")" *)
      (* type of the i-th word of the bitmap of records of type ty *)
      RECORDBITMAPty of int * ty
    | (*% @format(ty) "CCONVTAG(" !N0{ ty()(btvOrdEnv) } ")" *)
      (*% @prefix print_ @format(ty) "CCONVTAG(" !N0{ ty()(btvOrdEnv,envList,sname) } ")" *)
      (*% @prefix formatWithType_
       * @format(ty) "CCONVTAG(" !N0{ ty()(btvOrdEnv) } ")" *)
      (* type of calling convention tag of function of type ty *)
      CCONVTAGty of codeEntryTy
    | (* type of pointer to the entry of an ML function *)
      (*% @format(ty) "FUNENTRY(" ty()(btvOrdEnv) ")" *)
      (*%  @prefix print_ @format(ty) "FUNENTRY(" ty()(btvOrdEnv,envList,sname) ")" *)
      (*% @prefix formatWithType_
       * @format(ty) "FUNENTRY(" ty()(btvOrdEnv) ")" *)
      FUNENTRYty of codeEntryTy
    | (* type of pointer to the entry of a callback function code *)
      (*% @format(ty) "CALLBACKENTRY(" ty()(btvOrdEnv) ")" *)
      (*%  @prefix print_ @format(ty) "CALLBACKENTRY(" ty()(btvOrdEnv,envList,sname) ")" *)
      (*% @prefix formatWithType_
       * @format(ty) "CALLBACKENTRY(" ty()(btvOrdEnv) ")" *)
      CALLBACKENTRYty of callbackEntryTy
    | (* type of some function code *)
      SOME_FUNENTRYty
    | (* type of some function code *)
      SOME_FUNWRAPPERty
    | (* type of some closure environment *)
      SOME_CLOSUREENVty
    | (* type of some calling convention tag *)
      SOME_CCONVTAGty
    | (* type of foreign function pointer *)
      (*% @format(ty) "FOREIGNFUNTY(" ty()(btvOrdEnv) ")" *)
      (*%  @prefix print_ @format(ty) "FOREIGNFUNTY(" ty()(btvOrdEnv,envList,sname) ")" *)
      (*% @prefix formatWithType_
       * @format(ty) "FOREIGNFUNTY(" ty()(btvOrdEnv) ")" *)
      FOREIGNFUNPTRty of foreignFunTy

  and overloadMatch =
      (*%
       * @format({exVarInfo, instTyList: ty tys})
       * L8{ exVarInfo +1 tys:appList(ty()(btvOrdEnv))(+1 "{",",","}") }
       * @format:exVarInfo({path, ty}) path
       *)
      (*%  @prefix print_
       * @format({exVarInfo, instTyList: ty tys})
       * L8{ exVarInfo +1 tys:appList(ty()(btvOrdEnv,envList,sname))(+1 "{",",","}") }
       * @format:exVarInfo({path, ty}) path
       *)
      (*% @prefix formatWithType_ 
       * @format({exVarInfo, instTyList: ty tys})
       * L8{ exVarInfo +1 tys:appList(ty()(btvOrdEnv))(+1 "{",",","}") }
       * @format:exVarInfo({path, ty}) path
       *)
      OVERLOAD_EXVAR of
      {
        exVarInfo: {path: longsymbol, ty: ty},
        instTyList: ty list
      }
    | (*%
       * @format({primInfo, instTyList: ty tys})
       * L8{ primInfo +1 tys:appList(ty()(btvOrdEnv))(+1 "{",",","}") }
       * @format:primInfo({primitive, ty}) primitive
       *)
      (*% @prefix print_
       * @format({primInfo, instTyList: ty tys})
       * L8{ primInfo +1 tys:appList(ty()(btvOrdEnv,envList,sname))(+1 "{",",","}") }
       * @format:primInfo({primitive, ty}) primitive
       *)
      (*% @prefix formatWithType_ 
       * @format({primInfo, instTyList: ty tys})
       * L8{ primInfo +1 tys:appList(ty()(btvOrdEnv))(+1 "{",",","}") }
       * @format:primInfo({primitive, ty}) primitive
       *)
      OVERLOAD_PRIM of
      {
        primInfo: {primitive: BuiltinPrimitive.primitive, ty: ty},
        instTyList: ty list
      }
    | (*%
       * @format(ty * match matches)
       * !N0{ "match" +d ty()(btvOrdEnv)
       *      matches(match()(btvOrdEnv))(+1 "of" +d, +1, +d "=>",) }
       *)
      (*% @prefix print_
       * @format(ty * match matches)
       * !N0{ "match" +d ty()(btvOrdEnv,envList,sname)
       *      matches(match()(btvOrdEnv,envList,sname))(+1 "of" +d, +1, +d "=>",) }
       *)
      (*% @prefix formatWithType_ 
       * @format(ty * match matches)
       * !N0{ "match" +d ty()(btvOrdEnv)
       *      matches(match()(btvOrdEnv))(+1 "of" +d, +1, +d "=>",) }
       *)
      OVERLOAD_CASE of ty * overloadMatch TypID.Map.map

  and kind = 
      (*%
       * @format({eqKind, dynKind, reifyKind, subkind, tvarKind})
       * tvarKind()(btvOrdEnv)
       * subkind
       * dynKind()("#dynamic",)
       * reifyKind()("#reify",)
       *)
      (*%  @prefix print_
       * @format({eqKind, dynKind, reifyKind, subkind, tvarKind})
       * tvarKind()(btvOrdEnv,envList,sname)
       * subkind
       * dynKind()("#dynamic",)
       * reifyKind()("#reify",)
       *)
      (*% @prefix formatWithType_
       * @format({eqKind, dynKind, reifyKind, subkind, tvarKind})
       * tvarKind()(btvOrdEnv)
       * subkind
       * dynKind()("#dynamic",)
       * reifyKind()("#reify",)
       *)
      KIND of
      {eqKind : eqKind,
       dynKind : bool,
       reifyKind : bool,
       subkind : subkind,    (* kinds unrelated to type-directed compile *)
       tvarKind : tvarKind}  (* kinds significant to type-directed compile *)

  withtype tvKind =
      (*
       Ohori: Dec 3, 2006.
       lambdaDepth is introduce to speed up type generalization.
       Initially, it is equal to the length of \Gamma at which a type
       variable is introduced. The top level is therefore 0.
       We then maintain the invariant:
         lambdaDepth(t) is the minimal |\Gamma|  such that
              \Gamma{x:\tau(t)}
       A type variable is created with lambdaDepth = INFINITE.
       When a type is entered in \Gamma{x:\tau}, the lambdaDepth of
       each type variable t' in tau is set to |\Gamma|
       Whenever (t,tau) is unified, the lambdaDepth of each type variable t'
       in tau must be set to min(lambdaDepth(t), lambdaDepth(t')).
      *)
      (*%
         @format({lambdaDepth,
                  id,
                  kind,
                  utvarOpt: utvar utvarOpt})
         kind:tyvarWithKind()(btvOrdEnv, id utvarOpt(utvar)("(U","U)"))
         + "(lambdaDepth:" + lambdaDepth + ")"
       *)
      (*%  @prefix print_
         @format({lambdaDepth,
                  id,
                  kind,
                  utvarOpt: utvar utvarOpt})
         kind:tyvarWithKind()(btvOrdEnv,envList,sname, id utvarOpt(utvar)("(U","U)"))
       *)
      (*% @prefix formatWithType_ 
         @format({lambdaDepth,
                  id,
                  kind,
                  utvarOpt: utvar utvarOpt})
         kind:tyvarWithKind()(btvOrdEnv, id utvarOpt(utvar)("(U","U)"))
       *)
      {
       lambdaDepth: lambdaDepth,
       id: freeTypeVarID,
       kind: kind,
       utvarOpt: utvar option (* SOME: user-defined type variable *)
      }

  and tyCon
    = (*% @format({id, longsymbol:longsymbol:formatUserLongSymbol, iseq, runtimeTy, arity, conSet, conIDSet,
                   extraArgs:ty tys,
                   dtyKind})
          longsymbol
       *)
      (*%  @prefix print_
         @format({id, longsymbol:longsymbol:formatUserLongSymbol, iseq, runtimeTy, arity, conSet, conIDSet,
                   extraArgs:ty tys,
                   dtyKind})
          longsymbol
       *)
      (*% @prefix formatWithType_ 
          @format({id, longsymbol, iseq, runtimeTy, arity, conSet, conIDSet,
                   extraArgs:ty tys,
                   dtyKind})
          tys:ifCons()(tys:enclosedList(ty()(btvOrdEnv))("{",",","}"))
          longsymbol 
          "(" id "[" dtyKind()(btvOrdEnv) "]" ")"
       *)
      {id : typId,
       longsymbol : longsymbol,
       iseq : bool,
       arity : int,
       runtimeTy : BuiltinTypeNames.bty,
       conSet : (unit -> ty) option SymbolEnv.map,
       conIDSet : ConID.Set.set,
       extraArgs : ty list,
       dtyKind : dtyKind
      }

(* old llvm
    = (*%
          @format({id, path, iseq, runtimeTy, arity, conSet,
                   extraArgs:ty tys,
                   dtyKind})
          tys:ifCons()(tys:enclosedList(ty()(btvOrdEnv))("{",",","}"))
          path 
          "(" id "[" dtyKind()(btvOrdEnv) "]" ")"
     (* @format({id, path, iseq, runtimeTy, arity, conSet,
                   extraArgs:ty tys,
                   dtyKind})
          path*)
       *)
      (*% @prefix formatWithType_ 
          @format({id, longsymbol, iseq, runtimeTy, arity, conSet,
                   extraArgs:ty tys,
                   dtyKind})
          tys:ifCons()(tys:enclosedList(ty()(btvOrdEnv))("{",",","}"))
          longsymbol 
          "(" id "[" dtyKind()(btvOrdEnv) "]" ")"
       *)
      {id : typId,
       longsymbol : longsymbol,
       iseq : bool,
       arity : int,
       runtimeTy : BuiltinTypeNames.bty,
       conSet : {hasArg:bool} SEnv.map,
       extraArgs : ty list,
       dtyKind : dtyKind
      }
*)

  and polyTy = (* for pretty printing *)
      (*%
       * @format({boundtvars, constraints: con cons, body})
          "[" 
            !N0{
               2[
                 {boundtvars:format_btvEnv_forPolyTy()(btvOrdEnv) "."}
                 cons:optionalList(con(btvOrdEnv))(+1"(",",",") =>")
                 +1
                 body()(btvOrdEnv) 
                ]
            "]"
           }
       *)
      (*%  @prefix print_
       * @format({boundtvars, constraints: con cons, body})
          "[" 
            !N0{
               2[
                 {boundtvars:format_btvEnv_forPolyTy()(btvOrdEnv) "."}
                 cons:optionalList(con(btvOrdEnv,envList,sname))(+1"(",",",") =>")
                 +1
                 body()(btvOrdEnv,envList,sname) 
                ]
            "]"
           }
       *)
      (*% @prefix formatWithType_
       * @format({boundtvars, constraints: con cons, body})
       * "[" !N0{ boundtvars:format_btvEnv_forPolyTy()(btvOrdEnv) "."
       *          cons:optionalList(con(btvOrdEnv))(+1"(",",",") =>")
       *          +1 body()(btvOrdEnv) "]" }
       *)
      (**
       * boundtvars = {..., btvid -> btvKind as {tvarKind, eqKind, boxedKind, dynKind, reifyKind}, ...}
       * btvid is the id of boundTvars used as i in BOUNDVARty(i)
       *)
      {
        boundtvars : kind BoundTypeVarID.Map.map,
        constraints : constraint list,
        body : ty
      }

  and codeEntryTy =
      (*%
       * @format({tyvars, haveClsEnv, argTyList: arg args,
       *          retTy: ret rets})
       * R4{ args:appList(arg()(btvOrdEnv))("{",",","}")
       *     +1 "->" +d rets(ret()(btvOrdEnv))("{","}") }
       *)
      (*%   @prefix print_
       * @format({tyvars, haveClsEnv, argTyList: arg args,
       *          retTy: ret rets})
       * R4{ args:appList(arg()(btvOrdEnv,envList,sname))("{",",","}")
       *     +1 "->" +d rets(ret()(btvOrdEnv,envList,sname))("{","}") }
       *)
      (*% @prefix formatWithType_
       * @format({tyvars, haveClsEnv, argTyList: arg args,
       *          retTy: ret rets})
       * R4{ args:appList(arg()(btvOrdEnv))("{",",","}")
       *     +1 "->" +d rets(ret()(btvOrdEnv))("{","}") }
       *)
      (* argTyList and retTy must be closed by tyvars *)
      {
        tyvars : kind BoundTypeVarID.Map.map,
        haveClsEnv : bool,
        argTyList : ty list,
        retTy : ty option
      }

  and callbackEntryTy =
      (*%
       * @format({tyvars, haveClsEnv, argTyList: arg args,
       *          retTy: ret rets, attributes})
       * R4{ args:appList(arg()(btvOrdEnv))("{",",","}")
       *     +1 "->" +d rets(ret()(btvOrdEnv))("{","}") }
       *)
      (*%   @prefix print_
       * @format({tyvars, haveClsEnv, argTyList: arg args,
       *          retTy: ret rets, attributes})
       * R4{ args:appList(arg()(btvOrdEnv,envList,sname))("{",",","}")
       *     +1 "->" +d rets(ret()(btvOrdEnv,envList,sname))("{","}") }
       *)
      (*% @prefix formatWithType_
       * @format({tyvars, haveClsEnv, argTyList: arg args,
       *          retTy: ret rets, attributes})
       * R4{ args:appList(arg()(btvOrdEnv))("{",",","}")
       *     +1 "->" +d rets(ret()(btvOrdEnv))("{","}") }
       *)
      (* argTyList and retTy must be closed by tyvars *)
      {
        tyvars : kind BoundTypeVarID.Map.map,
        haveClsEnv : bool,
        argTyList : ty list,
        retTy : ty option,
        attributes : FFIAttributes.attributes
      }

  and foreignFunTy =
      (*%
       * @format({tyvars,
       *          argTyList: argTy argTys,
       *          varArgTyList: varTy varTys varOpt,
       *          resultTy: retTy retTyOpt, attributes})
       * L8{ 2[
       *   {tyvars:format_btvEnv_forPolyTy()(btvOrdEnv) "."}
       *   attributes +1
       *   R4{ argTys:appList(argTy()(btvOrdEnv))("(",",",")")
       *       varOpt(varTys:appList(varTy()(btvOrdEnv))("(",",",")"))("...",)
       *       +1 "->" +d retTyOpt:withDefault(retTy()(btvOrdEnv))("()") } ] }
       *)
      (*%   @prefix print_
       * @format({tyvars,
       *          argTyList: argTy argTys,
       *          varArgTyList: varTy varTys varOpt,
       *          resultTy: retTy retTyOpt, attributes})
       * L8{ 2[
       *   {tyvars:format_btvEnv_forPolyTy()(btvOrdEnv) "."}
       *   attributes +1
       *   R4{ argTys:appList(argTy()(btvOrdEnv,envList,sname))("(",",",")")
       *       varOpt(varTys:appList(varTy()(btvOrdEnv,envList,sname))("(",",",")"))("...",)
       *       +1 "->" +d retTyOpt:withDefault(retTy()(btvOrdEnv,envList,sname))("()") } ] }
       *)
      (*% @prefix formatWithType_
       * @format({tyvars,
       *          argTyList: argTy argTys,
       *          varArgTyList: varTy varTys varOpt,
       *          resultTy: retTy retTyOpt, attributes})
       * L8{ 2[
       *   {tyvars:format_btvEnv_forPolyTy()(btvOrdEnv) "."}
       *   attributes +1
       *   R4{ argTys:appList(argTy()(btvOrdEnv))("(",",",")")
       *       varOpt(varTys:appList(varTy()(btvOrdEnv))("(",",",")"))("...",)
       *       +1 "->" +d retTyOpt:withDefault(retTy()(btvOrdEnv))("()") } ] }
       *)
      {
        tyvars : kind BoundTypeVarID.Map.map,
        argTyList : ty list,
        varArgTyList : ty list option,
        resultTy : ty option,
        attributes : FFIAttributes.attributes
      }

  and oprimSelector =
      (*
       * @format({oprimId, longsymbol, keyTyList: keyTy keyTys, match, instMap})
       * longsymbol "#" oprimId
       * (* instTys:optionalList(instTy()(btvOrdEnv))(+1 "{",",","}") *)
       * (* keyTys:enclosedList(keyTy()(btvOrdEnv))("[",",","]") *)
       * "(" {match()(btvOrdEnv)} ")"
       *)
      (*%
       * @format({oprimId, longsymbol, keyTyList: keyTy keyTys, match, instMap})
       * longsymbol "#" oprimId
       * (* instTys:optionalList(instTy()(btvOrdEnv))(+1 "{",",","}") *)
       * (* keyTys:enclosedList(keyTy()(btvOrdEnv))("[",",","]") *)
       *)
      (*%   @prefix print_
       * @format({oprimId, longsymbol, keyTyList: keyTy keyTys, match, instMap})
       * longsymbol "#" oprimId
       * (* instTys:optionalList(instTy()(btvOrdEnv,envList,sname))(+1 "{",",","}") *)
       * (* keyTys:enclosedList(keyTy()(btvOrdEnv,envList,sname))("[",",","]") *)
       *)
      (*% @prefix formatWithType_
       * @format({oprimId, longsymbol, keyTyList: keyTy keyTys, match, instMap})
         longsymbol "#" oprimId 
         (* +1 keyTys:enclosedList(keyTy()(btvOrdEnv))("[",",","]") *)
         (* +1 match()(btvOrdEnv) *)
       *)
      {
        oprimId : OPrimID.id,
        longsymbol : longsymbol,
        keyTyList : ty list,
        match : overloadMatch,
        instMap : overloadMatch OPrimInstMap.map
      }

  (* printing order of bound type variables. *)
  fun btvOrderTy btv ty =
      case ty of
        SINGLETONty sty => btvOrderSingletonTy btv sty
      | BACKENDty bty => btvOrderBackendTy btv bty
      | ERRORty => nil
      | DUMMYty _ => nil
      | TYVARty (ref (TVAR _)) => nil
      | TYVARty (ref (SUBSTITUTED ty)) => btvOrderTy btv ty
      | BOUNDVARty id => if BoundTypeVarID.Set.member (btv, id)
                         then [id] else nil
      | FUNMty (tys, ty) => List.concat (map (btvOrderTy btv) (tys @ [ty]))
      | RECORDty tys => List.concat (map (btvOrderTy btv) (RecordLabel.Map.listItems tys))
      | CONSTRUCTty {tyCon, args} => List.concat (map (btvOrderTy btv) args)
      | POLYty {boundtvars, constraints, body} =>
        let
          val btv =
              BoundTypeVarID.Set.filter
                (fn id => not (BoundTypeVarID.Map.inDomain (boundtvars, id)))
                btv
        in
          btvOrderTy btv body
        end
  and btvOrderSingletonTy btv sty =
      case sty of
        INSTCODEty {oprimId, longsymbol, keyTyList, match, instMap} =>
        List.concat (map (btvOrderTy btv) keyTyList)
      | INDEXty (label, ty) => btvOrderTy btv ty
      | SIZEty ty => btvOrderTy btv ty
      | TAGty ty => btvOrderTy btv ty
      | TYPEty ty => btvOrderTy btv ty
      | REIFYty ty => btvOrderTy btv ty
  and btvOrderBackendTy btv bty =
      case bty of
        RECORDSIZEty ty => btvOrderTy btv ty
      | RECORDBITMAPINDEXty (i,ty) => btvOrderTy btv ty
      | RECORDBITMAPty (i,ty) => btvOrderTy btv ty
      | CCONVTAGty _ => nil  (* contains no free type variables *)
      | FUNENTRYty _ => nil  (* contains no free type variables *)
      | CALLBACKENTRYty _ => nil  (* contains no free type variables *)
      | SOME_FUNENTRYty => nil
      | SOME_FUNWRAPPERty => nil
      | SOME_CLOSUREENVty => nil
      | SOME_CCONVTAGty => nil
      | FOREIGNFUNPTRty {tyvars, argTyList, varArgTyList, resultTy,
                         attributes} =>
        List.concat
          (map (btvOrderTy btv)
               (argTyList
                @ (case varArgTyList of NONE => nil | SOME l => l)
                @ (case resultTy of NONE => nil | SOME x => [x])))
  and btvOrderKind btv (KIND {eqKind, dynKind, reifyKind, subkind, tvarKind}) =
      case tvarKind of
        OCONSTkind tys => List.concat (map (btvOrderTy btv) tys)
      | OPRIMkind {instances,...} =>
        List.concat (map (btvOrderTy btv) instances)
      | UNIV => nil
      | BOXED => nil
      | REC tys => List.concat (map (btvOrderTy btv) (RecordLabel.Map.listItems tys))
  and btvOrder (boundtvars, body) =
      let
        val btv = BoundTypeVarID.Map.foldli
                    (fn (id,_,z) => BoundTypeVarID.Set.add (z, id))
                    BoundTypeVarID.Set.empty
                    boundtvars
      in
        foldr (fn (x,z) => case BoundTypeVarID.Map.find (boundtvars, x) of
                             NONE => x :: z
                           | SOME k => x :: btvOrderKind btv k @ z)
              nil
              (btvOrderTy btv body)
      end

  fun format_kindPrefix (KIND {eqKind, ...}) =
      format_eqKind eqKind

  val format_kindSuffix = format_kind

  fun makeEnv btvEnv =
      packEnv {btvEnv = btvEnv,
               btvOrder = btvOrder,
               formatPrefix = format_kindPrefix,
               formatSuffix = format_kindSuffix}

  val format_tvarKind =
      fn btvEnv => fn x => format_tvarKind (makeEnv btvEnv) x
  val format_tvState =
      fn btvEnv => fn x => format_tvState (makeEnv btvEnv) x
  val format_ty =
      fn btvEnv => fn x => format_ty (makeEnv btvEnv) x
  val print_ty =
      fn (btvEnv, envList, sname) => fn x => print_ty (makeEnv btvEnv, envList, sname) x
  val format_singletonTy =
      fn btvEnv => fn x => format_singletonTy (makeEnv btvEnv) x
  val formatWithType_singletonTy =
      fn btvEnv => fn x => formatWithType_singletonTy (makeEnv btvEnv) x
  val formatWithType_ty =
      fn btvEnv => fn x => formatWithType_ty (makeEnv btvEnv) x
  val format_dtyKind =
      fn btvEnv => fn x => format_dtyKind (makeEnv btvEnv) x
  val format_tvKind =
      fn btvEnv => fn x => format_tvKind (makeEnv btvEnv) x
  val format_oprimSelector =
      fn btvEnv => fn x => format_oprimSelector (makeEnv btvEnv) x
  val format_codeEntryTy =
      fn x => format_codeEntryTy (makeEnv nil) x
  val format_callbackEntryTy =
      fn x => format_callbackEntryTy (makeEnv nil) x
  val format_foreignFunTy =
      fn btvEnv => fn x => format_foreignFunTy (makeEnv btvEnv) x
  val format_kind =
      fn (btvEnv, tyvar) => fn x =>
         format_tyvarWithKind (makeEnv btvEnv, tyvar) x

  (*% *)
  type btvEnv =
       (*% @format(x xs) *)
       kind BoundTypeVarID.Map.map

  (* general formatter for btvEnv *)
  fun format_btvEnv btvEnv btvMap =
      let
        val btvEnv = TermFormat.extendBtvEnv btvEnv btvMap
      in
        TermFormat.formatBtvEnv
          (fn tyvar => format_kind (btvEnv, tyvar))
          btvEnv
          btvMap
      end

  (* general formatter for btvEnv *)
  fun format_btvEnvWithType btvEnv btvMap =
      let
        val btvEnv = TermFormat.extendBtvEnv btvEnv btvMap
      in
        TermFormat.formatBtvEnvWithType
          (fn tyvar => format_kind (btvEnv, tyvar))
          btvEnv
          btvMap
      end

  (*%
   * @formatter(VarID.id)  VarID.format_id
   *)
  (*%
   * @prefix formatWithType_
   * @params(btvEnv)
   * @formatter(VarID.id)  VarID.format_id
   * @formatter(longsymbol) format_longsymbol
   * @formatter(ty) formatWithType_ty
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   *)
  type varInfo
    = (*%
       * @format({path, id, ty, opaque})  path
       *)
      (*%
       * @prefix formatWithType_
       * @format({path, id, ty, opaque})
       * L2{ path "(" id ")" +1 ":" +d ty()(btvEnv) opaque()("(opaque)",)}
       *)
      {path:longsymbol, id:VarID.id, ty:ty, opaque:bool}

  (*% *)
  (*%
   * @prefix formatWithType_
   * @params(btvEnv)
   * @formatter(longsymbol) format_longsymbol
   * @formatter(ty) format_ty
   *)
  type exVarInfo
    = (*%
       * @format({path, ty}) path
       *)
      (*%
       * @prefix formatWithType_
       * @format({path, ty})
       * L2{ path +1 ":" +d ty()(btvEnv) }
       *)
      {path:longsymbol, ty:ty}

  (*%
   * @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
   *)
  (*%
   * @prefix formatWithType_
   * @params(btvEnv)
   * @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
   * @formatter(ty) format_ty
   *)
  type primInfo
    = (*% @format({primitive, ty}) primitive *)
      (*%
       * @prefix formatWithType_
       * @format({primitive, ty})
       * L2{ primitive +1 ":" +d ty()(btvEnv) }
       *)
      {primitive : BuiltinPrimitive.primitive, ty : ty}

  (*% @formatter(OPrimID.id)  OPrimID.format_id  *)
  type oprimInfo
    = (*% @format({path, id, ty}) path *)
      (* ty is the polytype as a function *)
      {ty : ty, path: longsymbol, id : OPrimID.id}

  (*%
     @params(btvEnv)
     @formatter(ConID.id)  ConID.format_id
   *)
  type conInfo
    = (*% @format({path, ty, id}) path *)
      (* @format({path, ty, id}) path "(" id ")" + ":" + ty()(btvEnv) *)
      (* ty is the type as a function *)
      {path: longsymbol, ty: ty, id: ConID.id}

  (*% 
      @formatter(ExnID.id)  ExnID.format_id
   *)
  type exnInfo
    = (*% @format({path, ty, id})  path "(" id ")" *)
      (* ty is the type as a function *)
      {path: longsymbol, ty: ty, id: ExnID.id}

  (*% 
   *)
  type exExnInfo
    = (*% @format({path, ty})  path  *)
      (* ty is the type as a function *)
      {path: longsymbol, ty: ty}

  val univKind = {kind = KIND {tvarKind = UNIV, dynKind = false, reifyKind = false, subkind = ANY, eqKind = NONEQ}, utvarOpt = NONE: utvar option}
  val jsonKind = {kind = KIND {tvarKind = UNIV, dynKind = false, reifyKind = false, subkind = JSON, eqKind = NONEQ}, utvarOpt = NONE: utvar option}
  val joinKind  = {kind = KIND {tvarKind = UNIV, dynKind = true, reifyKind = false, subkind = JSON, eqKind = NONEQ}, utvarOpt = NONE: utvar option}
  val jsonAtomicKind = {kind = KIND {tvarKind = UNIV, dynKind = false, reifyKind = false, subkind = JSON_ATOMIC, eqKind = NONEQ}, utvarOpt = NONE: utvar option}
  val joinAtomicKind  = {kind = KIND {tvarKind = UNIV, dynKind = true, reifyKind = false, subkind = JSON_ATOMIC, eqKind = NONEQ}, utvarOpt = NONE: utvar option}
  val emptyRecordKind = {kind = KIND {tvarKind = REC (RecordLabel.Map.empty), dynKind = false, reifyKind = false,
                         subkind = ANY, eqKind = NONEQ}, utvarOpt = NONE: utvar option}
  val dynamicKind = {kind = KIND {tvarKind = UNIV, dynKind = true, reifyKind = false, subkind = JSON, eqKind = NONEQ}, utvarOpt = NONE: utvar option}
  val reifyKind = {kind = KIND {tvarKind = UNIV, dynKind = false, reifyKind = true, subkind = ANY, eqKind = NONEQ}, utvarOpt = NONE: utvar option}

  val kindedTyvarList =
      ref nil : tvState ref list ref

  fun newTvStateRef {lambdaDepth, kind, utvarOpt} =
      let
        val newTyvarID = FreeTypeVarID.generate ()
        val newTv =
            ref (TVAR {lambdaDepth = lambdaDepth,
                       id = newTyvarID,
                       kind = kind,
                       utvarOpt = utvarOpt})
        val _ = kindedTyvarList := newTv::(!kindedTyvarList)
      in
        newTv
      end

  fun newty {kind, utvarOpt} =
      TYVARty (newTvStateRef {lambdaDepth = infiniteDepth,
                              kind = kind,
                              utvarOpt = utvarOpt})

  fun newUtvar (lambdaDepth, eqKind, utvar:utvar) =
      newTvStateRef {lambdaDepth = lambdaDepth,
                     kind = KIND {tvarKind = UNIV,
                                  eqKind = eqKind,
                                  dynKind = false,
                                  reifyKind = false,
                                  subkind = ANY},
                     utvarOpt = SOME utvar}

  fun newtyRaw {lambdaDepth, kind, utvarOpt} =
      TYVARty(newTvStateRef {lambdaDepth = lambdaDepth,
                             kind = kind,
                             utvarOpt = utvarOpt})

  fun newtyWithLambdaDepth (lambdaDepth, {kind, utvarOpt}) =
      TYVARty(newTvStateRef {lambdaDepth=lambdaDepth,
                             kind=kind,
                             utvarOpt=utvarOpt})

  fun printTy ty =
      let
        (* val print = fn s => if !Bug.debugPrint then print s else () *)
      in
        print (Bug.prettyPrint (formatWithType_ty nil ty))
      end
  fun tyToString ty = Bug.prettyPrint (format_ty nil ty)
  fun singletonTyToString ty = Bug.prettyPrint (format_singletonTy nil ty)
  fun singletonTyWithTypeToString ty = Bug.prettyPrint (formatWithType_singletonTy nil ty)
  fun tyWithTypeToString ty = Bug.prettyPrint (formatWithType_ty nil ty)
  fun btvEnvToString x = Bug.prettyPrint (format_btvEnv nil x)
  fun btvEnvWithTypeToString x = Bug.prettyPrint (format_btvEnvWithType nil x)

end

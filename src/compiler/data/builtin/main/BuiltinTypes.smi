_require local "../../../../basis.smi"
_require local "../../../../smlformat-lib.smi"
_require local "../../../data/symbols/main/Loc.ppg.smi"
_require local "../../../data/symbols/main/RecordLabel.smi"
_require local "../../../extensions/debug/main/Bug.ppg.smi"
_require local "../../../compilerIRs/idcalc/main/EvalIty.smi"
_require local "./BuiltinTypeNames.ppg.smi"

_require "../../../data/symbols/main/Symbol.ppg.smi"
_require "../../../libs/ids/main/LocalID.smi"
_require "../../../compilerIRs/idcalc/main/IDCalc.ppg.smi"
_require "../../types/main/Types.ppg.smi"

structure BuiltinTypes =
struct

  type tstrInfo =  {tfun:IDCalc.tfun, varE:IDCalc.varE, formals:IDCalc.formals, conSpec:IDCalc.conSpec}

  val runtimeTyOfConspec : 'a option SymbolEnv.map -> IDCalc.runtimeTy

  val findTstrInfo : string -> tstrInfo option

  val intTstrInfo : tstrInfo
  val intTyCon : Types.tyCon
  val intITy : IDCalc.ty 
  val intTy : Types.ty

  val indexTstrInfo : tstrInfo
  val indexTyCon : Types.tyCon
  val indexITy : IDCalc.ty 
  val indexTy : Types.ty

  val int8TstrInfo : tstrInfo
  val int8TyCon : Types.tyCon
  val int8ITy : IDCalc.ty 
  val int8Ty : Types.ty

  val int16TstrInfo : tstrInfo
  val int16TyCon : Types.tyCon
  val int16ITy : IDCalc.ty 
  val int16Ty : Types.ty

  val int64TstrInfo : tstrInfo
  val int64TyCon : Types.tyCon
  val int64ITy : IDCalc.ty 
  val int64Ty : Types.ty
       
  val intInfTstrInfo : tstrInfo
  val intInfTyCon : Types.tyCon
  val intInfITy : IDCalc.ty
  val intInfTy : Types.ty
       
  val wordTstrInfo : tstrInfo
  val wordTyCon : Types.tyCon
  val wordITy : IDCalc.ty
  val wordTy : Types.ty

  val word8TstrInfo : tstrInfo
  val word8TyCon : Types.tyCon
  val word8ITy : IDCalc.ty
  val word8Ty : Types.ty
       
  val word16TstrInfo : tstrInfo
  val word16TyCon : Types.tyCon
  val word16ITy : IDCalc.ty
  val word16Ty : Types.ty
       
  val word64TstrInfo : tstrInfo
  val word64TyCon : Types.tyCon
  val word64ITy : IDCalc.ty
  val word64Ty : Types.ty
       
  val charTstrInfo : tstrInfo
  val charTyCon : Types.tyCon
  val charITy : IDCalc.ty
  val charTy : Types.ty
       
  val stringTstrInfo : tstrInfo
  val stringTyCon : Types.tyCon
  val stringITy : IDCalc.ty
  val stringTy : Types.ty
       
  val realTstrInfo : tstrInfo
  val realTyCon : Types.tyCon
  val realITy : IDCalc.ty
  val realTy : Types.ty
       
  val real32TstrInfo : tstrInfo
  val real32TyCon : Types.tyCon
  val real32ITy : IDCalc.ty
  val real32Ty : Types.ty
       
  val unitTstrInfo : tstrInfo
  val unitTyCon : Types.tyCon
  val unitITy : IDCalc.ty
  val unitTy : Types.ty
       
  val ptrTstrInfo : tstrInfo
  val ptrTyCon : Types.tyCon

  val codeptrTstrInfo : tstrInfo
  val codeptrTyCon : Types.tyCon
  val codeptrTy : Types.ty
       
  val arrayTstrInfo : tstrInfo
  val arrayTyCon : Types.tyCon
      
  val vectorTstrInfo : tstrInfo
  val vectorTyCon : Types.tyCon
       
  val boxedTstrInfo : tstrInfo
  val boxedTyCon : Types.tyCon
  val boxedITy : IDCalc.ty
  val boxedTy : Types.ty
       
  val exnTstrInfo : tstrInfo
  val exnTyCon : Types.tyCon
  val exnITy : IDCalc.ty
  val exnTy : Types.ty
       
  val exntagTstrInfo : tstrInfo
  val exntagTyCon : Types.tyCon
  val exntagITy : IDCalc.ty
  val exntagTy : Types.ty
       
  val contagTstrInfo : tstrInfo
  val contagTyCon : Types.tyCon
  val contagITy : IDCalc.ty
  val contagTy : Types.ty

  val refTstrInfo : tstrInfo
  val refTyCon : Types.tyCon
  val refICConInfo : IDCalc.conInfo
  val refTPConInfo : Types.conInfo

  val boolTstrInfo : tstrInfo
  val boolTyCon : Types.tyCon
  val boolITy : IDCalc.ty
  val boolTy : Types.ty
  val trueICConInfo : IDCalc.conInfo
  val trueTPConInfo : Types.conInfo
  val falseTPConInfo : Types.conInfo

  val listTstrInfo : tstrInfo
  val listTyCon : Types.tyCon
  val listTy : Types.ty
  val consICConInfo : IDCalc.conInfo
  val consTPConInfo : Types.conInfo
  val nilICConInfo : IDCalc.conInfo
  val nilTPConInfo : Types.conInfo

  val optionTstrInfo : tstrInfo
  val optionTyCon : Types.tyCon
  val SOMEICConInfo : IDCalc.conInfo
  val SOMETPConInfo : Types.conInfo
  val NONEICConInfo : IDCalc.conInfo
  val NONETPConInfo : Types.conInfo

  val BindExExn : Types.exExnInfo
  val MatchExExn : Types.exExnInfo
  val SubscriptExExn : Types.exExnInfo
  val SizeExExn : Types.exExnInfo
  val OverflowExExn : Types.exExnInfo
  val DivExExn : Types.exExnInfo
  val DomainExExn : Types.exExnInfo
  val FailExExn : Types.exExnInfo
  val ChrExExn : Types.exExnInfo

(*
  val builtinConEnv : unit -> IDCalc.conInfo ConID.Map.map
*)
end

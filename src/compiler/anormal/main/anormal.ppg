(**
 * A-Normal form.
 * @copyright (c) 2006, Tohoku University.
 * @author NGUYEN Huu-Duc
 * @version $Id: anormal.ppg,v 1.27 2007/02/22 08:13:41 katsu Exp $ 
 *)

structure ANormal = struct

  type loc = Loc.loc

  (*%
   * @formatter(Absyn.callingConvention) Absyn.format_callingConvention
   *)
  type callingConvention = Absyn.callingConvention

  (*%
   * @formatter(idFormat) ID.format_id
   *)
  type id =
       (*%
        * @format(id:idFormat) id
        *)
       ID.id
       
  (*% *)
  type tyvarId = 
       (*%
        * @format(id) "t" id
        *)
       int

  (*% *)
  datatype ty =
	   (*%
	    * @format "BOXED"
	    *)
           BOXED
         | (*%
	    * @format "ATOM"
	    *)
           ATOM
         | (*%
	    * @format "DOUBLE"
	    *)
           DOUBLE
         | (*%
	    * @format(tyId) tyId
	    *)
           TYVAR of tyvarId 
    
  (*% 
   *  @params(id)
   *)
  datatype varKind =
	   (*%
	    * @format "arg(" id ")"
	    *)
	   ARG 
         | (*%
	    * @format id
	    *)
           LOCAL

  (*% *)
  type varInfo = 
       (*%
        * @format({id, displayName, ty, varKind})  varKind()(id)
        *)
       {id:id, displayName:string, ty:ty, varKind:varKind}

  (*% *)
  type varInfoWithType = 
       (*%
        * @format({id, displayName, ty, varKind})  varKind()(id) + ":" + ty
        *)
       {id:id, displayName:string, ty:ty, varKind:varKind}

  (*% *)
  type varInfoWithoutKind = 
       (*%
        * @format({id, displayName, ty, varKind})  id
        *)
       {id:id, displayName:string, ty:ty, varKind:varKind}
       
  (*% *)
  type primInfo =
       (*%
        * @format({name,ty}) name
        *)
       {name:string, ty:ty}

  (*%
   * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   *)
  datatype constant = datatype ConstantTerm.constant

  (*%
   *
   * @formatter(formatConst) ConstantTerm.format_constant
   * @formatter(formatListWithEnclosure) SmlppgUtil.formatListWithEnclosure
   * @formatter(Word32.word) SmlppgUtil.format_word32
   * @formatter(formatUInt32) BasicTypeFormatters.format_UInt32
   *)
  datatype anexp =
	   (*%
      	    * @format({value:const:formatConst, loc}) const
      	    *)
	   ANCONSTANT of {value :constant, loc : loc}

         | (*% 
            * @format({varInfo:id:varInfo, loc}) id 
	    *)	 
	   ANVAR of {varInfo : varInfo, loc : loc}

         | (*% 
            * @format({nestLevel, offset, loc}) "env[" nestLevel "," offset "]" 
	    *)	 
	   ANENVACC of 
             {
              nestLevel : Word32.word, 
              offset : Word32.word, 
              loc : loc
             }

         | (*% 
            * @format({nestLevel, indirectOffset, loc}) "env_ind[" nestLevel "," indirectOffset "]" 
	    *)	 
	   ANENVACCINDIRECT of 
             {
              nestLevel : Word32.word, 
              indirectOffset : Word32.word, 
              loc : loc
             }

         | (*%
            * @format({
            *          arrayIndex:index:formatUInt32, 
            *          offset:offset:formatUInt32, 
            *          loc
            *         }) 
            * "GetGlobalValue(" index "," offset ")"
            *)
            ANGETGLOBALVALUE of 
              {
               arrayIndex : BasicTypes.UInt32, 
               offset : BasicTypes.UInt32, 
               loc: loc
              }
            
         | (*%
            * @format({arrayIndex:index:formatUInt32,offset:offset:formatUInt32,valueExp:exp,loc}) 
            * "SetGlobalValue((" index "," offset ") = " exp ")"  
            *)
           ANSETGLOBALVALUE of 
             {
              arrayIndex : BasicTypes.UInt32, 
              offset : BasicTypes.UInt32, 
              valueExp: anexp, 
              loc :loc
             }

         | (*%
            * @format({arrayIndex:index:formatUInt32,size:size:formatUInt32,loc}) 
            * "InitialArrayUnboxed(" index "," size ")"
            *)
           ANINITARRAYUNBOXED of 
             {
              arrayIndex : BasicTypes.UInt32, 
              size : BasicTypes.UInt32, 
              loc:loc
             }

         | (*%
            * @format({arrayIndex:index:formatUInt32,size:size:formatUInt32,loc}) 
            * "InitialArrayBoxed(" index "," size ")"
            *)
           ANINITARRAYBOXED of 
             {
              arrayIndex : BasicTypes.UInt32, 
              size : BasicTypes.UInt32, 
              loc:loc
             }

         | (*%
            * @format({arrayIndex:index:formatUInt32,size:size:formatUInt32,loc}) 
            * "InitialArrayDouble(" index "," size ")"
            *)
           ANINITARRAYDOUBLE of 
             {
              arrayIndex : BasicTypes.UInt32, 
              size : BasicTypes.UInt32, 
              loc:loc
             }

         | (*%
            * @format({
            *          primOp : prim,
            *          argExpList :exp exps:formatListWithEnclosure,
            *          loc
            *         })
            * {prim {exps(exp)(",","(",")")}}
            *)
           ANPRIMAPPLY of 
             {
              primOp : primInfo, 
              argExpList : anexp list, 
              loc : loc
             }

         | (*%
            * @format({
            *          primOp : prim,
            *          argValue1,
            *          argExp2,
            *          loc
            *         })
            * {prim "(" argValue1 "," argExp2 ")"}
            *)
           ANPRIMAPPLY_1 of 
             {
              primOp : primInfo, 
              argValue1 : constant,
              argExp2 : anexp,
              loc : loc
             }

         | (*%
            * @format({
            *          primOp : prim,
            *          argExp1,
            *          argValue2,
            *          loc
            *         })
            * {prim "(" argExp1 "," argValue2 ")"}
            *)
           ANPRIMAPPLY_2 of 
             {
              primOp : primInfo, 
              argExp1 : anexp,
              argValue2 : constant,
              loc : loc
             }

         | (*%
            * @format({
            *          funExp,
            *          argExpList : exp exps:formatListWithEnclosure,
            *          argTyList : ty tys:formatListWithEnclosure,
            *          convention,
            *          loc
            *         })
            * R1{d
            *     {
            *       convention + funExp
            *       !N0{tys(ty)(",","{","}")} 1
            *       {exps(exp)(","1,"(",")")}
            *     }
            *   }
            *)
           ANFOREIGNAPPLY of 
             {
              funExp : anexp,
              argExpList : anexp list,
              argTyList : ty list,
              convention : callingConvention,
              loc : loc
             }

         | (*%
            * @format({funExp,
            *          argTyList: argTy argTys:formatListWithEnclosure, resultTy,
            *          loc})
            * L10{ "CALLBACK(" funExp
            *       +1 ":" + {argTys(argTy)(","+2,"{","}") +2
            *         "->" +2 resultTy}
            * ")" }
            *)
           ANEXPORTCALLBACK of 
             {
               funExp : anexp,
	       argTyList : ty list,
	       resultTy : ty,
               loc: loc
             }

         | (*%
            * @format({funExp, argExpList:exp exps, argSizeList: size sizes, loc}) 
            *   "Apply(" funExp "," + exps(exp)(",") ")"
            *)
           ANAPPLY of 
             {
              funExp : anexp, 
              argExpList : anexp list, 
              argSizeList : anexp list,
              loc : loc
             }

         | (*%
            * @format({funLabel, envExp, argExpList : exp exps, argSizeList: size sizes, loc}) 
            * "Call(" funLabel "," + envExp + "," + exps(exp)(",") ")"
            *)
           ANCALL of 
             {
              funLabel : id,
              envExp : anexp,
              argExpList : anexp list, 
              argSizeList : anexp list,
              loc : loc
             }

         | (*%
            * @format({
            *          bitmapExp : bitmap,
            *          totalSizeExp : totalsize,
            *          fieldList : exp record,
            *          fieldSizeList : size sizes,
            *          loc
            *         })
            *  "(bitmap=" bitmap ";size=" totalsize ";(" + record(exp)(","+) ");(" + sizes(size)(","+) "))"
            *)
           ANRECORD of 
             {
              bitmapExp : anexp,
              totalSizeExp : anexp,
              fieldList : anexp list,
              fieldSizeList : anexp list,
              loc : loc
             }

         | (*%
            * @format({bitmapExp, sizeExp, initialValue, loc}) 
                     "array[bitmap=" bitmapExp ",size=" sizeExp " of " initialValue "]"
            *)
           ANARRAY of 
             {
              bitmapExp : anexp,
              sizeExp : anexp,
              initialValue : anexp,
              loc : loc
             }

         | (*%
	    * @format({recordExp, nestLevel, offset, elementExp, loc})
            * recordExp "[(" nestLevel "," offset ") = " elementExp "]"
	    *)
           ANMODIFY of 
             {
              recordExp : anexp,
              nestLevel : anexp,
              offset : anexp,
              elementExp : anexp,
              loc : loc
             }

         | (*%
	    * @format({exceptionExp, loc}) "raise" + exceptionExp
	    *)
           ANRAISE of {exceptionExp : anexp, loc : loc}

         | (*%
	    * @format({mainExp, exnVar, handler, loc})
                     2["handle" 1 N0{mainExp}] +1 "with letexp" + exnVar + "in" + 2[1 handler]
	    *)
           ANHANDLE of 
             {
              mainExp : anexp,
              exnVar : varInfo,
              handler :  anexp,
              loc : loc
             }

         | (*%
            * @format({funLabel, env, loc }) "Closure(" funLabel "," env ")"
            *)
	   ANCLOSURE of {funLabel : id, env : anexp, loc : loc}

         | (*%
            * @format({switchExp, branches : rule rules, defaultExp, loc})
                     {"switch" + switchExp 
		                     1 "of" + rules(rule)(+1 " | ")
                      +1 " | _ =>"  + {defaultExp} }
            * @format:rule(con * exp) con + "=>" + {exp}
	    *)
           ANSWITCH of 
             {
              switchExp : anexp,
              branches : (constant * anexp) list,
              defaultExp : anexp,
              loc : loc
             }

         | (*%
            * @format({boundVar:id:varInfoWithType, boundExp, mainExp, loc})
                     "let" + id + "=" 2[ +d boundExp ] +  "in" +1  
                                                                    mainExp
            *)
           ANLET of 
             {
              boundVar : varInfo, 
              boundExp : anexp, 
              mainExp : anexp, 
              loc : loc
             }

         | (*%
            * @format({funLabel, funInfo, funBody, mainExp, loc})
                   "label" + funLabel + "=" 
		     2[1
		       {"{"
		         2[1
                           funInfo
			   "code = " {funBody}
			   ]
			1 "}"+}
		       ] 1 "in" 
		   1  mainExp
            *)
           ANLETLABEL of 
             {
              funLabel : id, 
              funInfo : funInfo, 
              funBody : anexp,
              mainExp : anexp,
              loc : loc
             }

         | (*%
	    * @format({recbindList : bind binds, mainExp, loc})
	    *  "let" + {"rec" + binds(bind)(+1 "and" +)} +1 "in" 1 mainExp
	    * @format:bind({funLabel, funInfo, body}) 
	      funLabel + "=" 
	        2[1
		  {"{"
		    2[1
		      funInfo
		      "code = " 2[1 body]] 1
		     "}"+
                   }
		 ] 
	    *)
           ANVALREC of 
             {
              recbindList : {funLabel : id, funInfo : funInfo, body : anexp} list,
              mainExp : anexp,
              loc : loc
             }

         | (*%
            * @format({funLabel, argExpList : exp exps, argSizeList : size sizes, loc}) 
            * "RecCall" +d {"("  funLabel "," {exps(exp)(",")} ")"}
            *)
           ANRECCALL of 
             {
              funLabel : id, 
              argExpList : anexp list, 
              argSizeList : anexp list,
              loc : loc
             }

         | (*%
	    * @format({funLabel, loc}) "RecClosure(" + funLabel ")"
	    *)
           ANRECCLOSURE of {funLabel :id, loc : loc}

         | (*%
	    * @format(loc) "Return"
	    *)
           ANEXIT of loc

         | (*%
            * @format({blockExp, nestLevel, offset, loc}) blockExp "[" nestLevel "," offset "]"
            *)
           ANGETFIELD of 
             {
              blockExp : anexp,
              nestLevel : anexp,
              offset : anexp,
              loc : loc
             }

         | (*%
            * @format({blockExp, nestLevel, offset, valueExp, loc})  
	           "SetField" + blockExp "[" nestLevel "," offset "]" "=" valueExp 
            *)
           ANSETFIELD of 
             {
              blockExp : anexp,
              nestLevel : anexp,
              offset : anexp,
              valueExp : anexp,
              loc : loc
             }

  withtype funInfo =
           (*% 
	    * @format({tyvars:tyvar tyvars, 
                       bitmapFree,
                       tagArgs: tagArg tagArgs, 
                       sizevals:size sizes,
                       args:var:varInfoWithType vars, 
                       resultTy}) 
	             "tyvars = (" tyvars(tyvar)(","+) ")," +1
                     "bitmapFree = " bitmapFree "," +1
	             "tagArgs = (" tagArgs(tagArg)(","+) ")," +1
	             "sizevals = (" sizes(size)(","+) ")," +1
                     "args = (" vars(var)(","+) ")," +1
                     "resultTy = " resultTy  "," +1
	    *)
           {
            tyvars:tyvarId list,
            bitmapFree: anexp,
	    tagArgs: anexp list,
            sizevals: anexp list,
	    args:varInfo list,
	    resultTy: ty
	   } 

end

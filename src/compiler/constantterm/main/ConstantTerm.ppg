(** * constant terms.
 * @copyright (c) 2006, Tohoku University.
 * @author Atsushi Ohori
 * @author YAMATODANI Kiyoshi
 * @version $Id: ConstantTerm.ppg,v 1.1 2008/11/19 19:57:44 ohori Exp $
 *)
structure ConstantTerm =
struct

(*
  structure PT = PredefinedTypes
*)
  structure BT = BuiltinTypes
  structure T = Types
  structure RC = RecordCalc
  structure TU = TypesBasics
  structure UE = UserError
  structure A = Absyn

  fun toRC {longsymbol, id, ty} =
      {path=Symbol.longsymbolToLongid longsymbol,
       id = id,
       ty = ty}
  fun toRCEx {longsymbol, ty} =
      {path=Symbol.longsymbolToLongid longsymbol,
       ty = ty}

 (* for debugging *)
  fun printType ty =
      print (Bug.prettyPrint (Types.format_ty nil ty) ^ "\n")

  (*%
   * @formatter(Int32.int) TermFormat.format_Int32_dec_ML
   * @formatter(Int64.int) TermFormat.format_Int64_dec_ML
   * @formatter(Word32.word) TermFormat.format_Word32_hex_ML
   * @formatter(Word64.word) TermFormat.format_Word64_hex_ML
   * @formatter(Word8.word) TermFormat.format_Word8_hex_ML
   * @formatter(IntInf.int) TermFormat.format_IntInf_dec_ML
   * @formatter(stringLiteral) TermFormat.format_string_ML
   * @formatter(charLiteral) TermFormat.format_char_ML
   *)
  datatype constant 
    = (*%
       * @format(value) value
       *)
      INT32 of Int32.int
    | (*%
       * @format(value) value
       *)
      INT64 of Int64.int
    | (*%
       * @format(value) value
       *)
      INTINF of IntInf.int
    | (*%
       * @format(value) value
       *)
      WORD32 of Word32.word
    | (*%
       * @format(value) value
       *)
      WORD64 of Word64.word
    | (*%
       * @format(value) value
       *)
      WORD8 of Word8.word
    | (*%
       * @format(value) value:stringLiteral
       *)
      STRING of string
    | (*%
       * @format(value) value
       *)
      REAL of string
    | (*%
       * @format(value) value "f"
       *)
      FLOAT of string
    | (*%
       * @format(value) value:charLiteral
       *)
      CHAR of char
    | (*%
       * @format(value) "()"
       *)
      UNIT 
    | (*%
       * @format "NULLPTR"
       *)
      NULLPOINTER   (* null C pointer *)
    | (*%
       * @format "NULLBOXED"
       *)
      NULLBOXED     (* null pointer (boxed type) *)
    | (*%
       * @format(x) "contag(" x ")"
       *)
      CONTAG of Word32.word

  (*% *)
  exception
  (*%
   * @format "too" +d "large" +d "constant"
   *)
  TooLargeConstant

  fun compare (x, y) =
      let
        fun order const =
            case const of
              INT32 _ => 0
            | INT64 _ => 1
            | INTINF _ => 2
            | WORD32 _ => 3
            | WORD64 _ => 4
            | WORD8 _ => 5
            | STRING _ => 6
            | REAL _ => 7
            | FLOAT _ => 8
            | CHAR _ => 9
            | UNIT => 10
            | NULLPOINTER => 11
            | NULLBOXED => 12
            | CONTAG _ => 13
      in
        case (x, y) of
          (INT32 x, INT32 y) => Int32.compare (x, y)
        | (INT32 _, _) => Int.compare (order x, order y)
        | (INT64 x, INT64 y) => Int64.compare (x, y)
        | (INT64 _, _) => Int.compare (order x, order y)
        | (INTINF x, INTINF y) => IntInf.compare (x, y)
        | (INTINF _, _) => Int.compare (order x, order y)
        | (WORD32 x, WORD32 y) => Word32.compare (x, y)
        | (WORD32 _, _) => Int.compare (order x, order y)
        | (WORD64 x, WORD64 y) => Word64.compare (x, y)
        | (WORD64 _, _) => Int.compare (order x, order y)
        | (WORD8 x, WORD8 y) => Word8.compare (x, y)
        | (WORD8 _, _) => Int.compare (order x, order y)
        | (STRING x, STRING y) => String.compare (x, y)
        | (STRING _, _) => Int.compare (order x, order y)
        | (REAL x, REAL y) => String.compare (x, y)
        | (REAL _, _) => Int.compare (order x, order y)
        | (FLOAT x, FLOAT y) => String.compare (x, y)
        | (FLOAT _, _) => Int.compare (order x, order y)
        | (CHAR x, CHAR y) => Char.compare (x, y)
        | (CHAR _, _) => Int.compare (order x, order y)
        | (UNIT, UNIT) => EQUAL
        | (UNIT, _) => Int.compare (order x, order y)
        | (NULLPOINTER, NULLPOINTER) => EQUAL
        | (NULLPOINTER, _) => Int.compare (order x, order y)
        | (NULLBOXED, NULLBOXED) => EQUAL
        | (NULLBOXED, _) => Int.compare (order x, order y)
        | (CONTAG x, CONTAG y) => Word32.compare (x, y)
        | (CONTAG _, _) => Int.compare (order x, order y)
      end

  local

    fun decomposePolyTy (T.POLYty {boundtvars, body}) = (boundtvars, body)
      | decomposePolyTy ty = (BoundTypeVarID.Map.empty, ty)

    fun polyTy (btvEnv, bodyTy) =
        if BoundTypeVarID.Map.isEmpty btvEnv
        then bodyTy else T.POLYty {boundtvars=btvEnv, body=bodyTy}

    fun overloadTy tys =
        let
          val (btvEnvs, tys) = ListPair.unzip (map decomposePolyTy tys)
          val btvEnv = foldl (BoundTypeVarID.Map.unionWith
                                (fn _ => raise Bug.Bug "unionTys"))
                             BoundTypeVarID.Map.empty
                             btvEnvs
        in
          case tys of
            [ty] => polyTy (btvEnv, ty)
          | _ =>
            let
              val btv = BoundTypeVarID.generate ()
              val btvKind = {tvarKind = T.OCONSTkind tys, eqKind = A.NONEQ}
              val btvEnv = BoundTypeVarID.Map.insert (btvEnv, btv, btvKind)
            in
              T.POLYty {boundtvars = btvEnv, body = T.BOUNDVARty btv}
            end
        end

    fun sqlValueTy elemTy =
        let
          val (btvEnv, elemTy) = decomposePolyTy elemTy
          val btv = BoundTypeVarID.generate ()
          val btvKind = {tvarKind = T.UNIV, eqKind = A.NONEQ}
          val btvEnv = BoundTypeVarID.Map.insert (btvEnv, btv, btvKind)
          val tyCon = BT.valueTyCon
        in
          T.POLYty {boundtvars = btvEnv,
                    body = T.CONSTRUCTty {tyCon = tyCon,
                                          args = [elemTy, T.BOUNDVARty btv]}}
        end

    fun optionTy elemTy =
        let
          val (btvEnv, elemTy) = decomposePolyTy elemTy
          val tyCon = BT.optionTyCon
        in
          polyTy (btvEnv, T.CONSTRUCTty {tyCon = tyCon, args = [elemTy]})
        end

    fun polyPtrTy () =
        let
          val btv = BoundTypeVarID.generate ()
          val btvKind = {tvarKind = T.UNIV, eqKind = A.NONEQ}
          val btvEnv = BoundTypeVarID.Map.singleton (btv, btvKind)
        in
          polyTy (btvEnv, T.CONSTRUCTty {tyCon = BT.ptrTyCon,
                                         args = [T.BOUNDVARty btv]})
        end

    fun intType () =
        overloadTy
        [
          BT.intTy,
          BT.int64Ty,
          BT.intInfTy,
          sqlValueTy (overloadTy [BT.intTy, optionTy BT.intTy])
        ]

    fun wordType () =
        overloadTy
        [
          BT.wordTy,
          BT.word64Ty,
          BT.word8Ty,
          sqlValueTy (overloadTy [BT.wordTy, optionTy BT.wordTy])
        ]

    fun stringType () =
        overloadTy
        [
          BT.stringTy,
          sqlValueTy (overloadTy [BT.stringTy, optionTy BT.stringTy])
        ]

    fun realType () =
        overloadTy
        [
          BT.realTy,
          BT.real32Ty,
          sqlValueTy (overloadTy [BT.realTy, optionTy BT.realTy])
        ]

    fun charType () =
        overloadTy
        [
          BT.charTy,
          sqlValueTy (overloadTy [BT.charTy, optionTy BT.charTy])
        ]

    fun unitType () =
        BT.unitTy

    fun nullType () =
        overloadTy
        [
(*
          polyPtrTy (),
*)
          T.CONSTRUCTty {tyCon = BT.ptrTyCon, args = [BT.unitTy]},
          BT.boxedTy
        ]
  in
    fun constTy const =
        case const of
          A.INT _ => intType ()
        | A.WORD _ => wordType ()
        | A.STRING _ => stringType ()
        | A.REAL _ => realType ()
        | A.CHAR _ => charType ()
        | A.UNITCONST _ => unitType ()
        | A.NULLCONST _ => nullType ()
  end

  fun typeOf const =
      case const of
        INT32 _ => BT.intTy
      | INT64 _ => BT.int64Ty
      | INTINF _ => BT.intInfTy
      | WORD32 _ => BT.wordTy
      | WORD64 _ => BT.word64Ty
      | WORD8 _ => BT.word8Ty
      | STRING _ => BT.stringTy
      | REAL _ => BT.realTy
      | FLOAT _ => BT.real32Ty
      | CHAR _ => BT.charTy
      | UNIT => BT.unitTy
      | NULLPOINTER => T.CONSTRUCTty {tyCon = BT.ptrTyCon, args = []}
      | NULLBOXED => BT.boxedTy
      | CONTAG _ => BT.contagTy

  local
    fun sqlInt x =
        if x < 0 then "-" ^ (Int32.toString (~x)) else Int32.toString x
    fun sqlWord x = Word32.fmt StringCvt.DEC x
    fun sqlReal x = String.translate (fn #"~" => "-" | x => str x) x
    fun sqlString x =
        "'" ^ String.translate (fn #"'" => "''" | x => str x) x ^ "'"
    fun sqlChar x = sqlString (str x)
  in
  (**
   * fix the form of constant expression according to its type.
   *)
  fun fixConst {constTerm : constant -> 'exp,
                recordTerm : 'exp RecordLabel.Map.map * Types.ty -> 'exp,
                conTerm : {con: RC.conInfo, instTyList: Types.ty list,
                           arg: 'exp option} -> 'exp}
               (const, ty) =
      let
        datatype constTy =
                 INT32ty | INT64ty | WORD32ty | WORD64ty | CHARty | STRINGty 
               | REALty | FLOATty
               | INTINFty | WORD8ty | UNITty | PTRty | BOXEDty
               | OPTIONty of constTy | SQLVALUEty of constTy * T.ty
        fun constTy ty =
            case TU.derefTy ty of
              T.CONSTRUCTty {tyCon={id,...}, args=[]} =>
              if TypID.eq (id, #id BT.intTyCon) then INT32ty
              else if TypID.eq (id, #id BT.int64TyCon) then INT64ty
              else if TypID.eq (id, #id BT.wordTyCon) then WORD32ty
              else if TypID.eq (id, #id BT.word64TyCon) then WORD64ty
              else if TypID.eq (id, #id BT.charTyCon) then CHARty
              else if TypID.eq (id, #id BT.stringTyCon) then STRINGty
              else if TypID.eq (id, #id BT.realTyCon) then REALty
              else if TypID.eq (id, #id BT.real32TyCon) then FLOATty
              else if TypID.eq (id, #id BT.intInfTyCon) then INTINFty
              else if TypID.eq (id, #id BT.word8TyCon) then WORD8ty
              else if TypID.eq (id, #id BT.unitTyCon) then UNITty
              else if TypID.eq (id, #id BT.boxedTyCon) then BOXEDty
              else
                (printType ty;
                 raise Bug.Bug "castConst"
                )
            | T.CONSTRUCTty {tyCon={id,...}, args=[arg]} =>
              if TypID.eq (id, #id BT.ptrTyCon)
              then PTRty
              else if TypID.eq (id,
                                #id (BT.optionTyCon))
              then OPTIONty (constTy arg)
              else (printType ty; raise Bug.Bug "castConst")
            | T.CONSTRUCTty {tyCon={id,...}, args=[arg1, arg2]} =>
              if TypID.eq (id, #id BT.valueTyCon)
              then SQLVALUEty (constTy arg1, arg2)
              else (printType ty; raise Bug.Bug "castConst")
            | _ =>
              (printType ty;
               raise Bug.Bug "castConst")

        fun pairTerm ((e1,t1), (e2,t2)) =
            let
              val ty = T.RECORDty (RecordLabel.tupleMap [t1, t2])
              val exp = recordTerm (RecordLabel.tupleMap [e1, e2], ty)
            in
              (exp, ty)
            end
        fun stringDBIPairTerm (string, dbiTy) =
            pairTerm ((constTerm (STRING string), BT.stringTy),
                      (conTerm {con = toRC BT.DBITPConInfo,
                                instTyList = [dbiTy],
                                arg = NONE},
                       T.CONSTRUCTty
                         {tyCon = BT.dbiTyCon,
                          args = [dbiTy]}))

        fun sqlValue (string as (_, dbiTy)) (exp, valueTy) =
            conTerm {con = toRC BT.VALUETPConInfo,
(* 2013-08-31 ohori bug 266_SQLInsertOption.sml; SQL.Som 1 がbug例外を起こす．
   このハンドコードは，脆弱．型変数の抽象の順序は，型に現れる順．
                     instTyList = [valueTy, dbiTy],
*)
                     instTyList = [dbiTy,valueTy],
                     arg = SOME (#1 (pairTerm (stringDBIPairTerm string,
                                               (exp, valueTy))))}
        fun sqlOptionValue string (exp, valueTy) =
            sqlValue string
                     (conTerm {con = toRC BT.SOMETPConInfo,
                               instTyList = [valueTy],
                               arg = SOME exp},
                      T.CONSTRUCTty
                        {tyCon = BT.optionTyCon,
                         args = [valueTy]})

        fun scanInt scanFn ({radix, digits}, loc) =
            let
              val r =
                  StringCvt.scanString (scanFn radix) digits
                  handle Overflow => raise TooLargeConstant
            in
              case r of
                SOME x => x
              | NONE => raise Bug.Bug "scanInt"
            end

      in
        case (const, constTy ty) of
          (A.INT x, INT32ty) =>
          constTerm (INT32 (scanInt Int32.scan x))
        | (A.INT x, INT64ty) =>
          constTerm (INT64 (scanInt Int64.scan x))
        | (A.INT x, INTINFty) =>
          constTerm (INTINF (scanInt IntInf.scan x))
        | (A.INT x, SQLVALUEty (INT32ty, dbi)) =>
           sqlValue (sqlInt (scanInt Int32.scan x), dbi)
                    (constTerm (INT32 (scanInt Int32.scan x)), BT.intTy)
        | (A.INT x, SQLVALUEty (OPTIONty INT32ty, dbi)) =>
          sqlOptionValue (sqlInt (scanInt Int32.scan x), dbi)
                         (constTerm (INT32 (scanInt Int32.scan x)), BT.intTy)
        | (A.INT _, _) => raise Bug.Bug "fixConst: INT"
        | (A.WORD x, WORD32ty) =>
          constTerm (WORD32 (scanInt Word32.scan x))
        | (A.WORD x, WORD64ty) =>
          constTerm (WORD64 (scanInt Word64.scan x))
        | (A.WORD x, WORD8ty) =>
          constTerm (WORD8 (scanInt Word8.scan x))
        | (A.WORD x, SQLVALUEty (WORD32ty, dbi)) =>
          sqlValue (sqlWord (scanInt Word32.scan x), dbi)
                   (constTerm (WORD32 (scanInt Word32.scan x)), BT.wordTy)
        | (A.WORD x, SQLVALUEty (OPTIONty WORD32ty, dbi)) =>
          sqlOptionValue (sqlWord (scanInt Word32.scan x), dbi)
                         (constTerm (WORD32 (scanInt Word32.scan x)), BT.wordTy)
        | (A.WORD _, _) => raise Bug.Bug "fixConst: WORD"
        | (A.STRING (x, loc), STRINGty) => constTerm (STRING x)
        | (A.STRING (x, loc), SQLVALUEty (STRINGty, dbi)) =>
          sqlValue (sqlString x, dbi) (constTerm (STRING x), BT.stringTy)
        | (A.STRING (x, loc), SQLVALUEty (OPTIONty STRINGty, dbi)) =>
          sqlOptionValue (sqlString x, dbi) (constTerm (STRING x), BT.stringTy)
        | (A.STRING _, _) => raise Bug.Bug "fixConst: STRING"
        | (A.REAL (x, loc), REALty) => constTerm (REAL x)
        | (A.REAL (x, loc), FLOATty) => constTerm (FLOAT x)
        | (A.REAL (x, loc), SQLVALUEty (REALty, dbi)) =>
          sqlValue (sqlReal x, dbi) (constTerm (REAL x), BT.realTy)
        | (A.REAL (x, loc), SQLVALUEty (OPTIONty REALty, dbi)) =>
          sqlOptionValue (sqlReal x, dbi) (constTerm (REAL x), BT.realTy)
        | (A.REAL _, _) => raise Bug.Bug "fixConst: REAL"
        | (A.CHAR (x, loc), CHARty) => constTerm (CHAR x)
        | (A.CHAR (x, loc), SQLVALUEty (CHARty, dbi)) =>
          sqlValue (sqlChar x, dbi) (constTerm (CHAR x), BT.charTy)
        | (A.CHAR (x, loc), SQLVALUEty (OPTIONty CHARty, dbi)) =>
          sqlOptionValue (sqlChar x, dbi) (constTerm (CHAR x), BT.charTy)
        | (A.CHAR _, _) => raise Bug.Bug "fixConst: CHAR"
        | (A.UNITCONST (_, loc), UNITty) => constTerm UNIT
        | (A.UNITCONST _, _) => raise Bug.Bug "fixConst: UNITCONST"
        | (A.NULLCONST _, PTRty) => constTerm NULLPOINTER
        | (A.NULLCONST _, BOXEDty) => constTerm NULLBOXED
        | (A.NULLCONST _, _) => raise Bug.Bug "fixConst: NULLCONST"
      end
  end

end

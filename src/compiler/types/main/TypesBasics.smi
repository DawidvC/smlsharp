_require local "../../../basis.smi"
_require local "../../absyn/main/RecordLabel.smi"
_require "../../../compiler-utils/env/main/IEnv.smi"
_require "../../name/main/LocalID.smi"
_require local "../../control/main/Loc.ppg.smi"
_require local "../../control/main/Bug.ppg.smi"
_require local "../../absyn/main/Symbol.ppg.smi"
_require local "../../absyn/main/Absyn.ppg.smi"
_require local "./OPrimInstMap.smi"
_require "./Types.ppg.smi"
_require "./VarInfoEnv.smi"

structure TypesBasics =
struct
  exception CoerceFun 
  exception CoerceTvarKindToEQ 
  val derefTy : Types.ty -> Types.ty
  val substBTvar : Types.ty BoundTypeVarID.Map.map -> Types.ty -> Types.ty
  val freshSubst : Types.btvEnv -> Types.ty BoundTypeVarID.Map.map
  val freshRigidSubst : Types.btvEnv -> Types.ty BoundTypeVarID.Map.map
  val monoTy : Types.ty -> bool
  val freshRigidInstTy : Types.ty -> Types.ty * Types.constraint list
  val EFTV : Types.ty * Types.constraint list
             -> int * OTSet.set * (Types.tvState ref) IEnv.map
  val adjustDepthInTy : Types.lambdaDepth -> Types.ty -> unit
  val adjustDepthInTvarKind : Types.lambdaDepth -> Types.tvarKind -> unit
  val generalizer : Types.ty * Types.constraint list * Types.lambdaDepth
                    -> {boundEnv: Types.btvEnv, removedTyIds: OTSet.set}
  val performSubst : Types.ty * Types.ty -> unit
  val copyBoundEnv
      : Types.btvEnv -> Types.ty BoundTypeVarID.Map.map * Types.btvEnv
  val coerceFunM
      : Types.ty * Types.ty list 
        -> Types.ty list * Types.ty * Types.ty list *
           Types.constraint list
  val tpappTy : Types.ty * Types.ty list -> Types.ty
  val tyConFromConTy : Types.ty -> Types.tyCon
  val tpappPrimTy :
      {boundtvars: Types.btvEnv, argTyList: Types.ty list, resultTy: Types.ty}
      * Types.ty list
      -> {argTyList: Types.ty list, resultTy: Types.ty}
  val tupleTy : Types.ty list -> Types.ty
end

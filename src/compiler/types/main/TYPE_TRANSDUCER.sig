(**
 * Utility functions which traverse a type expression.
 * @author YAMATODANI Kiyoshi
 * @version $Id: TYPE_TRANSDUCER.sig,v 1.2 2005/03/17 06:17:55 kiyoshiy Exp $
 *)
signature TYPE_TRANSDUCER =
sig

  (***************************************************************************)

  (**
   * produces a new type expression by mapping the function over a tree of
   * the argument type expression in pre-order.
   * @params function ty
   * @param function the visitor function
   * @param ty source type expression
   * @return new type expression generated by mapping the function over
   * the source type expression.
   *)
  val mapTyPreOrder
      : (Types.ty
         -> Types.ty
            * (** true if visit of inner type expression is unnecessary. *)
            bool)
        -> Types.ty
        -> Types.ty

  (**
   * alternative version of mapTy which traverses a type expression in post
   * order.
   *)
  val mapTyPostOrder
      : (Types.ty -> Types.ty) -> Types.ty -> Types.ty

  (**
   * folds the function over a tree of type expression, using the value init
   * as the initial value.
   * @params function initial ty
   * @param function the visitor function
   * @param initial the initial value
   * @param ty source type expression
   * @return new type expression generated by folding the function over
   * the source type expression.
   *)
  val foldTyPreOrder
      : (Types.ty * 'a
         -> 'a
            * (** true if visit of inner type expression is unnecessary. *)
            bool)
        -> 'a
        -> Types.ty
        -> 'a

  (**
   * alternative version of foldTy which traverses a type expression in post
   * order.
   *)
  val foldTyPostOrder
      : (Types.ty * 'a -> 'a) -> 'a -> Types.ty -> 'a

  (**
   * the general traverser.
   * Other functions in this module are defined by using this.
   * @params preVisitor postVisitor initial sourceTy
   * @param preVisitor a visitor invoked before visit of inner type expressions
   * @param postVisitor a visitor invoked after visit of inner type expressions
   * @param initial the initial value passed to visitors.
   * @param sourceTy the soure type expression
   * @return a pair of
   * <ul>
   *   <li>a new type expression obtained by application of preVisitor and
   *      postVisitor.</li>
   *   <li>a result value obtained by application of preVisitor and
   *      postVisitor to the initial value.</li>
   * </ul>
   *)
  val transTy
      : (Types.ty * 'a -> Types.ty * 'a * bool)
        -> (Types.ty * 'a -> Types.ty * 'a)
        -> 'a -> Types.ty -> Types.ty * 'a

  val transTyPreOrder
      : (Types.ty * 'a -> Types.ty * 'a * bool)
        -> 'a -> Types.ty -> Types.ty * 'a

  val transTyPostOrder
      : (Types.ty * 'a -> Types.ty * 'a)
        -> 'a -> Types.ty -> Types.ty * 'a

  (***************************************************************************)

end


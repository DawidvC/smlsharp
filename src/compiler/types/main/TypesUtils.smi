_require "../../../basis.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"
_require "../../name/main/LocalID.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "OPrimInstMap.smi"
_require "Types.ppg.smi"
_require "../../builtin2/main/BuiltinTypes.smi"
_require "vars.smi"

structure TypesUtils =
struct
  exception CoerceFun 
  exception CoerceTvarKindToEQ 
  val derefTy : Types.ty -> Types.ty
  val substBTvar : Types.ty BoundTypeVarID.Map.map -> Types.ty -> Types.ty
  val freshSubst : Types.btvEnv -> Types.ty BoundTypeVarID.Map.map
  val monoTy : Types.ty -> bool
  val freshRigidInstTy : Types.ty -> Types.ty
  val derefSubstTy : Types.ty -> Types.ty
  val EFTV : Types.ty -> OTSet.set
  val adjustDepthInTy : Types.lambdaDepth -> Types.ty -> unit
  val adjustDepthInTvarKind : Types.lambdaDepth -> Types.tvarKind -> unit
  val generalizer : Types.ty * Types.lambdaDepth
                    -> {boundEnv: Types.btvEnv, removedTyIds: OTSet.set}
  val performSubst : Types.ty * Types.ty -> unit
  val admitEqTy : Types.ty -> bool
  val coerceTvarkindToEQ : Types.tvarKind -> Types.tvarKind
  val copyBoundEnv
      : Types.btvEnv -> Types.ty BoundTypeVarID.Map.map * Types.btvEnv
  val coerceFunM
      : Types.ty * Types.ty list -> Types.ty list * Types.ty * Types.ty list
  val tpappTy : Types.ty * Types.ty list -> Types.ty
  val tyConFromConTy : Types.ty -> Types.tyCon
end

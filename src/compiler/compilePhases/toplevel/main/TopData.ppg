structure TopData = 
struct
local
  fun format_dummy _ = nil
in
  (*% *)
  datatype stopAt 
    = (*% @format "SyntaxCheck" *) SyntaxCheck
    | (*% @format "ErrorCheck" *)  ErrorCheck
    | (*% @format "NoStop" *) NoStop

  fun format_loadMode mode =
      TermFormat.FormatComb.term
        (case mode of
           LoadFile.COMPILE => "COMPILE"
         | LoadFile.NOLOCAL => "NOLOCAL"
         | LoadFile.LINK => "LINK"
         | LoadFile.COMPILE_AND_LINK => "COMPILE_AND_LINK"
         | LoadFile.ALL => "ALL")

  (*% @formatter(LoadFile.mode) format_loadMode *)
  type load_mode = LoadFile.mode

  (*%  @formatter(Filename.filename) Filename.format_filename *)
  datatype code 
    = (*%  @format(filename) filename *)
      FILE of Filename.filename

  (*%
     @formatter(Filename.filename) Filename.format_filename 
     @formatter(option) TermFormat.formatOptionalOption
  *)
  type options 
    = (*%
         @format({stopAt,
                  baseFilename: bas basopt, 
                  stdPath: std stds, 
                  loadPath: load loads,
                  loadMode,
                  outputWarnings})
          "{"
           1[
              1[  "stopAt:" +d stopAt ]
               +1
              1["baseFilename:" +d basopt(bas)("SOME","NONE") ]
               +1
              1[ "stdPath:" +d stds(std)(",") ]
               +1
              1["loadPath:" +d loads(load)(".")]
               +1
              1["loadMode:" +d loadMode]
            ]
           1
           "}"
       *)
      {
        stopAt: stopAt,
        baseFilename: Filename.filename option,
        stdPath: Filename.filename list,
        loadPath: Filename.filename list,
        loadMode: load_mode,
        outputWarnings: UserError.errorInfo list -> unit
      }

  type toplevelContext =
      {
        fixEnv: Elaborator.fixEnv,
        topEnv: NameEvalEnv.topEnv,
        version: int option,
        builtinDecls: IDCalc.icdecl list
      }

  type newContext =
      {
        fixEnv: Elaborator.fixEnv,
        topEnv: NameEvalEnv.topEnv
      }

  (*% @formatter(newContext) format_dummy *)
  datatype result 
    = (*%
         @format "stopped"
       *)
      STOPPED
    | (*% 
         @format(env * code) "return"
       *)
      RETURN of newContext * LLVM.LLVMModuleRef

(*

  (*%
     @formatter(AbsynInterface.compileUnit) AbsynInterface.format_compileUnit
   *)
  type loadFileResult 
    = (*%
         @format({loadedFiles: file files} * comileUnit)
         "{"
           1[
             1["loadedFiles:" +d files(file)(+1)]
             1["compileUnit:" +d comileUnit]
            ]
           1
          "}"
        @format:file(filePlace * string) "("filePlace "," string ")"
       *)
    ({loadedFiles: (filePlace * string) list} * AbsynInterface.compileUnit)
*)

  val debugPrint = fn s => if !Bug.debugPrint then print s else ()
  fun printStopAt stopAt =
      debugPrint (Bug.prettyPrint (format_stopAt stopAt))
(*
  fun printCode code =
      debugPrint (Bug.prettyPrint (format_code code))
*)
(*
  fun printInterfaceName interfaceName =
      debugPrint (Bug.prettyPrint (InterfaceName.format_interface_name interfaceName))
*)
  fun printFileName fileName =
      debugPrint (Bug.prettyPrint (Filename.format_filename fileName))
(*
  fun printInterfaceNameList interfaceNameList =
      app (fn i => (printInterfaceName i; debugPrint "\n")) interfaceNameList
*)
  fun printResult result =
      debugPrint (Bug.prettyPrint (format_result result))
  fun printOptions options =
      debugPrint (Bug.prettyPrint (format_options options))

(*
  fun printCompileUnit unit =
      debugPrint (Bug.prettyPrint (AbsynInterface.format_compileUnit unit))
*)
  end
end

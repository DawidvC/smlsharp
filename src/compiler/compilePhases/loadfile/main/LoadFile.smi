_require local "../../../../basis.smi"
_require local "../../../data/symbols/main/Loc.ppg.smi"
_require local "../../../extensions/debug/main/Bug.ppg.smi"
_require local "../../../libs/ids/main/LocalID.smi"
_require local "../../../libs/env/main/SEnv.smi"
_require local "../../../libs/env/main/SSet.smi"

_require local "../../../libs/toolchain/main/CoreUtils.smi"
_require local "../../../extensions/usererror/main/UserError.ppg.smi"
_require local "../../../data/control/main/Control.ppg.smi"
_require local "../../../compilePhases/parser/main/Parser.smi"
_require local "../../../compilePhases/parser/main/InterfaceParser.smi"
_require local "./InterfaceHash.smi"
_require local "./LoadFileError.ppg.smi"

_require "../../../compilerIRs/absyn/main/AbsynInterface.ppg.smi"
_require "../../../compilerIRs/absyn/main/InterfaceName.ppg.smi"
_require "../../../compilerIRs/absyn/main/Absyn.ppg.smi"
_require "../../../libs/toolchain/main/Filename.smi"

structure LoadFile =
struct

  datatype mode =
      COMPILE
    | NOLOCAL
    | LINK
    | COMPILE_AND_LINK
    | ALL

  val load
      : {baseFilename: Filename.filename option,
         stdPath: Filename.filename list,
         loadPath: Filename.filename list,
         loadMode: mode}
        -> Absyn.unit
        -> InterfaceName.dependency * AbsynInterface.compile_unit

  (* load the given interface files for codes that require them *)
  val loadInterfaceFiles
      : {stdPath: Filename.filename list,
         loadPath: Filename.filename list,
         loadMode: mode}
        -> InterfaceName.source list
        -> InterfaceName.dependency * AbsynInterface.interface_unit

end

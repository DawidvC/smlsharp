(**
 * @copyright (c) 2006, Tohoku University.
 * @author Huu-Duc Nguyen 
 * @version $Id: ClusterCalc.ppg,v 1.4 2007/06/19 22:19:11 ohori Exp $
 *)

structure ClusterCalc = struct

 structure BT = BasicTypes

 type loc = Loc.loc

 (*%
  * @formatter(Absyn.callingConvenvtion) Absyn.format_callingConvenvtion
  *)
 type callingConvention = Absyn.callingConvention

 (*%
  * @formatter(tyformat) AnnotatedTypes.format_ty
  *)
 type ty = 
  (*%
   * @format(ty:tyformat) ty
   *)
   AnnotatedTypes.ty


 (*% 
  * @formatter(ID.id) ID.format_id
  *)
 type id = 
     (*%
      * @format(id) id
      *)
      ID.id

 (*%
  * @formatter(formatVarInfo) AnnotatedCalc.format_varInfo        
  *)
 type varInfo = 
      (*%
       * @format(v:formatVarInfo) v
       *) 
      AnnotatedCalc.varInfo

 (*%
  * @formatter(formatVarInfo) AnnotatedCalc.format_varInfoWithoutType
  *)
 type varInfoWithoutType =
      (*%
       * @format(v:formatVarInfo) v
       *) 
      AnnotatedCalc.varInfo

 (*% 
  * @formatter(formatPrimInfo) AnnotatedCalc.format_primInfo
  *)
 type primInfo =
      (*%
       * @format(v:formatPrimInfo) v
       *)
      AnnotatedCalc.primInfo

 (*%
  * @formatter(AnnotatedTypes.annotationLabel) AnnotatedTypes.format_annotationLabel
  *)
 type annotationLabel = 
      (*%
       * @format(value) value
       *)
      AnnotatedTypes.annotationLabel

 (*%
  * @formatter(format_btvEnv) AnnotatedTypes.format_btvEnv
  *)
 type btvEnv = 
      (*%
       * @format(v:format_btvEnv) v
       *)
      AnnotatedTypes.btvEnv 

 datatype constant = datatype ConstantTerm.constant

(*%
 *
 * @formatter(enclosedListIfMoreThanOne) SmlppgUtil.formatListWithEnclosureIfMoreThanOne
 * @formatter(formatConst) ConstantTerm.format_constant
 * @formatter(formatListWithEnclosure) SmlppgUtil.formatListWithEnclosure
 * @formatter(formatUInt32) BasicTypeFormatters.format_UInt32
 * @formatter(format_varInfoWithoutType) format_varInfoWithoutType
 * @formatter(formatBtvEnv) format_btvEnv
 *)
 datatype ccexp =
          (*%
           * @format(
           *        {
           *          funExp,
           *          funTy,
           *          argExpList: arg args:formatListWithEnclosure,
           *          convention,
           *          loc:loc
           *         }
           *        )
           * R1{d
           *      {
           *        funExp
           *        {args(arg)(","1,"(",")")}
           *      }
           *   }
           *)
          CCFOREIGNAPPLY of 
          {
           funExp : ccexp,
           funTy : ty, 
           argExpList : ccexp list, 
           convention : callingConvention,
           loc : loc
          }
        | (*%
           * @format({funExp,
           *          funTy,
           *          loc})
           * L10{ "CALLBACK(" funExp
           *              ")" }
           *)
          CCEXPORTCALLBACK of 
          {
           funExp : ccexp,
	   funTy : ty,
           loc: loc
          }
        | (*%
           * @format({ty, loc}) "_sizeof(" ty ")"
           *)
          CCSIZEOF of {ty : ty, loc : loc}
        | (*%
           * @format({value:value:formatConst, loc}) value
           *)
          CCCONSTANT of {value : constant, loc : loc}
        | (*%
           * @format({tagValue,loc}) tagValue
           *)
          CCEXCEPTIONTAG of {tagValue : int, loc : loc}
        | (*%
           * @format({varInfo:varInfo:format_varInfoWithoutType, loc}) varInfo
           *)
          CCVAR of {varInfo : varInfo, loc : loc}
        | (*%
           * @format(
           *         {
           *          arrayIndex:arrayIndex:formatUInt32, 
           *          valueIndex, 
           *          valueTy,
           *          loc
           *         }) 
           * "GetGlobal(" arrayIndex "," valueIndex ")"
           *)
          CCGETGLOBAL of {arrayIndex : BT.UInt32, valueIndex : int, valueTy : ty, loc: loc}
        | (*%
           * @format(
           *          {
           *           arrayIndex:arrayIndex:formatUInt32,
           *           valueIndex,
           *           valueExp,
           *           valueTy,
           *           loc
           *          }) 
           * "SetGlobal((" arrayIndex "," valueIndex ") = " valueExp ")"  
           *)
          CCSETGLOBAL of {arrayIndex : BT.UInt32, valueIndex : int, valueExp: ccexp, valueTy : ty, loc : loc}
        | (*%
           * @format({arrayIndex:arrayIndex:formatUInt32,size,elementTy,loc}) 
           * "InitialArray(" arrayIndex "," size ")"
           *)
          CCINITARRAY of {arrayIndex : BT.UInt32, size : int, elementTy : ty, loc : loc}
        | (*%
           * @format({arrayExp, indexExp, elementTy, loc})
           * "arraySub(" arrayExp "," indexExp ")" ":" elementTy
           *)
          CCGETFIELD of {arrayExp : ccexp, indexExp : ccexp, elementTy : ty, loc : loc}
        | (*%
           * @format({valueExp, arrayExp, indexExp, elementTy, loc})  
           * "SetField"
           * + arrayExp "[" indexExp "]" "=" valueExp 
           *)
          CCSETFIELD of 
          {
           valueExp : ccexp, 
           arrayExp : ccexp, 
           indexExp : ccexp, 
           elementTy : ty, 
           loc: loc
          }
        | (*%
           * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel, loc})  
           * "SetTail"
           * + consExp ":" consRecordTy  "[" tailLabel "]" "=" newTailExp 
           *)
          CCSETTAIL of 
          {
           consExp : ccexp, 
           newTailExp : ccexp, 
	   listTy : ty,
	   tailLabel : string,
	   consRecordTy : ty,
           loc: loc
          }
        | (*%
           * @format({sizeExp, initialValue, elementTy, loc}) 
           * !N0 {
           *       elementTy "[" 2[1 sizeExp ] 1"]" "{" initialValue "}"
           *	 }
           *)
          CCARRAY of 
          {
           sizeExp : ccexp, 
           initialValue : ccexp, 
           elementTy : ty, 
           loc : loc
          }
        | (*%
           * @format(
           *         {
           *          primInfo,
           *          argExpList:arg args:formatListWithEnclosure,
           *          loc
           *          }
           *         )
           *       R1{d {primInfo 1 {args(arg)(","1,"(",")")}}}
           *)
          CCPRIMAPPLY of 
          {
           primInfo : primInfo, 
           argExpList : ccexp list,
           loc : loc
          }
        | (*%
           * @format({funExp, funTy, argExpList:arg args:enclosedListIfMoreThanOne, loc})  
           *   L10{ 
           *   funExp 
           *      2[
           *      +1 
           *        !N0{
           *             2[args(arg)(","+2, "{", "}")] 
           *           } 
           *      1
           *      ]
           *   }
           *)
          CCAPPM of 
          {
           funExp : ccexp, 
           funTy : ty, 
           argExpList : ccexp list,
           loc : loc
          }
        | (*%
           * @format({
           *          exp, 
           *          expTy,
           *          instTyList: ty tys:formatListWithEnclosure,
           *          loc})  
           *   L10{ 
           *   exp 
           *      2[
           *      +1 
           *        !N0{
           *             2[tys(ty)(","+2, "{", "}")] 
           *           } 
           *      1
           *      ]
           *   }
           *)
          CCTAPP of 
          {
           exp : ccexp, 
           expTy : ty,
           instTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({localDeclList : dec decs, mainExp, loc})
           *     !N0{ {"let" 2[ +1 decs(dec)( +1) ]}  +1
           *          {"in" 2[ +2 mainExp ] +2
           *           "end"} }
           *)
          CCLET of 
          {
           localDeclList : ccdecl list,
           mainExp : ccexp,
           loc : loc
          }
        | (*%
           * @format({expList:field fields:enclosedListIfMoreThanOne, tyList, loc}) 
           *      fields(field)(","+,"{","}")
           *)
          CCMVALUES of {expList : ccexp list, tyList : ty list, loc : loc}
        | (*%
           * @format({expList:field fields, recordTy, annotation, isMutable, loc}) 
           *  !N0{"(" d 2[ fields(field)("," +1) ] d ")" }
           *)
          CCRECORD of 
          {
           expList : ccexp list,
           recordTy : ty,
           annotation : annotationLabel,
	   isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({recordExp, label, recordTy, loc})
           *     recordExp "[" label "]"
           *)
          CCSELECT of 
          {
           recordExp : ccexp, 
           label : string, 
           recordTy : ty, 
           loc : loc
          }
        | (*%
           * @format({recordExp, recordTy, label, valueExp, valueTy, loc})
           *   recordExp "[" label "=" valueExp "]"
           *)
          CCMODIFY of 
          {
           recordExp : ccexp, 
           recordTy : ty, 
           label : string, 
           valueExp : ccexp,
           valueTy : ty,
           loc : loc
          }
        | (*%
           * @format({argExp, resultTy, loc}) N0{ "raise" +d {argExp} }
           *)
          CCRAISE of 
          {
           argExp : ccexp, 
           resultTy : ty, 
           loc : loc
          }
        | (*%
           * @format({exp, exnVar, handler, loc})
           *      "handle" + N0{exp} +1
           *      "with letexp" +  exnVar  + "in" + {handler}
           *)
          CCHANDLE of
          {
           exp : ccexp,
           exnVar : varInfo,
           handler : ccexp,
           loc : loc
          }
        | (*%
           * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
           *    "switch" 
           *      2[+1 {switchExp}]
           *     +1 "of" +
           *     {rules(rule)(~2[+1 "|"] +)}
           *     +1 " |" +
           *     {"_ =>" 2[+1{defaultExp}]}
           * @format:rule({constant,exp})
           *     {constant + "=>" 2[+1{exp}]}
           *)
          CCSWITCH of 
          {
           switchExp : ccexp, 
           expTy : ty, 
           branches : {constant : ccexp , exp : ccexp} list, 
           defaultExp : ccexp, 
           loc : loc
          }
        | (*%
           * @format({exp, expTy, targetTy, loc}) 
           *   {
           *    "("
           *        +1
           *      2["cast" + 2[{exp} + ":" +1 {expTy}]]
           *        +1
           *        2["to" + 2[{targetTy}]]
           *      +1
           *    ")"
           *     }
           *)
          CCCAST of {exp : ccexp, expTy : ty, targetTy : ty, loc : loc}

      and ccdecl = 
          (*%
           * @format({boundVars:var vars, boundExp,loc})  
           *  2[
           *   "val" 
           *   + 
           *   vars:enclosedListIfMoreThanOne(var)(",","{","}") +d "=" +1 {boundExp}
           *   ]
           *)
          CCVAL of 
          {
           boundVars : varInfo list,
           boundExp : ccexp,
           loc : loc
          }
        | (*%
           * @format({
           *          btvEnv, 
           *          boundVar,
           *          boundExp,
           *          loc})
           *    {
           *     "[" 
           *       2[ 
           *         btvEnv "." 
           *          +1
           *          2[  
           *           "val" + boundVar +d "=" +1 {boundExp}
           *           ]
           *        ]
           *      1 "]"
           *   }
           *)
          CCPOLYVAL of
          {
           btvEnv : btvEnv,
           boundVar : varInfo,
           boundExp : ccexp,
           loc : loc
          }
        | (*%
           * @format({
           *          entryFunctions:entry entries:formatListWithEnclosure, 
           *          innerFunctions: inner inners:formatListWithEnclosure, 
           *          isRecursive,
           *          loc
           *         })
           *  2[
           *    "cluster" + entries(entry)(~2[ +1 "and"] +,"", "")
           *    + 
           *    inners(inner)(~2[ +1 "and"] +, ~2[+1 "with inners"] +, "")
           *   ]
           *)
          CCCLUSTER of
          {
           entryFunctions : funDecl list,
           innerFunctions : funDecl list,
           isRecursive : bool,
           loc : loc
          }
        | (*%
           * @format({
           *          btvEnv, 
           *          entryFunctions: entry entries:formatListWithEnclosure, 
           *          innerFunctions: inner inners:formatListWithEnclosure, 
           *          isRecursive,
           *          loc})
           *    {
           *     "[" 
           *       2[ 
           *         btvEnv "." 
           *          +1
           *          2[  
           *           "cluster" + entries(entry)(~2[ +1 "and"] +,"", "")
           *           +
           *           inners(inner)(~2[ +1 "and"] +,~2[ +1 "with inners"] +,"")
           *           ]
           *        ]
           *      1 "]"
           *   }
           *)
          CCPOLYCLUSTER of
          {
           btvEnv : btvEnv,
           entryFunctions : funDecl list,
           innerFunctions : funDecl list,
           isRecursive : bool,
           loc : loc
          }

 withtype funDecl =
          (*%
           * @format({funVar, argVarList: arg args:enclosedListIfMoreThanOne, bodyExp, annotation})
           *     funVar +d "=" +1
           *     R1{ 
           *        "fn" + {args(arg)(","+, "{", "}") + "=>" }
           *         2[ +1 {bodyExp}]
           *      }
           *) 
          {funVar : varInfo, argVarList : varInfo list, bodyExp : ccexp, annotation : annotationLabel}

end

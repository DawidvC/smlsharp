_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require local "../../../compiler-utils/env/main/LabelEnv.smi"
_require local "./TermPrintUtils.ppg.smi"

structure ReifiedTerm =
struct
  type path = string list
  datatype reifiedTerm
    = DATATYPEtyRepNOARG of string
    | DATATYPEtyRepWITHARG of string * reifiedTerm
    | ARRAYtyRep of reifiedTerm * (int -> reifiedTerm list * bool)
    | VECTORtyRep of reifiedTerm * (int -> reifiedTerm list * bool)
    | CHARtyRep of char
    | EXNtyRep
    | FUNtyRep
    | INTINFtyRep of IntInf.int
    | INTtyRep of int
    | INT64tyRep of int64
    | BOOLtyRep of bool
    | LISTtyRep of reifiedTerm list
    | PTRtyRep
    | REAL32tyRep of Real32.real
    | REALtyRep of real
    | RECORDtyRep of (string * reifiedTerm) list
    | TUPLEtyRep of reifiedTerm list
    | STRINGtyRep of string
    | UNITtyRep
    | UNPRINTABLERep
    | ELIPSISRep
    | BUILTINRep
    | WORD8tyRep of Word8.word
    | WORDtyRep of word
    | WORD64tyRep of Word64.word
  datatype idstatus
    = EXEXN of {name:string, ty:string option}
    | EXEXNREP of {name:string, path:string}
    | EXVAR of {name:string, term:reifiedTerm, ty:string}
  type tstr = string * string
  type varE = idstatus list
  type tyE = tstr list
  datatype env
    = ENV of {strE:(string * env) list, tyE:tyE, varE:varE}
  type strentry = string * env
  type funE = string list
  type sigentry = string * string
  type sigE = sigentry list
  type topEnv = {Env:env, FunE:funE, SigE:string}

  val format_path : string list -> SMLFormat.FormatExpression.expression list
  val format_reifiedTerm 
    : reifiedTerm -> SMLFormat.FormatExpression.expression list
  val format_tstr : string * string -> SMLFormat.FormatExpression.expression list
  val format_idstatus 
    : idstatus -> SMLFormat.FormatExpression.expression list
  val format_varE 
    : idstatus list -> SMLFormat.FormatExpression.expression list
  val format_tyE : (string * string) list -> SMLFormat.FormatExpression.expression list
  val format_env : env -> SMLFormat.FormatExpression.expression list
  val format_strentry : strentry -> SMLFormat.FormatExpression.expression list
  val format_topEnv 
    : topEnv -> SMLFormat.FormatExpression.expression list
  val format_funE : string list -> SMLFormat.FormatExpression.expression list

  val printTopEnv : topEnv -> unit

end

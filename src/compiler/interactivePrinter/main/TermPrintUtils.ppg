(**
 * @copyright (c) 2012- Tohoku University.
 * @author Atsushi Ohori
 *)
structure TermPrintUtils =
struct
local
  structure C = Control
  structure FE = SMLFormat.FormatExpression
  val ellipsis = [FE.Term (3, "...")]
  val spaceIndicator = FE.Indicator{space = true, newline = NONE}
  fun makeToken s = [FE.Term (String.size s, s)]
in

  type format = SMLFormat.FormatExpression.expression list

  fun format_lazy elementFormatter elementFn =
      elementFormatter(elementFn ())

  fun makeLines s =
      let
        val fields = String.fields (fn x => x = #"\n") s
        val termList =
            foldr
            (fn (s, nil) =>
                FE.Term(String.size s, s)::nil
              | (s,termList) => 
                FE.Term(String.size s, s) ::
                FE.Newline ::
                termList
            )
            nil
            fields
      in
        termList
      end

  fun format_int int =
      let 
        val text = Int.toString int
      in
        makeToken text 
      end

  (* ?? *)
  fun format_real real =
      let
        val text = Real.fmt (StringCvt.GEN NONE) real
      in 
        makeToken text 
      end

  fun format_string string =
      let
        val text = "\""^ (String.toRawString string) ^ "\""
      in 
        makeToken text 
      end

  fun format_label string =
      let
        val text = String.toRawString string
      in 
        makeToken text 
      end

  (* ?? *)
  fun format_char char =
      let
        val text = "#" ^ "\"" ^ Char.toString char ^ "\""
      in 
        makeToken text 
      end

  fun format_int32 int =
      let
        val text = Int32.toString int
      in
        makeToken text 
      end

  fun format_int64 int =
      let
        val text = Int64.toString int
      in
        makeToken text 
      end

  (* ?? *)
  fun format_real32 int =
      let
        val text = Real32.toString int
      in
        makeToken text 
      end

  (* ?? *)
  fun format_word32 word =
      let 
        val text = Word32.toString word
      in 
        makeToken text 
      end

  (* ?? *)
  fun format_word64 word =
      let 
        val text = Word64.toString word
      in 
        makeToken text 
      end

  (* ?? *)
  fun format_word8 word =
      let 
        val text = Word8.toString word
      in
        makeToken text 
      end

  (* ?? *)
  fun format_IntInf int =
      let
        val text = IntInf.toString int
      in
        makeToken text 
      end

  (* from smlformat/lib/BasicFormatter.ppg *)
  fun format_listWithDeffered (elementFormatter, separator, separaterDeffered) [] = []
    | format_listWithDeffered (elementFormatter, separator, separaterDeffered) values =
      let
        fun format [] = []
          | format [value] = elementFormatter value
          | format (head::tail) =
            let
              val elementFormatExp = elementFormatter head
            in
              case elementFormatExp of
                [] => elementFormatExp @ separaterDeffered @ (format tail)
              | [SMLFormat.FormatExpression.Term _] => elementFormatExp @ separaterDeffered @ (format tail)
              | _ => elementFormatExp @ separator @ (format tail)
            end
      in
        format values
      end


  (* list format with bound and ellipsis *)
  fun formatElements (elementFormatter, separator, separatorDeffered) list =
    let
      val count = List.length list
      val (list, hasEllipsis) =
          if count > (!C.printMaxDepth)
          then (List.take(list, !C.printMaxDepth), true)
          else (list, false)
    in
      if hasEllipsis then 
        (format_listWithDeffered (elementFormatter, separator, separatorDeffered) list) 
        @ separator @
        ellipsis
      else
        format_listWithDeffered (elementFormatter, separator, separatorDeffered) list
    end

  fun format_lazyArray (elementFormatter, separator, separatorDeffered) lazyFn =
      let
        val (list, hasEllipsis) = lazyFn (!C.printMaxDepth)
      in
      if hasEllipsis then 
        (format_listWithDeffered (elementFormatter, separator, separatorDeffered) list) 
        @ separator @
        ellipsis
      else
        format_listWithDeffered (elementFormatter, separator, separatorDeffered) list
      end            


  fun formatPrependedOpt (formatter, prefixIfSome) =
      fn NONE => [FE.Term (0, "")]
       | SOME value => prefixIfSome @ (formatter value)

  (* this is a copy for TermFormat 
    ToDo: we should put all the generic formatter function in
    the lib2. The current TermFormat contain compiler specific
    formatters for boundTypeVars.
   *)
  fun formatIfCons exp nil = nil
    | formatIfCons exp _ = exp


  (* this is a copy from Control
   *)
  fun prettyPrint expressions =
      let
        val ppgenParameter = [SMLFormat.Columns (!C.printWidth)]
      in
        SMLFormat.prettyPrint ppgenParameter expressions
      end

end
end

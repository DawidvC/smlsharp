(**
 * @copyright (c) 2012- Tohoku University.
 * @author Atsushi Ohori
 *)
structure ReifiedTerm =
struct

  (*% *)
  type path =
    (*%
       @format(name names)  names(name)(".")
     *)
    string list

  fun ifMultilines (nl, sp) s =
      if List.length (String.fields (fn x => x = #"\n") s) > 1 
         orelse String.size s > 60
      then nl
      else sp

  (*%
     @formatter(int) TermPrintUtils.format_int
     @formatter(int64) TermPrintUtils.format_int64
     @formatter(string) TermPrintUtils.format_string
     @formatter(label) TermPrintUtils.format_label
     @formatter(real) TermPrintUtils.format_real
     @formatter(char) TermPrintUtils.format_char
     @formatter(Word8.word) TermPrintUtils.format_word8
     @formatter(Word.word) TermPrintUtils.format_word32
     @formatter(Word64.word) TermPrintUtils.format_word64
     @formatter(Real32.real) TermPrintUtils.format_real32
     @formatter(LabelEnv.map) TermPrintUtils.formatLmap
     @formatter(list) TermPrintUtils.formatElements
     @formatter(lazyArray) TermPrintUtils.format_lazyArray
     @formatter(IntInf.int) TermPrintUtils.format_IntInf
     @formatter(ifMultilines) ifMultilines
   *)
  datatype reifiedTerm
    = (*%
         @format(con:label) con
       *)
      DATATYPEtyRepNOARG of string
    | (*%
         @format(con:label * term)
         L8{ 2[con +1 term] }
       *)
      DATATYPEtyRepWITHARG of string * reifiedTerm
    | (*%
         @format(int) int
       *)
      INTtyRep of int
    | (*%
         @format(int) int
       *)
      INTINFtyRep of IntInf.int
    | (*%
         @format(int64) int64
       *)
      INT64tyRep of int64
    | (*%
         @format(bool) bool
       *)
      BOOLtyRep of bool
    | (*%
         @format(word) word
       *)
      WORDtyRep of word
    | (*%
         @format(word) word
       *)
      WORD8tyRep of Word8.word
    | (*%
         @format(word64) word64
       *)
      WORD64tyRep of Word64.word
    | (*%
         @format(char) char
       *)
      CHARtyRep of char
    | (*%
         @format(string) string
       *)
      STRINGtyRep of string
    | (*%
         @format(real) real
       *)
      REALtyRep of real
    | (*%
         @format(real) real
       *)
      REAL32tyRep of Real32.real
    | (*%
         @format "()"
       *)
      UNITtyRep 
    | (*%
         @format "fn"
       *)
      FUNtyRep
    | (*%
         @format(field terms)
          {
           "{"
              2[1 terms(field)(","+2,","+2)]
            1
           "}"
          }
         @format:field(name:label * term) 
           { name + "=" + term }
       *)
      RECORDtyRep of (string * reifiedTerm) list
    | (*%
         @format(field terms)
         !N0{
           "("
            1[1 terms(field)(","+2, ","+d)]
            1
           ")"
          }
       *)
      TUPLEtyRep of reifiedTerm list
    | (*%
         @format(term terms)
          {
           "["
            1[1 terms(term)(","+2, ","+d)]
            1
           "]"
          }
       *)
      LISTtyRep of reifiedTerm list
    | (*%
         @format(term * lazyArray:lazyArray)
          {
           "<"
             2[1 lazyArray(term)(","+2, ","+d)]
           1
           ">"
          }
       *)
      ARRAYtyRep of reifiedTerm * (int -> reifiedTerm list * bool)
    | (*%
         @format(term * lazyArray:lazyArray)
          {
           "<|"
             2[1 lazyArray(term)(","+2, ","+d)]
           1
           "|>"
          }
       *)
      VECTORtyRep of reifiedTerm * (int -> reifiedTerm list * bool)
    | (*%
         @format "exn"
       *)
      EXNtyRep
    | (*%
         @format "ptr"
       *)
      PTRtyRep
    | (*%
         @format "_"
       *)
      UNPRINTABLERep 
    | (*%
         @format "..."
       *)
      ELIPSISRep 
    | (*%
         @format "<builtin>"
       *)
      BUILTINRep


  (*%
     @formatter(option) TermPrintUtils.formatPrependedOpt
     @formatter(makeLines) TermPrintUtils.makeLines
     @formatter(ifMultilines) ifMultilines
   *)
  datatype idstatus 
    = (*
         @format({name, term, ty})
          {2[ "val" + name + "=" +1 term ty:ifMultilines()(\n,+) ":" + {ty:makeLines} ] }
          {2[ "val" + name + "=" +1 term +1 ":" + ty:makeLines ] }
       *)
      (*%
         @format({name, term, ty})
          {2[ "val" + name + "=" +1 term ty:ifMultilines()(\n,+) ":" + {ty:makeLines}] }
       *)
      EXVAR of {name:string, term:reifiedTerm, ty:string}
    | (*%
         @format({name, ty:ty opt})
          {"exception" + name opt(ty:makeLines)(+"of"+)}
       *)
      EXEXN of {name:string, ty:string option}
    | (*%
         @format({name, path})
           {"exception" + name + "=" + path}
       *)
      EXEXNREP of {name:string, path:string}

  (*% 
      @formatter(makeLines) TermPrintUtils.makeLines
   *)
  type tstr 
    = (*%
         @format(name * def:makeLines) 
          def
       *)  
      string * string

  (*%
     @formatter(ifCons) TermPrintUtils.formatIfCons
  *)
  type varE
    = (*%
         @format(var vars) 
           vars(var)(\n)
       *)
      idstatus list

  (*%
  *)
  type tyE
    = (*%
         @format(ty tys) 
           tys(ty)(\n)
       *)
      tstr list

  fun ifNonEmptyTyEVarE (varE,exp) tyE =
      if null(tyE) orelse null(varE) then nil
      else exp
  fun ifNonEmptyTyEVarEStrE (varE,tyE,exp) strs =
      if null(strs) orelse null(varE) andalso null(tyE) then nil
      else exp
  fun ifNonEmptyEnv (env, exp) _ =
      if null(env) then nil
      else exp @ env
  (*%
     @formatter(ifCons) TermPrintUtils.formatIfCons
     @formatter(ifNonEmptyTyEVarE) ifNonEmptyTyEVarE
     @formatter(ifNonEmptyTyEVarEStrE) ifNonEmptyTyEVarEStrE
     @formatter(ifNonEmptyEnv) ifNonEmptyEnv
   *)
  datatype env 
    = (*%
         @format({varE, tyE, strE:str strs})
          tyE
          tyE:ifNonEmptyTyEVarE()(varE,\n)
          varE
          strs:ifNonEmptyTyEVarEStrE()(varE,tyE,\n)
          strs(str)(\n)
       *)
      ENV of {varE:varE, tyE:tyE, strE:strentry list}
  withtype strentry
   = (*%
         @format(name*env)
           "structure" + name + "="
          2[
           \n
           "struct"
             2[
               env:ifNonEmptyEnv()(env,\n)
              ]
           \n
           "end"
           ]
       *)
     string * env

  (*% 
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  type funE
    = (*%
         @format(functor functors) 
           functors(functor)(\n)
       *)
      string list

  (*% *)
  type sigentry 
    = (*%
         @format(name * sige) 
         "signature" + name + "="
           2[
            \n
            "sig"
              2[sige]
            \n
            "end"
           ]
       *)
     string * string

  (*% 
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  type sigE
    = (*%
         @format(sigdef sigdefs) 
           sigdefs(sigdef)(\n)
       *)
      sigentry list

  fun printEnv (env,nl) string =
      if String.size string = 0 
      then if null(env) then nil
           else env @ nl
      else if null(env) then nl
      else nl @ env @ nl
  (*%
     @formatter(printEnv) printEnv
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  type topEnv 
    = (*%
         @format({Env, FunE, SigE}) 
           FunE
           FunE:ifCons()(\n)
           SigE
           SigE:printEnv()(Env,\n)
       *)
       {Env:env, FunE:funE, SigE:string}

  fun printTopEnv topEnv = 
      print (TermPrintUtils.prettyPrint (format_topEnv topEnv))


end

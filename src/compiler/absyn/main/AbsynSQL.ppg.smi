_require local "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../control/main/Loc.ppg.smi"
_require "./Symbol.ppg.smi"
_require "./RecordLabel.smi"

structure AbsynSQL =
struct
  type symbol = Symbol.symbol

  datatype 'exp from =
    SQLTABLE of symbol * RecordLabel.label * symbol option
  | SQLINNERJOIN of 'exp from * 'exp from * 'exp
  | SQLCROSSJOIN of 'exp from * 'exp from
  | SQLNATURALJOIN of 'exp from * 'exp from * Loc.loc
  | SQLAS of 'exp from * symbol * Loc.loc
  | SQLEXP of 'exp * symbol

  datatype 'exp command =
    SQLSELECT of {distinct: bool option,
                  selectListExps: 'exp list,
                  selectLabels: RecordLabel.label list option,
                  fromClause: 'exp from list,
                  whereClause: 'exp option,
                  orderByClause: {keyExp:'exp, orderAsc:bool} list,
                  loc: Loc.loc}
  | SQLINSERT of {table: symbol * RecordLabel.label,
                  insertValues: 'exp option list list, (* NONE = DEFAULT *)
                  insertLabels: RecordLabel.label list,
                  loc: Loc.loc}
  | SQLDELETE of {table: symbol * RecordLabel.label,
                  tableName: symbol option,
                  whereClause: 'exp option,
                  loc: Loc.loc}
  | SQLUPDATE of {table: symbol * RecordLabel.label,
                  tableName: symbol option,
                  setListExps: 'exp option list,  (* NONE = DEFAULT *)
                  setLabels: RecordLabel.label list,
                  fromClause: 'exp from list,
                  whereClause: 'exp option,
                  loc: Loc.loc}
  | SQLBEGIN of Loc.loc
  | SQLCOMMIT of Loc.loc
  | SQLROLLBACK of Loc.loc

  datatype ('exp, 'pat, 'ty) exp =
      SQLFIELDSELECT of RecordLabel.label * 'exp * Loc.loc
    | SQLFN of 'pat * 'exp command * Loc.loc
    | SQLSERVER of 'exp * 'ty * Loc.loc
    | SQLEXEC of 'exp * Loc.loc
    | SQLEVAL of 'exp * Loc.loc

  val format_exp
      : ('a -> SMLFormat.FormatExpression.expression list)
        * ('b -> SMLFormat.FormatExpression.expression list)
        * ('c -> SMLFormat.FormatExpression.expression list)
        -> ('a, 'b, 'c) exp -> SMLFormat.FormatExpression.expression list
end

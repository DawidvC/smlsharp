_require local "../../../basis.smi"
_require local "../../../compiler-utils/format-utils/main/SmlppgUtil.ppg.smi"
_require local "../../util/main/TermFormat.smi"

_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/symbols/main/Loc.ppg.smi"
_require "../../../compiler-utils/symbols/main/Symbol.ppg.smi"
_require "../../../compiler-utils/symbols/main/RecordLabel.smi"
structure AbsynTy =
struct

  type loc = Loc.loc
  type symbol = Symbol.symbol
  type longsymbol = Symbol.longsymbol

  datatype eq
    = EQ
    | NONEQ

  datatype ty
    = TYWILD of loc
    | TYID of {symbol:symbol, eq:eq} * loc
    | TYRECORD of (RecordLabel.label * ty) list * loc
    | TYCONSTRUCT of ty list * longsymbol * loc
    | TYTUPLE of ty list * loc
    | TYFUN of ty * ty * loc
    | TYPOLY of ({symbol:symbol, eq:eq} * tvarKind) list * ty * loc

  and tvarKind
    = UNIV
    | REC of (RecordLabel.label * ty) list * loc
    | KINDID of string * loc

  type tvar = {symbol:symbol, eq:eq}
  type kindedTvar = {symbol:symbol, eq:eq} * tvarKind

  datatype ffiTy
    = FFIFUNTY of string list * ffiTy list * ffiTy list option * ffiTy list
                  * loc
    | FFITUPLETY of ffiTy list * loc
    | FFITYVAR of tvar * loc
    | FFIRECORDTY of (RecordLabel.label * ffiTy) list * loc
    | FFICONTY of ffiTy list * longsymbol * loc

  val format_eq
      : eq -> SMLFormat.FormatExpression.expression list
  val format_ty
      : ty -> SMLFormat.FormatExpression.expression list
  val format_tvarKind
      : tvarKind -> SMLFormat.FormatExpression.expression list
  val format_tvar
      : tvar -> SMLFormat.FormatExpression.expression list
  val format_kindedTvar
      : kindedTvar -> SMLFormat.FormatExpression.expression list
  val format_ffiTy
      : ffiTy -> SMLFormat.FormatExpression.expression list

  val getLocTy : ty -> loc

end

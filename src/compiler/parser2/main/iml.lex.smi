_require "../../../basis.smi"
_require "../../../ml-yacc-lib.smi"
_require "../../control/main/Control.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../usererror/main/UserError.ppg.smi"
_require "../../util/main/BigInt_IntInf.smi"
_require "iml.grm.sig"
_require "iml.grm.smi"

structure MLLex
=
struct
  structure UserDeclarations =
  struct
    type token = MLLrVals.Tokens.token
    type pos = MLLrVals.Tokens.pos
    type svalue = MLLrVals.Tokens.svalue
    type arg (= boxed)
    val isINITIAL : arg -> bool
    val initArg : {sourceName : string,
                   isPrelude : bool,
                   enableMeta : bool,
                   lexErrorFn : (string * pos * pos) -> unit,
                   initialLineno : int} -> arg
  end
  val makeLexer
      : (int -> string) -> UserDeclarations.arg -> unit -> UserDeclarations.token
end

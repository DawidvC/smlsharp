_require local "../../../basis.smi"
_require local "../../../ml-yacc-lib.smi"
_require local "../../../compiler-utils/symbols/main/Symbol.ppg.smi"
_require local "../../../compiler-utils/symbols/main/Loc.ppg.smi"
_require local "../../../compiler-utils/debug/main/Bug.ppg.smi"

_require local "../../control/main/Control.ppg.smi"
_require local "../../usererror/main/UserError.ppg.smi"
_require local "./ParserError.ppg.smi"
_require local "./iml.grm.smi"
_require local "./iml.lex.smi"

_require "../../absyn/main/Absyn.ppg.smi"

structure Parser =
struct
  datatype mode = Prelude | Interactive | Batch | File
  type source = {mode : mode,
                 read : bool * int -> string,
                 sourceName : string,
                 initialLineno : int}
  type input (= boxed)
  val setup : source -> input
  val parse : input -> Absyn.unitparseresult
  val isEOF : input -> bool
end

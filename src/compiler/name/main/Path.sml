(**
 * Path represents a long identifier.
 * @copyright (c) 2006, Tohoku University.
 * @author YAMATODANI Kiyoshi
 * @version $Id: Path.sml,v 1.9 2006/04/15 08:40:44 ohori Exp $
 *)
structure Path : PATH = 
struct

  (***************************************************************************)

  type id = ID.id

  datatype path =        
           PStructure of id * string * path
         | NilPath

  (***************************************************************************)
  val topStrName = "$TOP"
  (* NOTE: It should be careful to avoid the conflict between this ID and
   * structure IDs which are generated by StaticEnv.
   * (Due to interdependency of modules, Path can not refer to the StaticEnv.)
   *)
  val topStrID = ID.reserve ()
  val topStrPath = PStructure (topStrID, topStrName, NilPath)

  val localizedConstrainedStrName = "$LOCALSTR"
  val localizedConstrainedStrID = ID.reserve()

  fun pathToString p =
      let
        fun pathcvt p s =
            case p of
              NilPath => s
            | PStructure(id, name, NilPath) => (s ^ name)
            | PStructure(id, name, path) => pathcvt path (s ^ name ^ ".");
      in pathcvt p "" end

  fun appendPath (NilPath, id, name) = PStructure(id, name, NilPath)
    | appendPath (PStructure(strID, strName, tl), id, name) =
      PStructure(strID, strName, appendPath(tl, id, name))

  fun getLastElementOfPath (PStructure(id, name, NilPath)) =
      {id = id, name = name}
    | getLastElementOfPath (PStructure(id, name, tail)) =
      getLastElementOfPath tail

  fun getParentPath NilPath = NilPath
    | getParentPath (PStructure(id, name, NilPath)) = NilPath
    | getParentPath (PStructure(id, name, tail)) =
      PStructure(id, name, getParentPath tail)

  fun comparePathByName (PStructure(id1,name1,p1),PStructure(id2,name2,p2)) =
      if name1 = name2 then comparePathByName (p1,p2) else false
    | comparePathByName (NilPath,NilPath) = true
    | comparePathByName (PStructure _, NilPath) = false
    | comparePathByName (NilPath,PStructure _ ) = false

  fun comparePathById (PStructure(id1,name1,p1),PStructure(id2,name2,p2)) =
      if ID.eq(id1,id2) then comparePathByName (p1,p2) else false
    | comparePathById (NilPath,NilPath) = true
    | comparePathById (PStructure _, NilPath) = false
    | comparePathById (NilPath,PStructure _ ) = false

  fun removeCommonPrefix (leftPath, rightPath) =
      case (leftPath, rightPath) of
        (
          PStructure(leftID, leftName, leftTail),
          PStructure(rightID, rightName, rightTail)
        ) =>
        if ID.eq(leftID, rightID)
        then removeCommonPrefix (leftTail, rightTail)
        else (leftPath, rightPath)
      | _ => (leftPath, rightPath)

  fun hideTopStructure (path as PStructure(strID, strName, tail)) =
      if ID.eq (strID, topStrID) then tail else path
    | hideTopStructure path = path

  fun hideLocalizedConstrainedStructure (path as PStructure(strID, strName, tail)) =
      if ID.eq(strID, localizedConstrainedStrID) then 
	hideLocalizedConstrainedStructure(tail) 
      else
	PStructure(strID, strName, hideLocalizedConstrainedStructure(tail))
    | hideLocalizedConstrainedStructure path = path

  fun format_pathWithoutDotend  x = 
      case hideTopStructure x of 
        NilPath => [SMLFormat.FormatExpression.Term(0, "")]
      | PStructure x =>
        case x of
          (id, name, path) =>
          (case  path of
             NilPath => SMLFormat.BasicFormatters.format_string(name)
           | PStructure _  => 
             (List.concat
                  [
                    SMLFormat.BasicFormatters.format_string(name),
                    [SMLFormat.FormatExpression.Term(1, ".")],
                    format_pathWithoutDotend(path)
                  ]))

  fun format_pathWithDotend x = 
      case hideTopStructure x of 
        NilPath => [SMLFormat.FormatExpression.Term(0, "")]
      | PStructure (id, name, path) =>
        (List.concat
             [
               SMLFormat.BasicFormatters.format_string(name),
               [SMLFormat.FormatExpression.Term(1, ".")],
               format_pathWithDotend(path)
             ])
  
  (***************************************************************************)

end

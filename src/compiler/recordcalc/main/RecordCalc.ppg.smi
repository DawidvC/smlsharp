_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"

_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../builtin2/main/BuiltinPrimitive.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../typedcalc/main/TypedCalc.ppg.smi"

structure RecordCalc =
  struct
    datatype rcexp
      = RCAPPM of {argExpList:rcexp list, funExp:rcexp, funTy:Types.ty, loc:Loc.loc}
      | RCCASE of {defaultExp:rcexp, exp:rcexp, expTy:Types.ty, loc:Loc.loc,
                   ruleList:(Types.conInfo * Types.varInfo option * rcexp) list}
      | RCCAST of rcexp * Types.ty * Loc.loc
      | RCCONSTANT of {const:Absyn.constant, loc:Loc.loc, ty:Types.ty}
      | RCDATACONSTRUCT of {argExpOpt:rcexp option, con:Types.conInfo,
                            argTyOpt:Types.ty option,
                            instTyList:Types.ty list, loc:Loc.loc}
      | RCEXNCASE of {defaultExp:rcexp, exp:rcexp, expTy:Types.ty, loc:Loc.loc,
                      ruleList:(TypedCalc.exnCon * Types.varInfo option * rcexp) list}
      | RCEXNCONSTRUCT of {argExpOpt:rcexp option, exn:TypedCalc.exnCon,
                           instTyList:Types.ty list, loc:Loc.loc}
      | RCEXN_CONSTRUCTOR of {exnInfo:Types.exnInfo, loc:Loc.loc}
      | RCEXEXN_CONSTRUCTOR of {exExnInfo:Types.exExnInfo, loc:Loc.loc}
      | RCEXPORTCALLBACK of {foreignFunTy:Types.foreignFunTy, funExp:rcexp,
                             loc:Loc.loc}
      | RCEXVAR of Types.exVarInfo * Loc.loc
      | RCFFI of rcffiexp * Types.ty * Loc.loc
      | RCFNM of {argVarList:Types.varInfo list, bodyExp:rcexp, bodyTy:Types.ty, loc:Loc.loc}
      | RCFOREIGNAPPLY of {argExpList:rcexp list,
                           foreignFunTy:Types.foreignFunTy, funExp:rcexp,
                           loc:Loc.loc}
      | RCGLOBALSYMBOL of {kind:Absyn.globalSymbolKind, loc:Loc.loc, name:string,
                           ty:Types.ty}
      | RCHANDLE of {exnVar:Types.varInfo, exp:rcexp, handler:rcexp, loc:Loc.loc}
      | RCINDEXOF of string * Types.ty * Loc.loc
      | RCLET of {body:rcexp list, decls:rcdecl list, loc:Loc.loc, tys:Types.ty list}
      | RCMODIFY of {elementExp:rcexp, elementTy:Types.ty, indexExp:rcexp,
                     label:string, loc:Loc.loc, recordExp:rcexp, recordTy:Types.ty}
      | RCMONOLET of {binds:(Types.varInfo * rcexp) list, bodyExp:rcexp, loc:Loc.loc}
      | RCOPRIMAPPLY of {argExp:rcexp, instTyList:Types.ty list, loc:Loc.loc,
                         oprimOp:Types.oprimInfo}
      | RCPOLY of {btvEnv:Types.btvEnv, exp:rcexp, expTyWithoutTAbs:Types.ty, loc:Loc.loc}
      | RCPOLYFNM of {argVarList:Types.varInfo list, bodyExp:rcexp, bodyTy:Types.ty,
                      btvEnv:Types.btvEnv, loc:Loc.loc}
      | RCPRIMAPPLY of {argExp:rcexp, instTyList:Types.ty list, loc:Loc.loc,
                        primOp:Types.primInfo}
      | RCRAISE of {exp:rcexp, loc:Loc.loc, ty:Types.ty}
      | RCRECORD of {fields:rcexp LabelEnv.map, loc:Loc.loc, recordTy:Types.ty}
      | RCSELECT of {exp:rcexp, expTy:Types.ty, indexExp:rcexp, label:string,
                     loc:Loc.loc, resultTy:Types.ty}
      | RCSEQ of {expList:rcexp list, expTyList:Types.ty list, loc:Loc.loc}
      | RCSIZEOF of Types.ty * Loc.loc
      | RCSQL of rcsqlexp * Types.ty * Loc.loc
      | RCSWITCH of {branches:(Absyn.constant * rcexp) list, defaultExp:rcexp,
                     expTy:Types.ty, loc:Loc.loc, switchExp:rcexp}
      | RCTAGOF of Types.ty * Loc.loc
      | RCTAPP of {exp:rcexp, expTy:Types.ty, instTyList:Types.ty list, loc:Loc.loc}
      | RCVAR of Types.varInfo * Loc.loc
    and rcsqlexp
      = RCSQLSERVER of {schema:Types.ty LabelEnv.map LabelEnv.map,
                        server:string}
    and rcffiexp = RCFFIIMPORT of {ffiTy:TypedCalc.ffiTy, ptrExp:rcexp}
    and rcdecl
      = RCEXD of {exnInfo:Types.exnInfo, loc:Loc.loc} list * Loc.loc
      | RCEXNTAGD of {exnInfo:Types.exnInfo, varInfo:Types.varInfo} * Loc.loc
      | RCEXPORTEXN of Types.exnInfo * Loc.loc
      | RCEXPORTVAR of {internalVar:Types.varInfo, externalVar:Types.exVarInfo, loc:Loc.loc}
      | RCEXTERNEXN of Types.exExnInfo * Loc.loc
      | RCEXTERNVAR of Types.exVarInfo * Loc.loc
      | RCVAL of (Types.varInfo * rcexp) list * Loc.loc
      | RCVALPOLYREC of Types.btvEnv * {exp:rcexp, expTy:Types.ty, var:Types.varInfo} list * Loc.loc
      | RCVALREC of {exp:rcexp, expTy:Types.ty, var:Types.varInfo} list * Loc.loc
    val format_rcexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcexp -> SMLFormat.FormatExpression.expression list
    val format_rcsqlexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcsqlexp -> SMLFormat.FormatExpression.expression list
    val format_rcffiexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcffiexp -> SMLFormat.FormatExpression.expression list
    val format_rcdecl
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcdecl TermFormat.formatter
    val formatWithoutType_rcexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcexp -> TermFormat.format
    val formatWithoutType_rcsqlexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcsqlexp -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_rcffiexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcffiexp -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_rcdecl
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcdecl TermFormat.formatter
    val format_rcdecl' : rcdecl TermFormat.formatter
    val formatWithoutType_rcdecl' : rcdecl TermFormat.formatter
  end

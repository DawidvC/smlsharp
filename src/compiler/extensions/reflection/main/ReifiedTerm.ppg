(**
 * @copyright (c) 2012- Tohoku University.
 * @author Atsushi Ohori
 *)
structure ReifiedTerm =
struct

  fun format_if (thenFmt, elseFmt) true = thenFmt
    | format_if (thenFmt, elseFmt) false = elseFmt

  (*%
     @formatter(ReifiedTy.reifiedTy) ReifiedTy.format_reifiedTy
     @formatter(option) TermPrintUtils.formatPrependedOpt
     @formatter(optcase) TermPrintUtils.formatOptCase
     @formatter(standardOption) TermPrintUtils.formatOption
     @formatter(standardString) SMLFormat.BasicFormatters.format_string
     @formatter(choice) format_if
     @formatter(int) TermPrintUtils.format_int
     @formatter(int8) TermPrintUtils.format_int8
     @formatter(int16) TermPrintUtils.format_int16
     @formatter(int64) TermPrintUtils.format_int64
     @formatter(string) TermPrintUtils.format_string
     @formatter(label) TermPrintUtils.format_label
     @formatter(real) TermPrintUtils.format_real
     @formatter(char) TermPrintUtils.format_char
     @formatter(word) TermPrintUtils.format_word32
     @formatter(word8) TermPrintUtils.format_word8
     @formatter(word16) TermPrintUtils.format_word16
     @formatter(word64) TermPrintUtils.format_word64
     @formatter(real32) TermPrintUtils.format_real32
     @formatter(list) TermPrintUtils.formatElements
     @formatter(lazyArray) TermPrintUtils.format_lazyArray
     @formatter(intInf) TermPrintUtils.format_IntInf
   *)
  (*%
     @prefix toJSON_
     @formatter(ReifiedTy.reifiedTy) ReifiedTy.format_reifiedTy
     @formatter(standardOption) TermPrintUtils.formatOption
     @formatter(standardString) SMLFormat.BasicFormatters.format_string
     @formatter(choice) format_if
     @formatter(option) TermPrintUtils.formatPrependedOpt
     @formatter(int) TermPrintUtils.format_int_json
     @formatter(int8) TermPrintUtils.format_int8
     @formatter(int16) TermPrintUtils.format_int16
     @formatter(int64) TermPrintUtils.format_int64
     @formatter(string) TermPrintUtils.format_string
     @formatter(label) TermPrintUtils.format_label
     @formatter(real) TermPrintUtils.format_real_json
     @formatter(char) TermPrintUtils.format_char
     @formatter(word) TermPrintUtils.format_word32
     @formatter(word8) TermPrintUtils.format_word8
     @formatter(word16) TermPrintUtils.format_word16
     @formatter(word64) TermPrintUtils.format_word64
     @formatter(real32) TermPrintUtils.format_real32
     @formatter(list) TermPrintUtils.formatElements
     @formatter(lazyArray) TermPrintUtils.format_lazyArray
     @formatter(intInf) TermPrintUtils.format_IntInf
   *)
  datatype reifiedTerm
    = (*% @format({dummyPrinter, contentsFn})
          {"<" 2[1 contentsFn:lazyArray(dummyPrinter)(","+2, ","+d)] 1 ">"}
       *)
      (*%
         @prefix toJSON_
         @format({dummyPrinter, contentsFn})
          { "[" 2[1 contentsFn:lazyArray(dummyPrinter)(","1,","1)] 1"]" }
       *)
      ARRAY of {dummyPrinter:reifiedTerm,
                contentsFn:(int option -> {contents:reifiedTerm list, hasEllipsis:bool})
               }
    | (*%
         @format(term terms)
          { "<" 2[1 terms(term)(","+2)] 1 ">" }
        *)              
      (*%
         @prefix toJSON_
         @format(term terms)
          { "[" 2[1 terms(term)(","+2)] 1 "]" }
       *)
      ARRAY2 of reifiedTerm array
    | (*% @format(bool) bool
       *)
      (*% @prefix toJSON_
          @format(bool) bool
       *)
      BOOL of bool
    | (*% @format
       *)
      (*% @prefix toJSON_
          @format
       *)
      BOUNDVAR
    | (*% @format(char) char
       *)
      (*% @prefix toJSON_
          @format(char) char
       *)
      CHAR of char
    | (*% @format(word) word
       *)
      (*% @prefix toJSON_
          @format(word) word
       *) 
      CODEPTR of word64
    | (*% @format(con:label * term opt)
          opt:optcase(term)(con:label, L8{ 1[con:label opt(term)(+1)] })
       *)
      (*% @prefix toJSON_
          @format(con:label * term opt)
          L8{ 2[con +1 opt(term)(+1)] }
       *)
      DATATYPE of string * reifiedTerm option
    | (*% @format({exnName,hasArg})
       * hasArg:choice()(
       *   L8{ 2[ exnName:standardString +1 "..." ] },
       *   exnName:standardString
       * )
       *)
      (*% @prefix toJSON_
          @format({exnName,hasArg}) "exn"
       *)
      EXN of {exnName : string, hasArg : bool}
    | (*% @format "contag"
       *)
      (*% @prefix toJSON_
          @format "contag"
       *)
      EXNTAG
    | (*% @format(int) int
       *)
      (*% @prefix toJSON_
          @format(int) int
       *)
      INT of int
    | (*% @format(int) int
       *)
      (*% @prefix toJSON_
          @format(int) int
       *)
      INT8 of int8
    | (*% @format(int) int
       *)
      (*% @prefix toJSON_
          @format(int) int
       *)
      INT16 of int16
    | (*% @format(int64) int64
       *)
      (*% @prefix toJSON_
          @format(int64) int64
       *)
      INT64 of int64
    | (*% @format "?"
       *)
      (*% @prefix toJSON_
          @format "?"
       *)
      INTERNAL 
    | (*% @format(int) int
       *)
      (*% @prefix toJSON_
          @format(int) int
       *)
      INTINF of intInf
    | (*% @format(term terms)
          { "[" 1[1 terms(term)(","+2, ","+d)] 1 "]" }
       *)
      (*%
         @prefix toJSON_
         @format(term terms)
          { "[" 1[1 terms(term)(","1,","1)] 1 "]" }
       *)
      LIST of reifiedTerm list
    | (*% @format "_"
       *)
      (*% @prefix toJSON_
          @format "_"
       *)
      OPAQUE
    | (*% @format(term opt) L8{ opt:standardOption(term)(+1,)}
       *)
      (*% @prefix toJSON_
          @format(term opt) opt:standardOption(term)(+1,)
       *)
      OPTION of reifiedTerm option
    | (*% @format "NONE"
       *)
      (*% @prefix toJSON_
          @format "null"
       *)
      OPTIONNONE
    | (*% @format(arg) 
          L8{ 2["SOME" +1 arg] }
       *)
      (*% @prefix toJSON_
          @format(arg) arg
       *)
      OPTIONSOME of reifiedTerm
    | (*% @format(term) term
       *)
      (*% @prefix toJSON_
          @format(term) term
       *)
      POLY of reifiedTerm
    | (*% @format(word) word
       *)
      (*% @prefix toJSON_
          @format(word) word
       *)
      PTR of word64
    | (*% @format(real) real
       *)
      (*% @prefix toJSON_
          @format(real) real
       *)
      REAL32 of real32
    | (*% @format(real) real
       *)
      (*% @prefix toJSON_
          @format(real) real
       *)
      REAL of real
    | (*% @format(field terms)
          {"{" 2[1 terms(field)(","+2,","+2)] 1"}" }
         @format:field(name:label * term) 
           { name + "=" + term }
       *)
      (*%
         @prefix toJSON_
         @format(field terms)
         !N0{"{"  2[1 terms(field)(","+1,","+1)] 1 "}" }
         @format:field(name:label * term) 
           { name  ":"  term }
       *)
      RECORD of (string * reifiedTerm) list
    | (*% @format(term) 
         L8{"ref" + term}
       *)
      (*% @prefix toJSON_
          @format(term)
       *)
      REF of reifiedTerm
    | (*% @format(string) string
       *)
      (*% @prefix toJSON_
          @format(string) string
       *)
      STRING of string
    | (*%
         @format(field terms)
         !N0{"(" 1[1 terms(field)(","1, ","1)] 1 ")" }
       *)
      (*%
         @prefix toJSON_
         @format(field terms)
         !N0{"(" 1[1 terms(field)(","1,","1)] 1 ")" }
       *)
      TUPLE of reifiedTerm list
    | (*% @format "()"
       *)
      (*% @prefix toJSON_
          @format "{}"
       *)
      UNIT 
    | (*%
         @format({dummyPrinter, contentsFn})
          {"<|" 2[1 contentsFn:lazyArray(dummyPrinter)(","+2, ","+d)] 1 "|>"}
       *)
      (*%
         @prefix toJSON_
         @format({dummyPrinter, contentsFn})
          {"<|" 2[1 contentsFn:lazyArray(dummyPrinter)(","+2, ","+d)] 1 "|>"}
       *)
      VECTOR of {dummyPrinter:reifiedTerm,
                      contentsFn: (int option -> {contents:reifiedTerm list, hasEllipsis:bool})
                     }
    | (*% @format(term terms)
          { "<|" 2[1 terms(term)(","+2)] 1 "|>" }
        *)              
      (*% @prefix toJSON_ 
          @format(term terms)
          { "<|" 2[1 terms(term)(","+2)] 1 "|>" }
       *)
       VECTOR2 of reifiedTerm vector
    | (*% @format(word) word
       *)
      (*% @prefix toJSON_
          @format(word) word
       *)
      WORD of word
    | (*% @format(word) word
       *)
      (*% @prefix toJSON_
          @format(word) word
       *)
      WORD8 of word8
    | (*% @format(word) word
       *)
      (*% @prefix toJSON_
          @format(word) word
       *)
      WORD16 of word16
    | (*% @format(word64) word64
       *)
      (*% @prefix toJSON_
          @format(word64) word64
       *)
      WORD64 of word64
    | (*% @format(ptr) "fn"
       *)
      (*% @prefix toJSON_
          @format({closure:ptr, ty}) "fn"
       *)
      FUN of {closure:boxed, ty:ReifiedTy.reifiedTy}
    | (*% @format "_"
       *)
      (*% @prefix toJSON_
          @format "_"
       *)
      UNPRINTABLE 
    | (*% @format "..."
       *)
      (*% @prefix toJSON_
          @format "..."
       *)
      ELIPSIS 
    | (*% @format "<builtin>"
       *)
      (*% @prefix toJSON_
          @format "<builtin>"
       *)
      BUILTIN

  fun reifiedTermToString term =
      SMLFormat.prettyPrint nil (format_reifiedTerm term)
  fun reifiedTermToJSON term =
      SMLFormat.prettyPrint nil (toJSON_reifiedTerm term)

  (*% *)
  type path =
    (*%
       @format(name names)  names(name)(".")
     *)
    string list

  fun ifMultilines (nl, sp) s =
      if List.length (String.fields (fn x => x = #"\n") s) > 1 
         orelse String.size s > 60
      then nl
      else sp

  (*%
     @formatter(option) TermPrintUtils.formatPrependedOpt
     @formatter(makeLines) TermPrintUtils.makeLines
     @formatter(ifMultilines) ifMultilines
   *)
  datatype idstatus 
    = (*
         @format({name, term, ty})
          {2[ "val" + name + "=" +1 term ty:ifMultilines()(\n,+) ":" + {ty:makeLines} ] }
          {2[ "val" + name + "=" +1 term +1 ":" + ty:makeLines ] }
       *)
      (*%
         @format({name, term, ty})
          {2[ "val" + name + "=" +1 term ty:ifMultilines()(\n,+) ":" + {ty:makeLines}] }
       *)
      EXVAR of {name:string, term:reifiedTerm, ty:string}
    | (*%
         @format({name, ty})
          {2[ "val" + name + ":" + {ty:makeLines}] }
       *)
      EXVARTY of {name:string, ty:string}
    | (*%
         @format({name, ty:ty opt})
          {"exception" + name opt(ty:makeLines)(+"of"+)}
       *)
      EXEXN of {name:string, ty:string option}
    | (*%
         @format({name, path})
           {"exception" + name + "=" + path}
       *)
      EXEXNREP of {name:string, path:string}

  fun mkEXEXNIdstatus string stringOption =
      EXEXN {name = string, ty = stringOption}

  fun mkEXEXNREPIdstatus string pathString =
      EXEXNREP {name = string, path = pathString}

  fun mkEXVarIdstatus string reifiedTerm tyString =
      EXVAR {name = string, term = reifiedTerm, ty = tyString}

  (*% 
      @formatter(makeLines) TermPrintUtils.makeLines
   *)
  (*% 
      @prefix structure_
      @formatter(makeLines) TermPrintUtils.makeLines
   *)
  type tstr 
    = (*%
         @format(name * def:makeLines) 
          def
       *)  
      (*%
         @prefix structure_
         @format(name * def:makeLines) 
          def
       *)  
      string * string

  (*%
     @formatter(ifCons) TermPrintUtils.formatIfCons
  *)
  type varE
    = (*%
         @format(var vars) 
           vars(var)(\n)
       *)
      idstatus list

  (*%
  *)
  (*%
    @prefix structure_
  *)
  type tyE
    = (*%
         @format(ty tys) 
           tys(ty)(\n)
       *)
      (*%
         @prefix structure_
         @format(ty tys) 
           tys(ty)(\n)
       *)
      tstr list

  fun ifNonEmptyTyEVarE (varE,exp) tyE =
      if null(tyE) orelse null(varE) then nil
      else exp
  fun ifNonEmptyTyEVarEStrE (varE,tyE,exp) strs =
      if null(strs) orelse null(varE) andalso null(tyE) then nil
      else exp
  fun ifNonEmptyTyEStrE (tyE,exp) strs =
      if null(strs) orelse null(tyE) then nil
      else exp
  fun ifNonEmptyEnv (env, exp) _ =
      if null(env) then nil
      else exp @ env
  (*%
     @formatter(ifCons) TermPrintUtils.formatIfCons
     @formatter(ifNonEmptyTyEVarE) ifNonEmptyTyEVarE
     @formatter(ifNonEmptyTyEVarEStrE) ifNonEmptyTyEVarEStrE
     @formatter(ifNonEmptyEnv) ifNonEmptyEnv
   *)
  (*%
     @prefix structure_
     @formatter(ifCons) TermPrintUtils.formatIfCons
     @formatter(ifNonEmptyTyEVarE) ifNonEmptyTyEVarE
     @formatter(ifNonEmptyTyEStrE) ifNonEmptyTyEStrE
     @formatter(ifNonEmptyEnv) ifNonEmptyEnv
   *)
  datatype env 
    = (*%
         @format({varE, tyE, strE:str strs})
          tyE
          tyE:ifNonEmptyTyEVarE()(varE,\n)
          varE
          strs:ifNonEmptyTyEVarEStrE()(varE,tyE,\n)
          strs(str)(\n)
       *)
     (*%
         @prefix structure_
         @format({varE, tyE, strE:str strs})
          strs(str)(\n)
       *)
      ENV of {varE:varE, tyE:tyE, strE:strentry list}
  withtype strentry
   = (*%
         @format(name*env)
           "structure" + name + "="
          2[
           \n
           "struct"
             2[
               env:ifNonEmptyEnv()(env,\n)
              ]
           \n
           "end"
           ]
       *)
     (*%
         @prefix structure_
         @format(name*env)
          name
          2[
             env:ifNonEmptyEnv()(env,\n)
           ]
       *)
     string * env

  type strE = strentry list
  fun mkENVenv varE tyE strE =
      ENV {varE = varE, tyE = tyE, strE = strE}

  (*% 
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  (*% 
     @prefix structure_
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  type funE
    = (*%
         @format(functor functors) 
           functors(functor)(\n)
       *)
      (*%
         @prefix structure_
         @format(functor functors) 
           functors(functor)(\n)
       *)
      string list

  (*% *)
  (*% 
     @prefix structure_
   *)
  type sigentry 
    = (*%
         @format(name * sige) 
         "signature" + name + "="
           2[
            \n
            "sig"
              2[sige]
            \n
            "end"
           ]
       *)
     (*%
         @prefix structure_
         @format(name * sige)
           "signature" + name
       *)
     string * string

  (*% 
   *)
  (*% 
     @prefix structure_
   *)
  type sigE = 
  (*% 
     @format(sigE) sigE
   *)
  (*% 
     @prefix structure_
     @format(sigE) sigE
   *)
     string

  fun printEnv (env,nl) string =
      if String.size string = 0 
      then if null(env) then nil
           else env @ nl
      else if null(env) then nl
      else nl @ env @ nl
  (*%
     @formatter(printEnv) printEnv
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  (*%
     @prefix structure_
     @formatter(printEnv) printEnv
     @formatter(ifCons) TermPrintUtils.formatIfCons
   *)
  type topEnv 
    = (*%
         @format({Env, FunE, SigE}) 
           FunE
           FunE:ifCons()(\n)
           SigE
           SigE:printEnv()(Env,\n)
       *)
      (*%
         @prefix structure_
         @format({Env, FunE, SigE}) 
            Env
       *)
       {Env:env, FunE:funE, SigE:sigE}

  fun mkTopEnv env funE sigE =
       {Env = env, FunE = funE, SigE = sigE}

  val printTopEnvOutput = ref print

  fun printTopEnv topEnv = 
      !printTopEnvOutput
        (SMLFormat.prettyPrint nil (format_topEnv topEnv))

  fun printStructureTopEnv topEnv = 
      !printTopEnvOutput
        (SMLFormat.prettyPrint nil (structure_topEnv topEnv) ^ "\n")


end

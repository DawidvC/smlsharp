(**
 * @copyright (c) 2016- Tohoku University.
 * @author Atsushi Ohori
 *)
structure JSONTypes =
struct
  type format = SMLFormat.FormatExpression.expression list

  (*% *)
  datatype null 
    = (*% @format "null" *)
      NULL

  (*% *)
  datatype void 
    = (*% @format "void" *)
      VOID

  (* JSON Types *)
  (*%
     @formatter(label) TermPrintUtils.format_label
     @formatter(list) TermPrintUtils.formatElements
   *)
  datatype jsonTy 
    = (*% @format "DYNty" *)
      DYNty
    | (*% @format "NULLty" *)
      NULLty
    | (*% @format "BOOLty" *)
      BOOLty
    | (*% @format "INTty" *)
      INTty
    | (*% @format "REALty" *)
      REALty
    | (*% @format "STRINGty" *)
      STRINGty
    | (*% @format(jsonTy) "ARRAYty(" jsonTy ")" *)
      ARRAYty of jsonTy
    | (*% 
         @format(field fields)
          {
           "RECORDty {"
              2[1 fields(field)(","+2,","+2)]
            1
           "}"
          }
         @format:field(name:label * term) 
           { name ":" term }
       *)
      RECORDty of (string * jsonTy) list
    | (*% 
         @format(field fields)
          {
           "PARTIALRECORDty {"
              2[1 fields(field)(","+2,","+2)]
            1
           "}"
          }
         @format:field(name:label * term) 
           { name ":" term }
       *)
      PARTIALRECORDty of (string * jsonTy) list
    | (*% @format "PARTIALINTty" *)
      PARTIALINTty
    | (*% @format "PARTIALBOOLty" *)
      PARTIALBOOLty
    | (*% @format "PARTIALSTRINGty" *)
      PARTIALSTRINGty
    | (*% @format "PARTIALREALty" *)
      PARTIALREALty
    | (*% @format(jsonTy) "OPTIONty(" jsonTy ")" *)
      OPTIONty of jsonTy

  fun jsonTyToString jsonTy =
      SMLFormat.prettyPrint nil (format_jsonTy jsonTy)

  (* Typed JSON Objects *)
  (*%
     @formatter(int) TermPrintUtils.format_int
     @formatter(string) TermPrintUtils.format_string
     @formatter(real) TermPrintUtils.format_real
     @formatter(label) TermPrintUtils.format_label
     @formatter(list) TermPrintUtils.formatElements
   *)
  datatype json
    = (*% 
         @format(json fields * jsonTy)
          {
           "ARRAY ["
              2[1 fields(json)(","+2,","+2)]
            1
           "]" 
           + ":" + jsonTy
           }
       *)
      ARRAY of json list * jsonTy
    | (*% @format(bool) "BOOL(" bool ")" *)
      BOOL of bool
    | (*% @format(int) "INT(" int ")" *)
      INT of int
    | (*% @format(real) "REAL(" real ")" *)
      REAL of real
    | (*% @format(string) "STRING(" string ")" *)
      STRING of string
    | (*% @format "NULLObject" *)
      NULLObject
    | (*% 
         @format(field fields)
          {
           "OBJECT {"
              2[1 fields(field)(","+2,","+2)]
            1
           "}"
          }
         @format:field(name:label * term) 
           { name  "="  term }
       *)
      OBJECT of (string * json) list

  fun jsonToString json =
      SMLFormat.prettyPrint nil (format_json json)

  (*
     @formatter(option) TermPrintUtils.formatPrependedOpt
     @formatter(int) TermPrintUtils.format_int
     @formatter(int64) TermPrintUtils.format_int64
     @formatter(string) TermPrintUtils.format_string
     @formatter(label) TermPrintUtils.format_label
     @formatter(real) TermPrintUtils.format_real
     @formatter(char) TermPrintUtils.format_char
     @formatter(Word8.word) TermPrintUtils.format_word8
     @formatter(Word.word) TermPrintUtils.format_word32
     @formatter(Word64.word) TermPrintUtils.format_word64
     @formatter(Real32.real) TermPrintUtils.format_real32
     @formatter(list) TermPrintUtils.formatElements
   *)
  datatype 'a dyn 
    = DYN of (json -> 'a) * json

  fun eqJson (j1, j2) =
      case (j1,j2) of
        (ARRAY (arg1, ty1), ARRAY (arg2, ty2)) => 
        ty1 = ty2 andalso ListPair.allEq eqJson (arg1, arg2)
      | (BOOL b1, BOOL b2) =>  b1 = b2
      | (INT i1, INT i2) =>  i1 = i2
      | (STRING s1, STRING s2) => s1 = s2
      | (REAL r1, REAL r2) =>  Real.==(r1,r2)
      | (OBJECT fields1, OBJECT fields2)=> 
        ListPair.allEq (fn ((l1,j1), (l2,j2)) => l1 = l2 andalso eqJson (j1, j2)) 
        (fields1, fields2)
      | _ => false
  
end

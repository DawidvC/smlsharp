(**
 * @copyright (c) 2006, Tohoku University.
 * @author Huu-Duc Nguyen 
 * @version $Id: MultipleValueCalc.ppg,v 1.4 2007/06/19 22:19:12 ohori Exp $
 *)

structure MultipleValueCalc = struct

 structure BT = BasicTypes

 type loc = Loc.loc

 (*%
  * @formatter(Absyn.callingConvenvtion) Absyn.format_callingConvenvtion
  *)
 type callingConvention = Absyn.callingConvention

 (*%
  * @formatter(tyformat) AnnotatedTypes.format_ty
  *)
 type ty = 
  (*%
   * @format(ty:tyformat) ty
   *)
   AnnotatedTypes.ty


 (*% 
  * @formatter(ID.id) ID.format_id
  *)
 type id = 
     (*%
      * @format(id) id
      *)
      ID.id

 (*%
  * @formatter(formatVarInfo) AnnotatedTypes.format_varInfo        
  *)
 type varInfo = 
      (*%
       * @format(v:formatVarInfo) v
       *) 
      AnnotatedTypes.varInfo

 (*%
  * @formatter(formatVarInfo) AnnotatedTypes.format_varInfoWithoutType
  *)
 type varInfoWithoutType =
      (*%
       * @format(v:formatVarInfo) v
       *) 
      AnnotatedTypes.varInfo

 (*% 
  * @formatter(formatPrimInfo) AnnotatedTypes.format_primInfo
  *)
 type primInfo =
      (*%
       * @format(v:formatPrimInfo) v
       *)
      AnnotatedTypes.primInfo

 (*%
  * @formatter(AnnotatedTypes.annotationLabel) AnnotatedTypes.format_annotationLabel
  *)
 type annotationLabel = 
      (*%
       * @format(value) value
       *)
      AnnotatedTypes.annotationLabel

 (*%
  * @formatter(format_btvEnv) AnnotatedTypes.format_btvEnv
  *)
 type btvEnv = 
      (*%
       * @format(v:format_btvEnv) v
       *)
      AnnotatedTypes.btvEnv 

 datatype constant = datatype ConstantTerm.constant

(*%
 *
 * @formatter(enclosedListIfMoreThanOne) SmlppgUtil.formatListWithEnclosureIfMoreThanOne
 * @formatter(formatConst) ConstantTerm.format_constant
 * @formatter(formatListWithEnclosure) SmlppgUtil.formatListWithEnclosure
 * @formatter(formatUInt32) BasicTypeFormatters.format_UInt32
 * @formatter(format_varInfoWithoutType) format_varInfoWithoutType
 * @formatter(formatBtvEnv) format_btvEnv
 *)
 datatype mvexp =
          (*%
           * @format(
           *        {
           *          funExp,
           *          funTy,
           *          argExpList: arg args:formatListWithEnclosure,
           *          convention,
           *          loc:loc
           *         }
           *        )
           * R1{d
           *      {
           *        funExp
           *        {args(arg)(","1,"(",")")}
           *      }
           *   }
           *)
          MVFOREIGNAPPLY of 
          {
           funExp : mvexp,
           funTy : ty, 
           argExpList : mvexp list, 
           convention : callingConvention,
           loc : loc
          }
        | (*%
           * @format({funExp,
           *          funTy,
           *          loc})
           * L10{ "CALLBACK(" funExp
           *              ")" }
           *)
          MVEXPORTCALLBACK of 
          {
           funExp : mvexp,
	   funTy : ty,
           loc: loc
          }
        | (*%
           * @format({ty, loc}) "_sizeof(" ty ")"
           *)
          MVSIZEOF of {ty : ty, loc : loc}
        | (*%
           * @format({value:value:formatConst, loc}) value
           *)
          MVCONSTANT of {value : constant, loc : loc}
        | (*%
           * @format({tagValue,loc}) tagValue
           *)
          MVEXCEPTIONTAG of {tagValue : int, loc : loc}
        | (*%
           * @format({varInfo:varInfo:format_varInfoWithoutType, loc}) varInfo
           *)
          MVVAR of {varInfo : varInfo, loc : loc}
        | (*%
           * @format(
           *         {
           *          arrayIndex:arrayIndex:formatUInt32, 
           *          valueIndex, 
           *          valueTy,
           *          loc
           *         }) 
           * "GetGlobal(" arrayIndex "," valueIndex ")"
           *)
          MVGETGLOBAL of {arrayIndex : BT.UInt32, valueIndex : int, valueTy : ty, loc: loc}
        | (*%
           * @format(
           *          {
           *           arrayIndex:arrayIndex:formatUInt32,
           *           valueIndex,
           *           valueExp,
           *           valueTy,
           *           loc
           *          }) 
           * "SetGlobal((" arrayIndex "," valueIndex ") = " valueExp ")"  
           *)
          MVSETGLOBAL of {arrayIndex : BT.UInt32, valueIndex : int, valueExp: mvexp, valueTy : ty, loc : loc}
        | (*%
           * @format({arrayIndex:arrayIndex:formatUInt32,size,elementTy,loc}) 
           * "InitialArray(" arrayIndex "," size ")"
           *)
          MVINITARRAY of {arrayIndex : BT.UInt32, size : int, elementTy : ty, loc : loc}
        | (*%
           * @format({arrayExp, indexExp, elementTy, loc})
           * "arraySub(" arrayExp "," indexExp ")" ":" elementTy
           *)
          MVGETFIELD of {arrayExp : mvexp, indexExp : mvexp, elementTy : ty, loc : loc}
        | (*%
           * @format({valueExp, arrayExp, indexExp, elementTy, loc})  
           * "SetField"
           * + arrayExp "[" indexExp "]" "=" valueExp 
           *)
          MVSETFIELD of 
          {
           valueExp : mvexp, 
           arrayExp : mvexp, 
           indexExp : mvexp, 
           elementTy : ty, 
           loc: loc
          }
        | (*%
           * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel, loc})  
           * "SetTail"
           * + consExp "[2]" "=" newTailExp 
           *)
          MVSETTAIL of 
          {
           consExp : mvexp, 
           newTailExp : mvexp, 
	   tailLabel : string,
	   listTy : ty,
	   consRecordTy : ty,
           loc: loc
          }
        | (*%
           * @format({sizeExp, initialValue, elementTy, loc}) 
           * !N0 {
           *       elementTy "[" 2[1 sizeExp ] 1"]" "{" initialValue "}"
           *	 }
           *)
          MVARRAY of 
          {
           sizeExp : mvexp, 
           initialValue : mvexp, 
           elementTy : ty, 
           loc : loc
          }
        | (*%
           * @format(
           *         {
           *          primInfo,
           *          argExpList:arg args:formatListWithEnclosure,
           *          loc
           *          }
           *         )
           *       R1{d {primInfo 1 {args(arg)(","1,"(",")")}}}
           *)
          MVPRIMAPPLY of 
          {
           primInfo : primInfo, 
           argExpList : mvexp list,
           loc : loc
          }
        | (*%
           * @format({funExp, funTy, argExpList:arg args:enclosedListIfMoreThanOne, loc})  
           *   L10{ 
           *   funExp 
           *      2[
           *      +1 
           *        !N0{
           *             2[args(arg)(","+2, "{", "}")] 
           *           } 
           *      1
           *      ]
           *   }
           *)
          MVAPPM of 
          {
           funExp : mvexp, 
           funTy : ty, 
           argExpList : mvexp list,
           loc : loc
          }
        | (*%
           * @format({localDeclList : dec decs, mainExp, loc})
           *     !N0{ {"let" 2[ +1 decs(dec)( +1) ]}  +1
           *          {"in" 2[ +2 mainExp ] +2
           *           "end"} }
           *)
          MVLET of 
          {
           localDeclList : mvdecl list,
           mainExp : mvexp,
           loc : loc
          }
        | (*%
           * @format({expList:field fields:enclosedListIfMoreThanOne, tyList, loc}) 
           *      fields(field)(","+,"{","}")
           *)
          MVMVALUES of {expList : mvexp list, tyList : ty list, loc : loc}
        | (*%
           * @format({expList:field fields, recordTy, annotation, isMutable, loc}) 
           *  !N0{"(" d 2[ fields(field)("," +1) ] d ")" }
           *)
          MVRECORD of 
          {
           expList : mvexp list,
           recordTy : ty,
           annotation : annotationLabel,
	   isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({recordExp, label, recordTy, loc})
           *     recordExp "[" label "]"
           *)
          MVSELECT of 
          {
           recordExp : mvexp, 
           label : string, 
           recordTy : ty, 
           loc : loc
          }
        | (*%
           * @format({recordExp, recordTy, label, valueExp, valueTy, loc})
           *   recordExp "[" label "=" valueExp "]"
           *)
          MVMODIFY of 
          {
           recordExp : mvexp, 
           recordTy : ty, 
           label : string, 
           valueExp : mvexp,
           valueTy : ty,
           loc : loc
          }
        | (*%
           * @format({argExp, resultTy, loc}) N0{ "raise" +d {argExp} +d ":" resultTy}
           *)
          MVRAISE of 
          {
           argExp : mvexp, 
           resultTy : ty, 
           loc : loc
          }
        | (*%
           * @format({exp, exnVar, handler, loc})
           *      "handle" + N0{exp} +1
           *      "with letexp" +  exnVar  + "in" + {handler}
           *)
          MVHANDLE of
          {
           exp : mvexp,
           exnVar : varInfo,
           handler : mvexp,
           loc : loc
          }
        | (*%
           * @format({argVarList:arg args:enclosedListIfMoreThanOne, funTy, bodyExp, annotation, loc}) 
           *     R1{ 
           *        "fn" + {args(arg)(","+, "{", "}") + "=>" }
           *         2[ +1 {bodyExp}]
           *      }
           *)
          MVFNM of 
          {
           argVarList : varInfo list, 
           funTy : ty, 
           bodyExp : mvexp,
           annotation : annotationLabel,
           loc : loc
          }
        | (*%
           * @format({btvEnv:btvEnv:formatBtvEnv, expTyWithoutTAbs, exp, loc})
           *  {
           *   "[" btvEnv "." 
           *      2[
           *        +1
           *        {exp}
           *       ] 
           *    +1 
           *    "]"
           *  }
           *)
          MVPOLY of 
          {
           btvEnv : btvEnv,
           expTyWithoutTAbs : ty, 
           exp : mvexp, 
           loc : loc
          }
        | (*%
           * @format({exp, expTy, instTyList:tyArg tyArgs , loc}) 
           *    {
           *      exp 
           *        2[d 
           *           !N0{
           *               "{" 
           *                  d
           *                  2[
           *                    tyArgs(tyArg)("," +1) 
           *                   ]  
           *                  d
           *                "}" 
           *	     }
           *         ]
           *    }
           *)
          MVTAPP of 
          {
           exp : mvexp, 
           expTy : ty, 
           instTyList : ty list, 
           loc : loc
          }
        | (*%
           * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
           *    "switch" 
           *      2[+1 {switchExp}]
           *     +1 "of" +
           *     {rules(rule)(~2[+1 "|"] +)}
           *     +1 " |" +
           *     {"_ =>" 2[+1{defaultExp}]}
           * @format:rule({constant,exp})
           *     {constant + "=>" 2[+1{exp}]}
           *)
          MVSWITCH of 
          {
           switchExp : mvexp, 
           expTy : ty, 
           branches : {constant : mvexp , exp : mvexp} list, 
           defaultExp : mvexp, 
           loc : loc
          }
        | (*%
           * @format({exp, expTy, targetTy, loc}) 
           *   {
           *    "("
           *        +1
           *      2["cast" + 2[{exp} + ":" +1 {expTy}]]
           *        +1
           *        2["to" + 2[{targetTy}]]
           *      +1
           *    ")"
           *     }
           *)
          MVCAST of {exp : mvexp, expTy : ty, targetTy : ty, loc : loc}

      and mvdecl = 
          (*%
           * @format({boundVars:var vars, boundExp,loc})  
           *  2[
           *   "val" 
           *   + 
           *   vars:enclosedListIfMoreThanOne(var)(",","{","}") +d "=" +1 {boundExp}
           *   ]
           *)
          MVVAL of 
          {
           boundVars : varInfo list,
           boundExp : mvexp,
           loc : loc
          }
        | (*%
           * @format({recbindList:bind binds,loc})
           *  2[
           *    "val rec" 
           *    + 
           *    binds(bind)(~2[ +1 "and"] +)
           *    ]
           * @format:bind({boundVar, boundExp}) 
           *   boundVar +d "=" +1 {boundExp}
           *)
          MVVALREC of 
          {
           recbindList : {boundVar : varInfo, boundExp : mvexp } list,
           loc : loc
          }
        | (*%
           * @format({
           *          btvEnv:btvEnv:formatBtvEnv,
           *          recbindList : bind binds,
           *          loc : loc
           *         })
           *    {
           *     "[" 
           *       2[ 
           *         btvEnv "." 
           *          +1
           *          2[  
           *           "val rec" 
           *           +
           *           binds(bind)(~2[ +1 "and"] +)
           *           ]
           *        ]
           *      1 "]"
           *   }
           * @format:bind({boundVar, boundExp})
           *     boundVar +d "=" 
           *     +1
           *     {boundExp}
           *)
          MVVALPOLYREC of 
          {
           btvEnv : btvEnv,
           recbindList : {boundVar : varInfo, boundExp : mvexp } list,
           loc : loc
          }

end

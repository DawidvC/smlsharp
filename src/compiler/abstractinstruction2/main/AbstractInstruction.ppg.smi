_require "../../../basis.smi"
_require "../../../smlformat-lib.smi"
_require "../../../compiler-utils/env/main/IEnv.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"

_require "../../absyn/main/Absyn.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../systemdef/main/BasicTypes.smi"
_require "../../targetplatform/main/TargetPlatformFormatter.smi"
_require "../../targetplatform/main/TargetProperty.smi"
_require "../../targetplatform/main/VMTarget.smi"
_require "../../util/main/BigInt_IntInf.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"

structure AbstractInstruction2 =
struct
  structure Target = TargetProperty(VMTarget)
  structure Formatter = TargetPlatformFormatter(Target)
  type targetUInt = VMTarget.uint
  val format_targetUInt : Formatter.uint
                          -> SMLFormat.FormatExpression.expression list
  type targetSInt = VMTarget.sint
  val format_targetSInt : Formatter.sint
                          -> SMLFormat.FormatExpression.expression list
  type loc = Loc.loc
  val format_loc : Loc.pos * Loc.pos
                   -> SMLFormat.FormatExpression.expression list
  type id = VarID.id
  val format_id : VarID.id -> SMLFormat.FormatExpression.expression list
  type ffiAttributes = Absyn.ffiAttributes
  val format_ffiAttributes : Absyn.ffiAttributes
                             -> SMLFormat.FormatExpression.expression list
  type label = id
  val format_label : VarID.id
                     -> SMLFormat.FormatExpression.expression list
  type clusterId = ClusterID.id
  val format_clusterId : ClusterID.id
                         -> SMLFormat.FormatExpression.expression list
  type tid = BoundTypeVarID.id
  val format_tid : BoundTypeVarID.id
                   -> SMLFormat.FormatExpression.expression list
  datatype ty
    = BOXED
    | BYTE
    | CODEPOINTER
    | CPOINTER
    | DOUBLE
    | ENTRY
    | FLOAT
    | GENERIC of tid
    | HEAPPOINTER
    | SINT
    | UINT
  val format_ty : ty
                  -> SMLFormat.FormatExpression.expression list
  type paramInfo =
    {argTys:ty list, index:int,
     retTys:ty list}
  val format_paramInfo : {argTys:ty list, index:int,
                          retTys:ty list}
                         -> SMLFormat.FormatExpression.expression list
  val format_simple_paramInfo : {argTys:'a, index:int, retTys:'b}
                                -> SMLFormat.FormatExpression.expression list
  datatype argKind
    = Arg of paramInfo
    | Env
    | Exn
    | ExtArg of {argTys:ty list,
                 attributes:ffiAttributes, index:int}
    | ExtParam of {argTys:ty list,
                   attributes:ffiAttributes, index:int}
    | ExtRet of {attributes:ffiAttributes, index:int,
                 retTys:ty list}
    | Param of paramInfo
    | Result of paramInfo
    | Ret of paramInfo
  val format_argKind : argKind
                       -> SMLFormat.FormatExpression.expression list
  type varInfo =
    {displayName:string, id:id,
     ty:ty}
  type argInfo =
    {argKind:argKind, id:id,
     ty:ty}
  val format_argInfo : {argKind:argKind,
                        id:VarID.id, ty:'a}
                       -> SMLFormat.FormatExpression.expression list
  val format_varInfo : {displayName:'a, id:VarID.id,
                        ty:ty}
                       -> SMLFormat.FormatExpression.expression list
  datatype objectType = Array | Record of {mutable:bool} | Vector
  val format_objectType : objectType
                          -> SMLFormat.FormatExpression.expression list
  type globalLabel = string
  val format_globalLabel : string -> SMLFormat.FormatExpression.expression list
  datatype value
    = Byte of targetUInt
    | Const of id
    | Empty
    | Entry of {clusterId:clusterId,
                entry:label}
    | ExtFunLabel of string
    | Extern of globalLabel * ty
    | Global of globalLabel * ty
    | Init of id
    | Label of label
    | Nowhere
    | Null
    | SInt of targetSInt
    | UInt of targetUInt
    | Var of varInfo
  val format_value : value
                     -> SMLFormat.FormatExpression.expression list
  datatype primData
    = ByteData of targetUInt
    | ConstData of id
    | EntryData of {clusterId:clusterId,
                    entry:label}
    | ExternLabelData of globalLabel
    | FloatData of string
    | GlobalLabelData of globalLabel
    | NullBoxedData
    | NullPointerData
    | RealData of string
    | SIntData of targetSInt
    | UIntData of targetUInt
  val format_primData : primData
                        -> SMLFormat.FormatExpression.expression list
  datatype data
    = IntInfData of BigInt.int
    | ObjectData of {bitmaps:targetUInt list,
                     fields:{size:targetUInt,
                             value:primData} list,
                     objectType:objectType,
                     payloadSize:targetUInt}
    | PrimData of primData
    | StringData of string
    | VarSlot of {size:targetUInt,
                  value:primData option}
  val format_data : data
                    -> SMLFormat.FormatExpression.expression list
  datatype op1 = Abs | Cast | Neg | Notb | PayloadSize | SignExt | ZeroExt
  val format_op1 : SMLFormat.FormatExpression.expression list
                   -> op1
                      -> SMLFormat.FormatExpression.expression list
  datatype op2
    = Add
    | Andb
    | ArithRShift
    | Div
    | Gt
    | Gteq
    | LShift
    | Lt
    | Lteq
    | Mod
    | MonoEqual
    | Mul
    | Orb
    | PointerAdvance
    | Quot
    | RShift
    | Rem
    | Sub
    | UnorderedOrEqual
    | Xorb
  val format_op2 : SMLFormat.FormatExpression.expression list * 
                   SMLFormat.FormatExpression.expression list
                   -> op2
                      -> SMLFormat.FormatExpression.expression list
  datatype barrier
    = BarrierTag of value | NoBarrier | WriteBarrier | GlobalWriteBarrier
  val format_barrier : barrier
                       -> SMLFormat.FormatExpression.expression list
  datatype handler
    = DynamicHandler of {handlers:label list,
                         outside:bool}
    | NoHandler
    | StaticHandler of label
  val format_handler : handler
                       -> SMLFormat.FormatExpression.expression list
  val format_valof_handler : handler
                             -> SMLFormat.FormatExpression.expression list
  datatype handlerChange
    = PopHandler of {pushHandlerLabel:label}
    | PushHandler of {popHandlerLabel:label}
  val format_handlerChange : handlerChange
                             -> SMLFormat.FormatExpression.expression list
  datatype instruction
    = Alloc of {bitmaps:value list,
                dst:varInfo,
                loc:loc,
                objectType:objectType,
                payloadSize:value}
    | Call of {argList:argInfo list,
               argTyList:ty list,
               dstVarList:argInfo list,
               entry:value,
               env:argInfo, loc:loc,
               resultTyList:ty list}
    | CallExt of {argList:argInfo list,
                  attributes:ffiAttributes,
                  calleeTy:ty list * 
                           ty list,
                  dstVarList:argInfo list,
                  entry:value,
                  loc:loc}
    | CallbackClosure of {attributes:ffiAttributes,
                          dst:varInfo,
                          entry:value,
                          env:value,
                          exportTy:ty list * 
                                   ty list,
                          loc:loc}
    | ChangeHandler of {change:handlerChange,
                        loc:loc,
                        newHandler:handler,
                        previousHandler:handler,
                        tryBlock:label}
    | CheckBoundary of {failLabel:label,
                        loc:loc,
                        objectSize:value,
                        offset:value,
                        passLabel:label,
                        size:value}
    | Get of {dst:varInfo, loc:loc,
              src:argInfo, ty:ty}
    | If of {elseLabel:label,
             loc:loc,
             op2:op2 * ty * 
                 ty * ty,
             thenLabel:label,
             value1:value,
             value2:value}
    | Jump of {knownDestinations:label list,
               label:value, loc:loc}
    | Load of {block:value,
               dst:varInfo, loc:loc,
               offset:value,
               size:value, ty:ty}
    | Move of {dst:varInfo, loc:loc,
               ty:ty, value:value}
    | PrimOp1 of {arg:value,
                  dst:varInfo,
                  loc:loc,
                  op1:op1 * ty * 
                      ty}
    | PrimOp2 of {arg1:value,
                  arg2:value,
                  dst:varInfo,
                  loc:loc,
                  op2:op2 * ty * 
                      ty * ty}
    | Raise of {exn:argInfo,
                loc:loc}
    | RaiseExt of {attributes:ffiAttributes,
                   exn:argInfo,
                   loc:loc}
    | Return of {argTyList:ty list,
                 loc:loc,
                 retTyList:ty list,
                 varList:argInfo list}
    | ReturnExt of {argTyList:ty list,
                    attributes:ffiAttributes,
                    loc:loc,
                    retTyList:ty list,
                    varList:argInfo list}
    | Set of {dst:argInfo, loc:loc,
              ty:ty, value:value}
    | TailCall of {argList:argInfo list,
                   argTyList:ty list,
                   entry:value,
                   env:argInfo,
                   loc:loc,
                   resultTyList:ty list}
    | Update of {barrier:barrier,
                 block:value,
                 loc:loc,
                 offset:value,
                 size:value, ty:ty,
                 value:value}
  val format_instruction : instruction
                           -> SMLFormat.FormatExpression.expression list
  datatype blockKind
    = Basic
    | Branch
    | CheckFailed
    | CodeEntry
    | ExtFunEntry of {argTyList:ty list,
                      argVarList:argInfo list,
                      attributes:ffiAttributes,
                      env:argInfo option,
                      resultTyList:ty list}
    | FunEntry of {argTyList:ty list,
                   argVarList:argInfo list,
                   env:argInfo option,
                   resultTyList:ty list}
    | Handler of argInfo
    | LocalCont
    | Loop
    | Merge
  val format_blockKind : blockKind
                         -> SMLFormat.FormatExpression.expression list
  type basicBlock =
    {blockKind:blockKind,
     handler:handler,
     instructionList:instruction list,
     label:label, loc:loc}
  val format_basicBlock : {blockKind:blockKind,
                           handler:handler,
                           instructionList:instruction 
                                             list, label:VarID.id,
                           loc:'a}
                          -> SMLFormat.FormatExpression.expression list
  datatype frameBitmapSource
    = BitParam of argInfo
    | EnvBitmap of argInfo * word
  val format_frameBitmapSource : frameBitmapSource
                                 -> SMLFormat.FormatExpression.expression list
  type frameBitmap =
    {bits:tid option list,
     source:frameBitmapSource}
  val format_frameBitmap : {bits:BoundTypeVarID.id option list,
                            source:frameBitmapSource}
                           -> SMLFormat.FormatExpression.expression list
  type cluster =
    {body:basicBlock list,
     frameBitmap:frameBitmap list,
     loc:loc, name:clusterId}
  val format_cluster : {body:{blockKind:blockKind,
                              handler:handler,
                              instructionList:instruction 
                                                list, label:VarID.id,
                              loc:'a} list,
                        frameBitmap:{bits:BoundTypeVarID.id option list,
                                     source:
                                              frameBitmapSource}
                                      list, loc:Loc.pos * Loc.pos,
                        name:ClusterID.id}
                       -> SMLFormat.FormatExpression.expression list
  datatype global
    = GlobalAlias of globalLabel
    | GlobalData of data
  val format_global : global
                      -> SMLFormat.FormatExpression.expression list
  type program =
    {clusters:cluster list,
     constants:data VarID.Map.map,
     globals:global SEnv.map,
     toplevel:{clusterId:clusterId,
               entry:label} option}
  val format_program : {clusters:{body:{blockKind:
                                                    blockKind,
                                        handler:handler,
                                        instructionList:
                                                          instruction
                                                          list,
                                        label:VarID.id, loc:'a} list,
                                  frameBitmap:{bits:BoundTypeVarID.id 
                                                      option list,
                                               source:
                                                        frameBitmapSource}
                                                list, loc:Loc.pos * Loc.pos,
                                  name:ClusterID.id} list,
                        constants:data VarID.Map.map,
                        globals:global SEnv.map,
                        toplevel:{clusterId:ClusterID.id,
                                  entry:VarID.id} option}
                       -> SMLFormat.FormatExpression.expression list
end

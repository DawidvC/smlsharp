_require local "../../../basis.smi"
_require local "../../../config/main/Config.smi"
_require local "../../../compiler-utils/env/main/SEnv.smi"
_require local "../../../llvm/main/LLVM.smi"
_require local "../../../basis.smi"
_require local "../../builtin2/main/BuiltinTypes.smi"
_require local "../../control/main/Loc.ppg.smi"
_require local "../../control/main/Control.ppg.smi"
_require local "../../control/main/Bug.ppg.smi"
_require local "../../util/main/Counter.smi"
_require "../../toolchain/main/Filename.smi"
_require local "../../toolchain/main/TempFile.smi"
_require local "../../toolchain/main/BinUtils.smi"
_require local "../../toolchain/main/CoreUtils.smi"
_require "../../toolchain/main/LLVMUtils.smi"
_require local "../../usererror/main/UserError.ppg.smi"
_require local "../../name/main/LocalID.smi"
_require local "../../absyn/main/AbsynInterface.ppg.smi"
_require local "../../absyn/main/Absyn.ppg.smi"
_require local "../../absyn/main/Symbol.ppg.smi"
_require "../../absyn/main/InterfaceName.ppg.smi"
_require local "../../patterncalc/main/PatternCalcInterface.ppg.smi"
_require local "../../types/main/IDCalc.ppg.smi"
_require local "../../types/main/VarMap.smi"
_require "../../parser2/main/Parser.smi"
_require local "../../parser2/main/InterfaceParser.smi"
_require local "../../loadfile/main/LoadFile.smi"
_require local "../../elaborate/main/Elaborator.smi"
_require local "../../nameevaluation/main/NameEvalEnv.ppg.smi"
_require local "../../nameevaluation/main/NameEval.smi"
_require local "../../nameevaluation/main/NameEvalUtils.smi"
_require local "../../valrecoptimization/main/VALREC_Optimizer.smi"
_require local "../../valrecoptimization/main/TransFundecl.smi"
_require local "../../typedcalc/main/TypedCalc.ppg.smi"
_require local "../../typedcalcoptimization2/main/TCOptimize.smi"
_require local "../../recordcalcoptimization/main/RCOptimize.smi"
_require local "../../typeinference2/main/InferTypes2.smi"
_require local "../../typeinference2/main/UncurryFundecl_ng.smi"
_require local "../../interactivePrinter/main/Reify.smi"
_require local "../../recordcalc/main/RecordCalc.ppg.smi"
_require local "../../matchcompilation/main/MatchCompiler.smi"
_require local "../../typedelaboration/main/TypedElaboration.smi"
_require local "../../fficompilation/main/FFICompilation.smi"
_require local "../../recordcompilation/main/RecordCompilation.smi"
_require local "../../typedlambda/main/TypedLambda.ppg.smi"
_require local "../../datatypecompilation/main/DatatypeCompilation.smi"
_require local "../../bitmapcalc/main/BitmapCalc2.ppg.smi"
_require local "../../bitmapcompilation2/main/BitmapCompilation.smi"
_require local "../../closurecalc/main/ClosureCalc.ppg.smi"
_require local "../../closureconversion/main/ClosureConversion2.smi"
_require local "../../runtimecalc/main/RuntimeCalc.ppg.smi"
_require local "../../cconvcompile/main/CallingConventionCompile.smi"
_require local "../../anormal/main/ANormal.ppg.smi"
_require local "../../anormal/main/ANormalTypeCheck.smi"
_require local "../../anormalize/main/ANormalize.smi"
_require local "../../machinecode/main/MachineCode.ppg.smi"
_require local "../../machinecodegen/main/MachineCodeGen.smi"
_require local "../../concurrencysupport/main/ConcurrencySupport.smi"
_require local "../../stackallocation/main/StackAllocation.smi"
_require local "../../llvmir/main/LLVMIR.ppg.smi"
_require local "../../llvmgen/main/LLVMGen.smi"
_require local "../../llvmemit/main/LLVMEmit.smi"
_require local "../../runtimetypes/main/TypeLayout2.smi"
_require local "../../../json/main/JSONData.smi"
_require "./TopData.ppg.smi"
_require local "./NameEvalEnvUtils.smi"

structure Top =
struct
  datatype stopAt = datatype TopData.stopAt
  datatype result = datatype TopData.result
  type options = TopData.options
  type toplevelContext = TopData.toplevelContext
  type newContext = TopData.newContext

  val defaultOptions : options

  val extendContext : toplevelContext * newContext -> toplevelContext
  val emptyNewContext : newContext
  val incVersion : toplevelContext -> toplevelContext

  val compile
      : LLVMUtils.compile_options
        -> options
        -> toplevelContext
        -> Parser.input
        -> InterfaceName.dependency * result

  val loadInteractiveEnv : {stopAt: stopAt,
                            stdPath: Filename.filename list,
                            loadPath: Filename.filename list}
                           -> toplevelContext
                           -> Filename.filename
                           -> newContext
  val loadBuiltin : Filename.filename -> toplevelContext

  type load_interface_options =
       {stopAt : stopAt,
        stdPath : Filename.filename list,
        loadPath : Filename.filename list,
        loadAllInterfaceFiles : bool}

  (* Load an interface file and returns a new environment
   * for evaluating codes which require the given interface file.
   *)
  val loadInterface : load_interface_options
                      -> toplevelContext
                      -> Filename.filename
                      -> InterfaceName.dependency * newContext option

end

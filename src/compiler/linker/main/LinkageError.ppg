(**
 * user errors detected in linking.
 * @author Liu Bochao
 * @version $Id: LinkageError.ppg,v 1.3 2006/06/29 14:03:02 bochao Exp $
 *)
structure LinkError =
struct

  (***************************************************************************)

  local
    structure UE = UserError
    structure C = Control
    structure TE = TypeInferenceError
    val format_ty = Types.format_ty []
    val errorQueue = UE.createQueue ()
  in

  (*%
   * @formatter(Types.ty) format_ty
   *)
  exception
  (**
   * <pre>
   *  type t = (int, int) option
   * </pre>
   *)
  (*%
   * @format({fileName})
   *   "object" +d "file" +d "should" +d "end" +d "with" +d ".smo:" +d fileName
   *)
  IllegalObjectFileSuffix of {fileName : string}
  and
  (**
   * <pre>
   * </pre>
   *)
  (*%
   * @format({name})
   * "unbound" +d  "import" +d "value" +d "identifier:" + name
   *)
  UnboundImportValueIdentifier of {name:string}

  and
  (**
   * <pre>
   * </pre>
   *)
  (*%
   * @format({name})
   * "unbound" +d  "import" +d "type" +d "constructor:" + name
   *)
  UnboundImportTypeContructor of {name:string}

  and
  (**
   * <pre>
   * </pre>
   *)
  (*%
   * @format({name})
   * "unbound" +d  "import" +d "structure:" + name
   *)
  UnboundImportStructure of {name:string}

  and
  (**
   * <pre>
   * </pre>
   *)
  (*%
   * @format({ty1,ty2})
   * "imported" +d "types" +d  "are" +d "not" +d "equivalent:" +d ty1 +d "," +d ty2
   *)
  UnEquivalentImportType of {ty1: Types.ty, ty2 : Types.ty}

  and
  (**
   * <pre>
   * </pre>
   *)
  (*%
   * @format({name : name names})
   * "non-exported" +d "value" +d  "identifier:" +d names(name)(","+d)
   *)
  ImportUnExportedValueIdentifier of {name : string list}

  and
  (**
   * <pre>
   * </pre>
   *)
  (*%
   * @format({name : name names})
   * "non-exported" +d "structure:" +d names(name)(","+d)
   *)
  ImportUnExportedStructureIdentifier of {name : string list}

  and
  (**
   * <pre>
   * </pre>
   *)
  (*%
   * @format({name,function})
   * function +d "failed on" +d name +d ",No such file or directory"
   *)
  IOException of {name : string, function : string}


  val isAnyError = ref false

  fun initializeLinkError () = 
      (UE.clearQueue errorQueue; isAnyError := false)
  fun getErrorsAndWarnings () = UE.getErrorsAndWarnings errorQueue
  fun getErrors () = UE.getErrors errorQueue
  fun isError () = !isAnyError
  fun getWarnings () = UE.getWarnings errorQueue
  fun enqueueError x = (isAnyError := true; UE.enqueueError errorQueue x)
  val enqueueWarning = UE.enqueueWarning errorQueue

  fun handleError () =
      let
          fun printError message = 
              #print (CharacterStreamWrapper.wrapOut 
                          (TextIOChannel.openOut {outStream = TextIO.stdErr})) message
      in
          (app (fn error =>
                   (printError (C.prettyPrint
                                    (UE.format_errorInfo error));
                    printError "\n"
                    ))
               (getErrorsAndWarnings () @ TE.getErrorsAndWarnings ());
               printError "\n")
      end
  end
end
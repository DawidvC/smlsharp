_require local "../../../basis.smi"
_require local "../../../compiler-utils/symbols/main/Loc.ppg.smi"
_require local "../../../compiler-utils/debug/main/Bug.ppg.smi"
_require local "../../../compiler-utils/ids/main/LocalID.smi"
_require local "../../../compiler-utils/env/main/SEnv.smi"
_require local "../../../compiler-utils/env/main/SSet.smi"

_require local "../../toolchain/main/CoreUtils.smi"
_require local "../../usererror/main/UserError.ppg.smi"
_require local "../../control/main/Control.ppg.smi"
_require local "../../parser2/main/Parser.smi"
_require local "../../parser2/main/InterfaceParser.smi"
_require local "./InterfaceHash.smi"
_require local "./LoadFileError.ppg.smi"

_require "../../absyn/main/AbsynInterface.ppg.smi"
_require "../../absyn/main/InterfaceName.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../toolchain/main/Filename.smi"

structure LoadFile =
struct

  val load
      : {baseFilename: Filename.filename option,
         stdPath: Filename.filename list,
         loadPath: Filename.filename list,
         loadAll: bool}
        -> Absyn.unit
        -> InterfaceName.dependency * AbsynInterface.compileUnit

  (* load an interface file for codes which require the given interface file *)
  val loadInterfaceFile
      : {stdPath: Filename.filename list,
         loadPath: Filename.filename list,
         loadAll: bool}
        -> Filename.filename
        -> InterfaceName.dependency * AbsynInterface.interface_unit

  val loadInteractiveEnv
      : {stdPath: Filename.filename list,
         loadPath: Filename.filename list,
         loadAll: bool}
        -> Filename.filename
        -> AbsynInterface.interactiveUnit

end

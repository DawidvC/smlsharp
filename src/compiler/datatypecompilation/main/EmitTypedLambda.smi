_require "../../../basis.smi"
_require "../../constantterm/main/ConstantTerm.ppg.smi"
_require "../../typedlambda/main/TypedLambda.ppg.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../types/main/TypesBasics.smi"
_require "../../recordcalc/main/RecordCalc.ppg.smi"
_require "../../builtin2/main/BuiltinTypes.smi"
_require "../../builtin2/main/BuiltinPrimitive.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../control/main/Bug.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"
_require "../../absyn/main/Absyn.ppg.smi"

structure EmitTypedLambda =
struct

  type vid (= VarID.id)
  val newId : unit -> vid

  datatype exp =
      Exp of TypedLambda.tlexp * Types.ty
    | Int of int
    | Int64 of int64
    | Word of int
    | Word64 of int64
    | Word8 of int
    | Char of int
    | ConTag of int
    | Real of int
    | Float of int
    | String of string
    | Unit
    | Null
    | True
    | False
    | SizeOf of Types.ty
    | IndexOf of Types.ty * string
    | ExVar of RecordCalc.exVarInfo
    | Cast of exp * Types.ty
    | RuntimeTyCast of exp * Types.ty
    | BitCast of exp * Types.ty
    | PrimApply of TypedLambda.primInfo * Types.ty list * Types.ty * exp list
    | If of exp * exp * exp
    | Andalso of exp list
    | Switch of exp * (ConstantTerm.constant * exp) list * exp
    | Raise of RecordCalc.exExnInfo * Types.ty
    | Fn of vid * Types.ty * exp
    | App of exp * exp
    | Let of (vid * exp) list * exp
    | Var of vid
    | TLLet of decl list * exp
    | TLVar of TypedLambda.varInfo
    | Record of string list * exp list
    | Select of string * exp
  and decl =
      Decl of TypedLambda.tldecl * TypedLambda.loc
    | Bind of TypedLambda.varInfo * exp

  val tupleTy : Types.ty list -> Types.ty
  val arrayTy : Types.ty -> Types.ty

  val Tuple : exp list -> exp
  val Ref_alloc : Types.ty * exp -> exp
  val Ref_deref : Types.ty * exp -> exp
  val Ref_assign : Types.ty * exp * exp -> exp
  val Array_length : Types.ty * exp -> exp
  val Array_sub_unsafe : Types.ty * exp * exp -> exp
  val Array_turnIntoVector : Types.ty * exp -> exp
  val Array_alloc_unsafe : Types.ty * exp -> exp
  val Array_alloc_init : Types.ty * exp list -> exp
  val Array_update_unsafe : Types.ty * exp * exp * exp -> exp
  val Array_copy_unsafe : Types.ty * exp * exp * exp * exp * exp -> exp
  val String_alloc_unsafe : exp -> exp
  val String_size : exp -> exp
  val String_sub_unsafe : exp * exp -> exp
  val String_update_unsafe : exp * exp * exp -> exp
  val String_copy_unsafe : exp * exp * exp * exp * exp -> exp
  val IdentityEqual : Types.ty * exp * exp -> exp
  val IsNull : exp -> exp
  val Int32_eq : exp * exp -> exp
  val Int32_gteq : exp * exp -> exp
  val Int32_lt : exp * exp -> exp
  val Int32_lteq : exp * exp -> exp
  val Int32_quot_unsafe : exp * exp -> exp
  val Int32_rem_unsafe : exp * exp -> exp
  val Int32_sub_unsafe : exp * exp -> exp
  val Int32_add_unsafe : exp * exp -> exp
  val Int64_eq : exp * exp -> exp
  val Int64_gteq : exp * exp -> exp
  val Int64_lt : exp * exp -> exp
  val Int64_lteq : exp * exp -> exp
  val Int64_quot_unsafe : exp * exp -> exp
  val Int64_rem_unsafe : exp * exp -> exp
  val Int64_sub_unsafe : exp * exp -> exp
  val Int64_add_unsafe : exp * exp -> exp
  val Word8_gt : exp * exp -> exp
  val Word8_gteq : exp * exp -> exp
  val Word8_lt : exp * exp -> exp
  val Word8_lteq : exp * exp -> exp
  val Word8_xorb : exp * exp -> exp
  val Word8_sub : exp * exp -> exp
  val Word8_arshift_unsafe : exp * exp -> exp
  val Word8_lshift_unsafe : exp * exp -> exp
  val Word8_rshift_unsafe : exp * exp -> exp
  val Word8_toWord32 : exp -> exp
  val Word8_toWord32X : exp -> exp
  val Word32_add : exp * exp -> exp
  val Word32_sub : exp * exp -> exp
  val Word32_div_unsafe : exp * exp -> exp
  val Word32_orb : exp * exp -> exp
  val Word32_andb : exp * exp -> exp
  val Word32_xorb : exp * exp -> exp
  val Word32_lt : exp * exp -> exp
  val Word32_fromInt32 : exp -> exp
  val Word32_toInt32X : exp -> exp
  val Word32_toWord8 : exp -> exp
  val Word32_toWord64 : exp -> exp
  val Word32_toWord64X : exp -> exp
  val Word64_arshift_unsafe : exp * exp -> exp
  val Word64_rshift_unsafe : exp * exp -> exp
  val Word64_lshift_unsafe : exp * exp -> exp
  val Word64_add : exp * exp -> exp
  val Word64_sub : exp * exp -> exp
  val Word64_div_unsafe : exp * exp -> exp
  val Word64_orb : exp * exp -> exp
  val Word64_andb : exp * exp -> exp
  val Word64_xorb : exp * exp -> exp
  val Word64_lt : exp * exp -> exp
  val Word64_lteq : exp * exp -> exp
  val Word64_fromInt32 : exp -> exp
  val Word64_toWord32 : exp -> exp
  val Word64_fromInt64 : exp -> exp
  val Word64_toInt64X : exp -> exp
  val Float_isNan : exp -> exp
  val Float_equal : exp * exp -> exp
  val Float_gteq : exp * exp -> exp
  val Float_lteq : exp * exp -> exp
  val Float_sub : exp * exp -> exp
  val Float_toInt32_unsafe : exp -> exp
  val Real_isNan : exp -> exp
  val Real_equal : exp * exp -> exp
  val Real_gteq : exp * exp -> exp
  val Real_lteq : exp * exp -> exp
  val Real_sub : exp * exp -> exp
  val Real_toInt32_unsafe : exp -> exp
  val allocExnTag : {builtin:bool, path:RecordCalc.path, ty:Types.ty} -> exp
  val extractExnTagName : exp -> exp
  val extractExnTag : exp -> exp
  val extractExnLoc : exp -> exp
  val extractExnArg : exp * Types.ty -> exp
  val Exn_Message : exp -> exp
  val composeExn : exp * Loc.loc * exp option -> exp
  val emit : TypedLambda.loc -> exp -> TypedLambda.tlexp

end

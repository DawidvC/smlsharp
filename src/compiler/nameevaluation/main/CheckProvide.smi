_require local "../../../basis.smi"
_require local "../../../compiler-utils/symbols/main/RecordLabel.smi"
_require local "../../../compiler-utils/debug/main/Bug.ppg.smi"
_require local "../../../compiler-utils/ids/main/LocalID.smi"
_require local "../../../smlnj-lib/Util/lib-base.smi"
_require local "../../../compiler-utils/env/main/SEnv.smi"

_require local "../../absyn/main/AbsynInterface.ppg.smi"
_require local "../../builtin2/main/BuiltinTypes.smi"
_require local "../../usererror/main/UserErrorUtils.smi"
_require local "./EvalSig.smi"
_require local "./EvalTy.smi"
_require local "./FunctorUtils.smi"
_require local "./NameEvalError.ppg.smi"
_require local "./NameEvalInterface.smi"
_require local "./NameEvalUtils.smi"
_require local "./NormalizeTy.smi"

_require "../../../compiler-utils/symbols/main/Loc.ppg.smi"
_require "../../../compiler-utils/symbols/main/Symbol.ppg.smi"
_require "../../patterncalc/main/PatternCalcInterface.ppg.smi"
_require "../../patterncalc/main/PatternCalc.ppg.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "./NameEvalEnv.ppg.smi"
structure CheckProvide =
struct
  val checkProvideFunctorBody :
      {topEnv:NameEvalEnv.topEnv, 
       evalEnv:NameEvalEnv.topEnv, 
       argSigEnv:NameEvalEnv.env, 
       specArgSig:PatternCalc.plsigexp, 
       functorSymbol:Symbol.symbol, 
       returnEnv:NameEvalEnv.env, 
       specBodyStr:PatternCalcInterface.pistrexp, 
       defLoc:Loc.loc,
       specLoc:Loc.loc}
      -> IDCalc.icdecl list * NameEvalEnv.env
  val checkPitopdecList :
      NameEvalEnv.topEnv
      -> (NameEvalEnv.topEnv * PatternCalcInterface.pitopdec list)
      -> {exportDecls:IDCalc.icdecl list, bindDecls:IDCalc.icdecl list}
end

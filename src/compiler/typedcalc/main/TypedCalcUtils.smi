_require local "../../../basis.smi"
_require local "../../../compiler-utils/symbols/main/RecordLabel.smi"
_require local "../../../compiler-utils/debug/main/Bug.ppg.smi"
_require local "../../../compiler-utils/ids/main/LocalID.smi"

_require local "../../types/main/TypesBasics.smi"
_require local "../../builtin2/main/BuiltinTypes.smi"

_require "../../../compiler-utils/symbols/main/Loc.ppg.smi"
_require "../../../compiler-utils/symbols/main/Symbol.ppg.smi"
_require "../../types/main/Types.ppg.smi"
_require "./TypedCalc.ppg.smi"

structure TypedCalcUtils =
  struct
    val newTCVarName : unit -> Symbol.symbol
    val newTCVarInfo : Loc.loc -> Types.ty -> Types.varInfo
    val newTCVarInfoWithLongsymbol : Symbol.longsymbol * Types.ty -> Types.varInfo
    val getLocOfExp : TypedCalc.tpexp -> Loc.loc
    val freshInst : Types.ty * TypedCalc.tpexp 
                    -> Types.ty * Types.constraint list * TypedCalc.tpexp
    val freshToplevelInst
        : Types.ty * TypedCalc.tpexp 
          -> Types.ty * Types.constraint list * TypedCalc.tpexp
    val expansive : TypedCalc.tpexp  -> bool
    val isAtom : TypedCalc.tpexp  -> bool
  end

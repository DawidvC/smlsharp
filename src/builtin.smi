(* see also BuiltinPrimitive.ppg and BuiltinTypes.sml *)

datatype int    = _builtin datatype int
datatype word   = _builtin datatype word
datatype char   = _builtin datatype char
datatype string = _builtin datatype string
datatype real   = _builtin datatype real
datatype unit   = _builtin datatype unit
datatype ptr    = _builtin datatype ptr
datatype codeptr = _builtin datatype codeptr
datatype exn    = _builtin datatype exn
datatype array  = _builtin datatype array
datatype vector = _builtin datatype vector
datatype bool   = _builtin datatype bool
datatype list   = _builtin datatype list
datatype option = _builtin datatype option
datatype ref    = _builtin datatype ref

(* 2013-09-21 ohori moved tintInf, word8, real32, boxed to toplevel *)
datatype int32    = _builtin datatype int
datatype int64    = _builtin datatype int64
datatype intInf   = _builtin datatype intInf
datatype largeInt = _builtin datatype intInf
datatype word8    = _builtin datatype word8
datatype word64   = _builtin datatype word64
datatype real32   = _builtin datatype real32
datatype boxed    = _builtin datatype boxed

exception Bind
exception Match
exception Subscript
exception Size
exception Overflow
exception Div
exception Domain
exception Fail of string
exception Chr

val = = _builtin val Equal : ''a * ''a -> bool
val <> = _builtin val NotEqual : ''a * ''a -> bool
val := = _builtin val Ref_assign : 'a ref * 'a -> unit
val ! = _builtin val Ref_deref : 'a ref -> 'a
val o = _builtin val Compose : ('a -> 'b) * ('c -> 'a) -> ('c -> 'b)
val exnName = _builtin val Exn_Name : exn -> string
val before = _builtin val Before : 'a * unit -> 'a
val ignore = _builtin val Ignore : 'a -> unit

(* The followings are provided for defining the Basis Library. *)
structure SMLSharp_Builtin =
struct

  structure Array =
  struct
    val turnIntoVector =
        _builtin val Array_turnIntoVector
        : 'a array -> 'a vector
    val alloc_unsafe =
        _builtin val Array_alloc_unsafe
        : int -> 'a array
    val copy_unsafe =
        _builtin val Array_copy_unsafe
        : 'a array * int * 'a array * int * int -> unit
    val sub_unsafe =
        _builtin val Array_sub_unsafe
        : 'a array * int -> 'a
    val update_unsafe =
        _builtin val Array_update_unsafe
        : 'a array * int * 'a -> unit
    val alloc =
        _builtin val Array_alloc
        : int -> 'a array
    val copy =
        _builtin val Array_copy
        : {src: 'a array, dst: 'a array, di: int} -> unit
    val length =
        _builtin val Array_length
        : 'a array -> int
    val sub =
        _builtin val Array_sub
        : 'a array * int -> 'a
    val update =
        _builtin val Array_update
        : 'a array * int * 'a -> unit

    val castToWord8Array = _builtin val Cast : char array -> word8 array
  end

  structure Vector =
  struct
    val length =
        _builtin val Vector_length
        : 'a vector -> int
    val sub =
        _builtin val Vector_sub
        : 'a vector * int -> 'a

    val castToArray = _builtin val Cast : 'a vector -> 'a array
  end

  structure String =
  struct
    val alloc =
        _builtin val String_alloc
        : int -> string
    val alloc_unsafe =
        _builtin val String_alloc
        : int -> string
    val size =
        _builtin val String_size
        : string -> int
    val sub =
        _builtin val String_sub
        : string * int -> char
    val identityEqual =
        _builtin val IdentityEqual
        : string * string -> bool

    val castToArray = _builtin val Cast : string -> char array
    val castToWord8Array = _builtin val Cast : string -> word8 array
    val castToBoxed = _builtin val Cast : string -> boxed
  end

  structure Real64 =
  struct
    val abs = _builtin val Real_abs : real -> real
    val add = _builtin val Real_add : real * real -> real
    val div = _builtin val Real_div : real * real -> real
    val equal = _builtin val Real_equal : real * real -> bool
    val ueq = _builtin val Real_unorderedOrEqual : real * real -> bool
    val gt = _builtin val Real_gt : real * real -> bool
    val gteq = _builtin val Real_gteq : real * real -> bool
    val isNan = _builtin val Real_isNan : real -> bool
    val lt = _builtin val Real_lt : real * real -> bool
    val lteq = _builtin val Real_lteq : real * real -> bool
    val mul = _builtin val Real_mul : real * real -> real
    val rem = _builtin val Real_rem : real * real -> real
    val sub = _builtin val Real_sub : real * real -> real
    val toInt32_unsafe = _builtin val Real_toInt32_unsafe : real -> int
    val toInt64_unsafe = _builtin val Real_toInt64_unsafe : real -> int64
    val toWord32_unsafe = _builtin val Real_toWord32_unsafe : real -> word
    val toWord64_unsafe = _builtin val Real_toWord64_unsafe : real -> word64
    val toFloat_unsafe = _builtin val Real_toFloat_unsafe : real -> real32
    val neg = _builtin val Real_neg : real -> real
    val notEqual = _builtin val Real_notEqual : real * real -> bool
    val trunc = _builtin val Real_trunc : real -> int
  end

  structure Real32 =
  struct
    val abs = _builtin val Float_abs : real32 -> real32
    val add = _builtin val Float_add : real32 * real32 -> real32
    val div = _builtin val Float_div : real32 * real32 -> real32
    val equal = _builtin val Float_equal : real32 * real32 -> bool
    val ueq = _builtin val Float_unorderedOrEqual : real32 * real32 -> bool
    val gt = _builtin val Float_gt : real32 * real32 -> bool
    val gteq = _builtin val Float_gteq : real32 * real32 -> bool
    val isNan = _builtin val Float_isNan : real32 -> bool
    val lt = _builtin val Float_lt : real32 * real32 -> bool
    val lteq = _builtin val Float_lteq : real32 * real32 -> bool
    val mul = _builtin val Float_mul : real32 * real32 -> real32
    val rem = _builtin val Float_rem : real32 * real32 -> real32
    val sub = _builtin val Float_sub : real32 * real32 -> real32
    val toInt32_unsafe = _builtin val Float_toInt32_unsafe : real32 -> int
    val toInt64_unsafe = _builtin val Float_toInt64_unsafe : real32 -> int64
    val toWord32_unsafe = _builtin val Float_toWord32_unsafe : real32 -> word
    val toWord64_unsafe = _builtin val Float_toWord64_unsafe : real32 -> word64
    val toReal = _builtin val Float_toReal : real32 -> real
    val neg = _builtin val Float_neg : real32 -> real32
    val notEqual = _builtin val Float_notEqual : real32 * real32 -> bool
    val trunc = _builtin val Float_trunc : real32 -> int
  end

  structure Char =
  struct
    val chr = _builtin val Char_chr : int -> char
    val gt = _builtin val Char_gt : char * char -> bool
    val gteq = _builtin val Char_gteq : char * char -> bool
    val lt = _builtin val Char_lt : char * char -> bool
    val lteq = _builtin val Char_lteq : char * char -> bool
    val ord = _builtin val Char_ord : char -> int

    val castToWord8 = _builtin val Cast : char -> word8
  end

  structure Int32 =
  struct
    val add_unsafe = _builtin val Int32_add_unsafe : int * int -> int
    val gt = _builtin val Int32_gt : int * int -> bool
    val gteq = _builtin val Int32_gteq : int * int -> bool
    val lt = _builtin val Int32_lt : int * int -> bool
    val lteq = _builtin val Int32_lteq : int * int -> bool
    val mul_unsafe = _builtin val Int32_mul_unsafe : int * int -> int
    val quot_unsafe = _builtin val Int32_quot_unsafe : int * int -> int
    val rem_unsafe = _builtin val Int32_rem_unsafe : int * int -> int
    val sub_unsafe = _builtin val Int32_sub_unsafe : int * int -> int
    val toReal = _builtin val Int32_toReal : int -> real
    val toFloat_unsafe = _builtin val Int32_toFloat_unsafe : int -> real32
    val abs = _builtin val Int32_abs : int -> int
    val add = _builtin val Int32_add : int * int -> int
    val div = _builtin val Int32_div : int * int -> int
    val mod = _builtin val Int32_mod : int * int -> int
    val mul = _builtin val Int32_mul : int * int -> int
    val neg = _builtin val Int32_neg : int -> int
    val quot = _builtin val Int32_quot : int * int -> int
    val rem = _builtin val Int32_rem : int * int -> int
    val sub = _builtin val Int32_sub : int * int -> int
  end

  structure Int64 =
  struct
    val add_unsafe = _builtin val Int64_add_unsafe : int64 * int64 -> int64
    val gt = _builtin val Int64_gt : int64 * int64 -> bool
    val gteq = _builtin val Int64_gteq : int64 * int64 -> bool
    val lt = _builtin val Int64_lt : int64 * int64 -> bool
    val lteq = _builtin val Int64_lteq : int64 * int64 -> bool
    val mul_unsafe = _builtin val Int64_mul_unsafe : int64 * int64 -> int64
    val quot_unsafe = _builtin val Int64_quot_unsafe : int64 * int64 -> int64
    val rem_unsafe = _builtin val Int64_rem_unsafe : int64 * int64 -> int64
    val sub_unsafe = _builtin val Int64_sub_unsafe : int64 * int64 -> int64
    val toReal = _builtin val Int64_toReal_unsafe : int64 -> real
    val toFloat_unsafe = _builtin val Int64_toFloat_unsafe : int64 -> real32
    val abs = _builtin val Int64_abs : int64 -> int64
    val add = _builtin val Int64_add : int64 * int64 -> int64
    val div = _builtin val Int64_div : int64 * int64 -> int64
    val fromInt32 = _builtin val Int64_fromInt32 : int -> int64
    val mod = _builtin val Int64_mod : int64 * int64 -> int64
    val mul = _builtin val Int64_mul : int64 * int64 -> int64
    val neg = _builtin val Int64_neg : int64 -> int64
    val quot = _builtin val Int64_quot : int64 * int64 -> int64
    val rem = _builtin val Int64_rem : int64 * int64 -> int64
    val sub = _builtin val Int64_sub : int64 * int64 -> int64
    val toInt32 = _builtin val Int64_toInt32 : int64 -> int
  end

  structure Word32 =
  struct
    val add = _builtin val Word32_add : word * word -> word
    val andb = _builtin val Word32_andb : word * word -> word
    val arshift_unsafe = _builtin val Word32_arshift_unsafe : word * word -> word
    val div_unsafe = _builtin val Word32_div_unsafe : word * word -> word
    val gt = _builtin val Word32_gt : word * word -> bool
    val gteq = _builtin val Word32_gteq : word * word -> bool
    val lshift_unsafe = _builtin val Word32_lshift_unsafe : word * word -> word
    val lt = _builtin val Word32_lt : word * word -> bool
    val lteq = _builtin val Word32_lteq : word * word -> bool
    val mod_unsafe = _builtin val Word32_mod_unsafe : word * word -> word
    val mul = _builtin val Word32_mul : word * word -> word
    val orb = _builtin val Word32_orb : word * word -> word
    val rshift_unsafe = _builtin val Word32_rshift_unsafe : word * word -> word
    val sub = _builtin val Word32_sub : word * word -> word
    val toWord8 = _builtin val Word32_toWord8 : word -> word8
    val toWord64 = _builtin val Word32_toWord64 : word -> word64
    val toWord64X = _builtin val Word32_toWord64X : word -> word64
    val xorb = _builtin val Word32_xorb : word * word -> word

    val arshift = _builtin val Word32_arshift : word * word -> word
    val div = _builtin val Word32_div : word * word -> word
    val lshift = _builtin val Word32_lshift : word * word -> word
    val mod = _builtin val Word32_mod : word * word -> word
    val neg = _builtin val Word32_neg : word -> word
    val notb = _builtin val Word32_notb : word -> word
    val rshift = _builtin val Word32_rshift : word * word -> word
    val toInt32 = _builtin val Word32_toInt32 : word -> int

    val toInt32X = _builtin val RuntimeTyCast : word -> int
    val fromInt32 = _builtin val RuntimeTyCast : int -> word
  end

  structure Word64 =
  struct
    val add = _builtin val Word64_add : word64 * word64 -> word64
    val andb = _builtin val Word64_andb : word64 * word64 -> word64
    val arshift_unsafe =
        _builtin val Word64_arshift_unsafe : word64 * word -> word64
    val div_unsafe = _builtin val Word64_div_unsafe : word64 * word64 -> word64
    val gt = _builtin val Word64_gt : word64 * word64 -> bool
    val gteq = _builtin val Word64_gteq : word64 * word64 -> bool
    val lshift_unsafe =
        _builtin val Word64_lshift_unsafe : word64 * word -> word64
    val lt = _builtin val Word64_lt : word64 * word64 -> bool
    val lteq = _builtin val Word64_lteq : word64 * word64 -> bool
    val mod_unsafe = _builtin val Word64_mod_unsafe : word64 * word64 -> word64
    val mul = _builtin val Word64_mul : word64 * word64 -> word64
    val orb = _builtin val Word64_orb : word64 * word64 -> word64
    val rshift_unsafe =
        _builtin val Word64_rshift_unsafe : word64 * word -> word64
    val sub = _builtin val Word64_sub : word64 * word64 -> word64
    val toWord8 = _builtin val Word64_toWord8 : word64 -> word8
    val toWord32 = _builtin val Word64_toWord32 : word64 -> word
    val xorb = _builtin val Word64_xorb : word64 * word64 -> word64

    val arshift = _builtin val Word64_arshift : word64 * word -> word64
    val div = _builtin val Word64_div : word64 * word64 -> word64
    val fromInt32 = _builtin val Word64_fromInt32 : int -> word64
    val lshift = _builtin val Word64_lshift : word64 * word -> word64
    val mod = _builtin val Word64_mod : word64 * word64 -> word64
    val neg = _builtin val Word64_neg : word64 -> word64
    val notb = _builtin val Word64_notb : word64 -> word64
    val rshift = _builtin val Word64_rshift : word64 * word -> word64
    val toInt32 = _builtin val Word64_toInt32 : word64 -> int
    val toInt32X = _builtin val Word64_toInt32X : word64 -> int

    val toInt64X = _builtin val RuntimeTyCast : word64 -> int64
    val fromInt64 = _builtin val RuntimeTyCast : int64 -> word64
  end

  structure Word8 =
  struct
    val add = _builtin val Word8_add : word8 * word8 -> word8
    val andb = _builtin val Word8_andb : word8 * word8 -> word8
    val arshift_unsafe = _builtin val Word8_arshift_unsafe : word8 * word8 -> word8
    val div_unsafe = _builtin val Word8_div_unsafe : word8 * word8 -> word8
    val gt = _builtin val Word8_gt : word8 * word8 -> bool
    val gteq = _builtin val Word8_gteq : word8 * word8 -> bool
    val lshift_unsafe = _builtin val Word8_lshift_unsafe : word8 * word8 -> word8
    val lt = _builtin val Word8_lt : word8 * word8 -> bool
    val lteq = _builtin val Word8_lteq : word8 * word8 -> bool
    val mod_unsafe = _builtin val Word8_mod_unsafe : word8 * word8 -> word8
    val mul = _builtin val Word8_mul : word8 * word8 -> word8
    val orb = _builtin val Word8_orb : word8 * word8 -> word8
    val rshift_unsafe = _builtin val Word8_rshift_unsafe : word8 * word8 -> word8
    val sub = _builtin val Word8_sub : word8 * word8 -> word8
    val toWord32 = _builtin val Word8_toWord32 : word8 -> word
    val toWord32X = _builtin val Word8_toWord32X : word8 -> word
    val toWord64 = _builtin val Word8_toWord64 : word8 -> word64
    val toWord64X = _builtin val Word8_toWord64X : word8 -> word64
    val xorb = _builtin val Word8_xorb : word8 * word8 -> word8

    val arshift = _builtin val Word8_arshift : word8 * word -> word8
    val div = _builtin val Word8_div : word8 * word8 -> word8
    val fromInt32 = _builtin val Word8_fromInt32 : int -> word8
    val lshift = _builtin val Word8_lshift : word8 * word -> word8
    val mod = _builtin val Word8_mod : word8 * word8 -> word8
    val neg = _builtin val Word8_neg : word8 -> word8
    val notb = _builtin val Word8_notb : word8 -> word8
    val rshift = _builtin val Word8_rshift : word8 * word -> word8
    val toInt32 = _builtin val Word8_toInt32 : word8 -> int
    val toInt32X = _builtin val Word8_toInt32X : word8 -> int

    val castToChar = _builtin val Cast : word8 -> char
  end

  structure Exn =
  struct
    val exnMessage = _builtin val Exn_Message : exn -> string * word * boxed
  end

  structure Pointer =
  struct
    val identityEqual = _builtin val IdentityEqual : boxed * boxed -> bool
    val advance = _builtin val Ptr_advance : 'a ptr * int -> 'a ptr
    val deref = _builtin val Ptr_deref : 'a ptr -> 'a
    val store = _builtin val Ptr_store : 'a ptr * 'a -> unit
    val toWord64 = _builtin val Ptr_toWord64 : 'a ptr -> word64

    val toUnitPtr = _builtin val Cast : 'a ptr -> unit ptr
    val fromUnitPtr = _builtin val Cast : unit ptr -> 'a ptr
    val toCodeptr = _builtin val BitCast : unit ptr -> codeptr

    val refToBoxed = _builtin val Cast : 'a ref -> boxed
  end

  structure Dynamic =
  struct
    val readInt = _builtin val Boxed_deref : boxed * word -> int
    val readInt64 = _builtin val Boxed_deref : boxed * word -> int64
    val readChar = _builtin val Boxed_deref : boxed * word -> char
    val readWord8 = _builtin val Boxed_deref : boxed * word -> word8
    val readWord = _builtin val Boxed_deref : boxed * word -> word
    val readWord64 = _builtin val Boxed_deref : boxed * word -> word64
    val readReal = _builtin val Boxed_deref : boxed * word -> real
    val readReal32 = _builtin val Boxed_deref : boxed * word -> real32
    val readBoxed = _builtin val Boxed_deref : boxed * word -> boxed
    val readPtr = _builtin val Boxed_deref : boxed * word -> unit ptr
    val readIntInf = _builtin val Boxed_deref : boxed * word -> intInf
    val readString = _builtin val Boxed_deref : boxed * word -> string
    val readExn = _builtin val Boxed_deref : boxed * word -> exn
    val objectSize = _builtin val ObjectSize : boxed -> word
    val dup = _builtin val Ptr_dup : unit ptr * word * int -> boxed
  end

end

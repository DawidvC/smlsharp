_require "./General.smi"
_require "./StringCvt.smi"
_require local "./SMLSharp_ScanChar.smi"
_require "./IntInf.smi"
_require local "./String.smi"

structure Word16 =
struct
  type word = word16
  val wordSize : int
  val toLarge = SMLSharp_Builtin.Word16.toWord64
  val toLargeX = SMLSharp_Builtin.Word16.toWord64X
  val toLargeWord = SMLSharp_Builtin.Word16.toWord64
  val toLargeWordX = SMLSharp_Builtin.Word16.toWord64X
  val fromLarge = SMLSharp_Builtin.Word64.toWord16
  val fromLargeWord = SMLSharp_Builtin.Word64.toWord16
  val toLargeInt : word -> LargeInt.int
  val toLargeIntX : word -> LargeInt.int
  val fromLargeInt : LargeInt.int -> word
  val toInt = SMLSharp_Builtin.Word16.toInt32
  val toIntX = SMLSharp_Builtin.Word16.toInt32X
  val fromInt = SMLSharp_Builtin.Word16.fromInt32
  val andb = SMLSharp_Builtin.Word16.andb
  val orb = SMLSharp_Builtin.Word16.orb
  val xorb = SMLSharp_Builtin.Word16.xorb
  val notb = SMLSharp_Builtin.Word16.notb
  val << = SMLSharp_Builtin.Word16.lshift
  val >> = SMLSharp_Builtin.Word16.rshift
  val ~>> = SMLSharp_Builtin.Word16.arshift
  val + = SMLSharp_Builtin.Word16.add
  val - = SMLSharp_Builtin.Word16.sub
  val * = SMLSharp_Builtin.Word16.mul
  val div = SMLSharp_Builtin.Word16.div
  val mod = SMLSharp_Builtin.Word16.mod
  val compare : word * word -> General.order
  val < = SMLSharp_Builtin.Word16.lt
  val <= = SMLSharp_Builtin.Word16.lteq
  val > = SMLSharp_Builtin.Word16.gt
  val >= = SMLSharp_Builtin.Word16.gteq
  val ~ = SMLSharp_Builtin.Word16.neg
  val min : word * word -> word
  val max : word * word -> word
  val fmt : StringCvt.radix -> word -> string
  val toString : word -> string
  val scan : StringCvt.radix
             -> (char, 'a) StringCvt.reader
             -> (word, 'a) StringCvt.reader
  val fromString : string -> word option
end

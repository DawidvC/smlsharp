_require "../../basis.smi"
_require "../../smlformat-lib.smi"
_require "../../compiler/absyn/main/Symbol.ppg.smi"
_require "../../compiler/types/main/IDCalc.ppg.smi"
_require "../../compiler/control/main/Loc.ppg.smi"
_require "../../compiler/control/main/Bug.ppg.smi"
_require "../../compiler/name/main/LocalID.smi"
_require "../../compiler/util/main/TermFormat.smi"
_require "../../compiler/nameevaluation/main/NameEvalEnv.ppg.smi"

structure JSONData =
struct

  val dynTfun : unit -> IDCalc.tfun
  val jsonTfun : unit -> IDCalc.tfun
  val jsonTyTfun : unit -> IDCalc.tfun
  val voidTfun : unit -> IDCalc.tfun
  val nullTfun : unit -> IDCalc.tfun
  val optionTfun : unit -> IDCalc.tfun

  val RuntimeTypeErrorExp : unit -> IDCalc.icexp

  val DYNConInfo : unit -> IDCalc.conInfo
  val ARRAYtyConInfo : unit -> IDCalc.conInfo
  val OPTIONtyConInfo : unit -> IDCalc.conInfo
  val BOOLtyConInfo : unit -> IDCalc.conInfo
  val INTtyConInfo : unit -> IDCalc.conInfo
  val NULLtyConInfo : unit -> IDCalc.conInfo
  val DYNtyConInfo : unit -> IDCalc.conInfo
  val RECORDtyConInfo : unit -> IDCalc.conInfo
  val PARTIALRECORDtyConInfo : unit -> IDCalc.conInfo
  val REALtyConInfo : unit -> IDCalc.conInfo
  val STRINGtyConInfo : unit -> IDCalc.conInfo
  val ARRAYConInfo : unit -> IDCalc.conInfo
  val BOOLConInfo : unit -> IDCalc.conInfo
  val INTConInfo : unit -> IDCalc.conInfo
  val NULLObjectConInfo : unit -> IDCalc.conInfo
  val OBJECTConInfo : unit -> IDCalc.conInfo
  val REALConInfo : unit -> IDCalc.conInfo
  val STRINGConInfo : unit -> IDCalc.conInfo
(*
  val NULLConInfo : unit -> IDCalc.conInfo
  val VOIDConInfo : unit -> IDCalc.conInfo
*)

  val DYN : unit -> IDCalc.icexp
  val ARRAYty : unit -> IDCalc.icexp
  val OPTIONty : unit -> IDCalc.icexp
  val BOOLty : unit -> IDCalc.icexp
  val INTty : unit -> IDCalc.icexp
  val NULLty : unit -> IDCalc.icexp
  val DYNty : unit -> IDCalc.icexp
  val RECORDty : unit -> IDCalc.icexp
  val PARTIALRECORDty : unit -> IDCalc.icexp
  val REALty : unit -> IDCalc.icexp
  val STRINGty : unit -> IDCalc.icexp
  val ARRAY : unit -> IDCalc.icexp
  val BOOL : unit -> IDCalc.icexp
  val INT : unit -> IDCalc.icexp
  val NULLObject : unit -> IDCalc.icexp
  val OBJECT : unit -> IDCalc.icexp
  val REAL : unit -> IDCalc.icexp
  val STRING : unit -> IDCalc.icexp
(*
  val NULL : unit -> IDCalc.icexp
  val VOID : unit -> IDCalc.icexp
*)

  val getJson : unit -> IDCalc.icexp
  val checkTy : unit -> IDCalc.icexp
  val checkInt : unit -> IDCalc.icexp
  val checkReal : unit -> IDCalc.icexp
  val checkBool : unit -> IDCalc.icexp
  val checkString : unit -> IDCalc.icexp
  val checkArray : unit -> IDCalc.icexp
  val checkNull : unit -> IDCalc.icexp
  val checkDyn : unit -> IDCalc.icexp
  val checkRecord : unit -> IDCalc.icexp
  val mapCoerce : unit -> IDCalc.icexp
  val makeCoerce : unit -> IDCalc.icexp
  val optionCoerce : unit -> IDCalc.icexp
                             
  val init :  NameEvalEnv.topEnv -> unit
  val initExternalDecls : unit -> unit 
  val getExternDecls : unit -> IDCalc.icdecl list
end

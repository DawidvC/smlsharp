(* -*- sml -*- *)

(**
 * IML instruction set.
 * @author YAMATODANI Kiyoshi
 * @version $Id: Instructions.sml.in,v 1.38 2006/02/09 16:55:09 duchuu Exp $
 *)
structure Instructions =
struct

  datatype instruction =
           (* store an integer into a frame slot. *)
           LoadInt of
           {
             (* an integer value *)
             value : SInt32,
             (* the offset of a frame slot into which the integer is stored. *)
             destination : UInt32
           }
         | LoadWord of {value : UInt32, destination : UInt32}
         | LoadString of
           {
             (* the offset of a ConstString instruction which holds a
              * string constant in its operand. *)
             string : UInt32,
             destination : UInt32
           }
         | LoadReal of {value : Real64, destination : UInt32}
         | (* this instruction is now not used. *)
           LoadBoxedReal of {value : Real64, destination : UInt32}
         | LoadChar of {value : UInt32, destination : UInt32}
         | LoadEmptyBlock of {destination : UInt32}
         | (* copy a value from a frame slot to another slot. *)
           Access_S of {variableOffset : UInt32, destination : UInt32}
         | Access_D of {variableOffset : UInt32, destination : UInt32}
         | (* copy a value from frame slot(s) to other frame slot(s).
            * The number of slots to be copied is determined in runtime.
            *)
           Access_V of
           {
             (* the offset of the first slot which holds a value to be copied.
              *)
             variableOffset : UInt32,
             (* the offset of a slot which holds the size of value. *)
             variableSize : UInt32,
             (* the offset of the first slot into which the value is
              * copied. *)
             destination : UInt32
           }
         | (* copy a value from a field in the ENV block to a frame slot. *)
           AccessEnv_S of {offset : UInt32, destination : UInt32}
         | AccessEnv_D of {offset : UInt32, destination : UInt32}
         | AccessEnv_V of
           {
             offset : UInt32,
             variableSize : UInt32,
             destination : UInt32
           }
         | (* copy a value from a field in the ENV block to a frame slot.
            * The offset of the ENV field is determined in runtime.
            *)
           AccessEnvIndirect_S of
           {
             (* the offset of an ENV field which holds the offset of another
              * ENV field from which the value is obtained. *)
             offset : UInt32,
             destination : UInt32
           }
         | AccessEnvIndirect_D of {offset : UInt32, destination : UInt32}
         | AccessEnvIndirect_V of
           {
             offset : UInt32,
             (* the offset of a frame slot which holds the size of value. *)
             variableSize : UInt32,
             destination : UInt32
           }
         | (* copy a value from a block which is linked from the ENV block to
            * a frame slot.
            *)
           AccessNestedEnv_S of
           {
             (* the number of indirection from the ENV block to the target
              * block which contains the value to be copied.
              * A pointer to a child block is in the last field of the block.
              *)
             nestLevel : UInt32,
             (* the offset of a field in the target block which holds the
              * value to be copied. *)
             offset : UInt32,
             destination : UInt32
           }
         | AccessNestedEnv_D of
           {
             nestLevel : UInt32,
             offset : UInt32,
             destination : UInt32
           }
         | AccessNestedEnv_V of
           {
	     nestLevel : UInt32,
             offset : UInt32,
             variableSize : UInt32,
             destination : UInt32
           }
         | (* copy a value from a block which is linked from the ENV block to
            * a frame slot.
            * The offset of the field which holds the value to be copied is
            * determined in runtime.
            *)
           AccessNestedEnvIndirect_S of
           {
             nestLevel : UInt32,
             (* the offset of a field in the taraget block which holds the
              * offset of another field in the same block which holds the
              * value to be copied. *)
             offset : UInt32,
             destination : UInt32
           }
         | AccessNestedEnvIndirect_D of
           {
             nestLevel : UInt32,
             offset : UInt32,
             destination : UInt32
           }
         | AccessNestedEnvIndirect_V of
           {
	     nestLevel : UInt32,
             offset : UInt32,
             variableSize : UInt32,
             destination : UInt32
           }
         | (* copy a value from a block field to a frame slot.
           *)
           GetField_S of
           {
             (* the offset of a field in a block which holds the value to be
              * copied. *)
             fieldOffset : UInt32,
             (* the offset of a frame slot which holds a pointer to a block. *)
             blockOffset : UInt32,
             destination : UInt32
           }
         | GetField_D of
           {
             fieldOffset : UInt32,
             blockOffset : UInt32,
             destination : UInt32
           }
         | GetField_V of
           {
             fieldOffset : UInt32,
             fieldSize : UInt32,
             blockOffset : UInt32,
             destination : UInt32
           }
         | (* copy a value from a block field to a frame slot.
            * The offset of the block field is determined in runtime.
            *)
           GetFieldIndirect_S of
           {
             (* the offset of a frame slot which holds the offset of the
              * block field. *)
             fieldOffset : UInt32,
             (* the offset of a frame slot which holds a pointer to a block. *)
             blockOffset : UInt32,
             destination : UInt32
           }
         | GetFieldIndirect_D of
           {
             fieldOffset : UInt32,
             blockOffset : UInt32,
             destination : UInt32
           }
         | GetFieldIndirect_V of
           {
             fieldOffset : UInt32,
             fieldSize : UInt32,
             blockOffset : UInt32,
             destination : UInt32
           }
         | (* copy a value from a block field to a frame slot.
            * The block which contains the value is obtained by traversing
            * indirect link.
            * The offset of the block field is determined in runtime.
            *)
           GetNestedFieldIndirect_S of
           {
             (* the number of indirect links between the start block and the
              * target block. *)
             nestLevel : UInt32,
             (* the offset of a frame slot which holds the offset of a field
              * in the target block which holds the value to be copied. *)
             fieldOffset : UInt32,
             (* the offset of a frame slot which holds a pointer to a block
              * which is the start point of indirect link to reach the target
              * block. *)
             blockOffset : UInt32,
             destination : UInt32
           }
         | GetNestedFieldIndirect_D of
           {
             nestLevel : UInt32,
             fieldOffset : UInt32,
             blockOffset : UInt32,
             destination : UInt32
           }
         | GetNestedFieldIndirect_V of
           {
             nestLevel : UInt32,
             fieldOffset : UInt32,
             fieldSize : UInt32,
             blockOffset : UInt32,
             destination : UInt32
           }
         | (* copy a value from a frame slot to a block field.
            *)
           SetField_S of
           {
             (* the offset of a field in the block into which the value is
              * copied. *)
             fieldOffset : UInt32,
             (* the offset of a frame slot which holds a pointer to a block.
              *)
             blockOffset : UInt32,
             (* the offset of a frame slot which holds the value to be copied.
              *)
             newValueOffset : UInt32
           }
         | SetField_D of
           {
             fieldOffset : UInt32,
             blockOffset : UInt32,
             newValueOffset : UInt32
           }
         | SetField_V of
           {
             fieldOffset : UInt32,
             fieldSize : UInt32,
             blockOffset : UInt32,
             newValueOffset : UInt32
           }
         | (* copy a value from a frame slot to a block field.
            * The offset of the block field is determined in runtime.
            *)
           SetFieldIndirect_S of
           {
             (* the offset of a frame slot which holds the offset of the
              * block fielld. *)
             fieldOffset : UInt32,
             (* the offset of a frame slot which holds a pointer to a block.
              *)
             blockOffset : UInt32,
             (* the offset of a frame slot which holds the value to be copied.
              *)
             newValueOffset : UInt32
           }
         | SetFieldIndirect_D of
           {
             fieldOffset : UInt32,
             blockOffset : UInt32,
             newValueOffset : UInt32
           }
         | SetFieldIndirect_V of
           {
             fieldOffset : UInt32,
             fieldSize : UInt32,
             blockOffset : UInt32,
             newValueOffset : UInt32
           }
         | (* copy a value from a frame slot to a block field.
            * The block into which the value is copied is obtained by
            * traversing indirect link.
            * The offset of the block field is determined in runtime.
            *)
           SetNestedFieldIndirect_S of
           {
             (* the number of indirect links between the start block and the
              * target block. *)
             nestLevel : UInt32,
             (* the offset of a frame slot which holds the offset of a field
              * in the target block into which the value is copied. *)
             fieldOffset : UInt32,
             (* the offset of a frame slot which holds a pointer to a block
              * which is the start point of indirect link to reach the target
              * block. *)
             blockOffset : UInt32,
             (* the offset of a frame slot which holds the value to be copied.
              *)
             newValueOffset : UInt32
           }
         | SetNestedFieldIndirect_D of
           {
             nestLevel : UInt32,
             fieldOffset : UInt32,
             blockOffset : UInt32,
             newValueOffset : UInt32
           }
         | SetNestedFieldIndirect_V of
           {
             nestLevel : UInt32,
             fieldOffset : UInt32,
             fieldSize : UInt32,
             blockOffset : UInt32,
             newValueOffset : UInt32
           }
         | (* allocate a new block which holds a copy of contents of another
            * block. *)
           CopyBlock of
           {
             (* the offset of a frame slot which holds a pointer to a block
              * whose contents are copied into a new block. *)
             blockOffset : UInt32,
             destination : UInt32
           }
         | GetGlobal_S of
           {
             globalArrayIndex : UInt32,
             offset : UInt32, 
             destination : UInt32
           }
         | GetGlobal_D of
           {
             globalArrayIndex : UInt32,
             offset : UInt32, 
             destination : UInt32
           }
         | SetGlobal_S of
           {
             globalArrayIndex : UInt32,
             offset : UInt32, 
             variableOffset : UInt32
           }
         | SetGlobal_D of
           {
             globalArrayIndex : UInt32,
             offset : UInt32, 
             variableOffset : UInt32
           }
         | InitGlobalArrayUnboxed of
           {
             globalArrayIndex : UInt32,
             arraySize : UInt32 
           }
         | InitGlobalArrayBoxed of
           {
             globalArrayIndex : UInt32,
             arraySize : UInt32 
           }
         | InitGlobalArrayDouble of
           {
             globalArrayIndex : UInt32,
             arraySize : UInt32 
           }
         | (* store a pointer to the ENV block into a frame slot. *)
           GetEnv of {destination : UInt32}
         | CallPrim of
           {
             primitive : UInt32,
             argsCount : UInt32,
             argIndexes : UInt32 list,
             destination : UInt32
           }
         | (** <p>
            * Hierarchy of call instructions.
            * <pre>
            *   XXX_M
            *     +-- XXX_ML_S
            *     |     +-- XXX_S
            *     +-- XXX_ML_D
            *     |     +-- XXX_D
            *     +-- XXX_ML_V
            *           +-- XXX_V
            * </pre>
            * </p>
            * <p>
            * XXX_M is the general instruction.
            * It takes various number of arguments whose sizes are
            * heterogeneous.
            * </p>
            * <p>
            * XXX_ML_{S,D,V} is a variant of XXX_M.
            * All of its arguments except the last one are single sizes.
            * </p>
            * <p>
            * XXX_{S,D,V} is a variant of XXX_ML_{S,D,V}.
            * The number of its arguments is 1.
            * </p>
            *)
           Apply_S of
           {
             closureOffset : UInt32,
             argOffset : UInt32,
             destination : UInt32
           }
         | Apply_D of
           {
             closureOffset : UInt32,
             argOffset : UInt32,
             destination : UInt32
           }
         | Apply_V of
           {
             closureOffset : UInt32,
             argOffset : UInt32,
             argSizeOffset : UInt32,
             destination : UInt32
           }
         | Apply_ML_S of
           {
             closureOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             destination : UInt32
           }
         | Apply_ML_D of
           {
             closureOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             destination : UInt32
           }
         | Apply_ML_V of
           {
             closureOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             lastArgSizeOffset : UInt32,
             destination : UInt32
           }
         | Apply_M of
           {
             closureOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             argSizeOffsets : UInt32 list,
             destination : UInt32
           }
         | TailApply_S of
           {
             closureOffset : UInt32,
             argOffset : UInt32
           }
         | TailApply_D of
           {
             closureOffset : UInt32,
             argOffset : UInt32
           }
         | TailApply_V of
           {
             closureOffset : UInt32,
             argOffset : UInt32,
             argSizeOffset : UInt32
           }
         | TailApply_ML_S of
           {
             closureOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list
           }
         | TailApply_ML_D of
           {
             closureOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list
           }
         | TailApply_ML_V of
           {
             closureOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             lastArgSizeOffset : UInt32
           }
         | TailApply_M of
           {
             closureOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             argSizeOffsets : UInt32 list
           }
         | CallStatic_S of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argOffset : UInt32,
             destination : UInt32
           }
         | CallStatic_D of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argOffset : UInt32,
             destination : UInt32
           }
         | CallStatic_V of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argOffset : UInt32,
             argSizeOffset : UInt32,
             destination : UInt32
           }
         | CallStatic_ML_S of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             destination : UInt32
           }
         | CallStatic_ML_D of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             destination : UInt32
           }
         | CallStatic_ML_V of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             lastArgSizeOffset : UInt32,
             destination : UInt32
           }
         | CallStatic_M of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             argSizeOffsets : UInt32 list,
             destination : UInt32
           }
         | TailCallStatic_S of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argOffset : UInt32
           }
         | TailCallStatic_D of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argOffset : UInt32
           }
         | TailCallStatic_V of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argOffset : UInt32,
             argSizeOffset : UInt32
           }
         | TailCallStatic_ML_S of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list
           }
         | TailCallStatic_ML_D of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list
           }
         | TailCallStatic_ML_V of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             lastArgSizeOffset : UInt32
           }
         | TailCallStatic_M of
           {
             entryPoint : UInt32,
             envOffset : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             argSizeOffsets : UInt32 list
           }
         | RecursiveCallStatic_S of
           {
             entryPoint : UInt32,
             argOffset : UInt32,
             destination : UInt32
           }
         | RecursiveCallStatic_D of
           {
             entryPoint : UInt32,
             argOffset : UInt32,
             destination : UInt32
           }
         | RecursiveCallStatic_V of
           {
             entryPoint : UInt32,
             argOffset : UInt32,
             argSizeOffset : UInt32,
             destination : UInt32
           }
         | RecursiveCallStatic_M of
           {
             entryPoint : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             argSizeOffsets : UInt32 list,
             destination : UInt32
           }
         | RecursiveTailCallStatic_S of
           {
             entryPoint : UInt32,
             argOffset : UInt32
           }
         | RecursiveTailCallStatic_D of
           {
             entryPoint : UInt32,
             argOffset : UInt32
           }
         | RecursiveTailCallStatic_V of
           {
             entryPoint : UInt32,
             argOffset : UInt32,
             argSizeOffset : UInt32
           }
         | RecursiveTailCallStatic_M of
           {
             entryPoint : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             argSizeOffsets : UInt32 list
           }
         | SelfRecursiveCallStatic_S of
           {
             entryPoint : UInt32,
             argOffset : UInt32,
             destination : UInt32
           }
         | SelfRecursiveCallStatic_D of
           {
             entryPoint : UInt32,
             argOffset : UInt32,
             destination : UInt32
           }
         | SelfRecursiveCallStatic_V of
           {
             entryPoint : UInt32,
             argOffset : UInt32,
             argSizeOffset : UInt32,
             destination : UInt32
           }
         | SelfRecursiveCallStatic_M of
           {
             entryPoint : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             argSizeOffsets : UInt32 list,
             destination : UInt32
           }
         | SelfRecursiveTailCallStatic_S of
           {
             entryPoint : UInt32,
             argOffset : UInt32
           }
         | SelfRecursiveTailCallStatic_D of
           {
             entryPoint : UInt32,
             argOffset : UInt32
           }
         | SelfRecursiveTailCallStatic_V of
           {
             entryPoint : UInt32,
             argOffset : UInt32,
             argSizeOffset : UInt32
           }
         | SelfRecursiveTailCallStatic_M of
           {
             entryPoint : UInt32,
             argsCount : UInt32,
             argOffsets : UInt32 list,
             argSizeOffsets : UInt32 list
           }
         | (* allocate a new block.
            * Payload of the block is partitioned into logical fields.
            * Each logical field occupies variable number of physical fields.
            * The number of physical fields each logical field occupies is
            * determined in runtime.
            *)
           MakeBlock of
           {
             (* the offset of a frame slot which holds a bitmap for the new
              * block. *)
             bitmapIndex : UInt32,
             (* the offset of a frame slot which holds the size of the new
              * block. *)
	     sizeIndex : UInt32,
             (* the number of logical fields. *)
             fieldsCount : UInt32,
             (* a list of offsets of frame slots which hold initial values of
              * each logical field. *)
             fieldIndexes : UInt32 list,
             (* a list of offsets of frame slots which hold the size of 
              * each logical field. *)
             fieldSizeIndexes : UInt32 list,
             destination : UInt32
           }
         | (* This is a derived version of the MakeBlock instruction
            * specialized to allocate a block in which every logical field
            * occupies one physical field.
            *)
           MakeBlockOfSingleValues of
           {
             bitmapIndex : UInt32,
             fieldsCount : UInt32,
             fieldIndexes : UInt32 list,
             destination : UInt32
           }
         | (* allocate a new array block.
            *)
           MakeArray_S of
           {
             bitmapIndex : UInt32,
             sizeIndex : UInt32,
             (* the offset of a frame slot which holds a value which is
              * copied to every field of the new array. *)
             initialValueIndex : UInt32,
             destination : UInt32
           }
         | MakeArray_D of
           {
             bitmapIndex : UInt32,
             sizeIndex : UInt32,
             initialValueIndex : UInt32,
             destination : UInt32
           }
         | MakeArray_V of
           {
             bitmapIndex : UInt32,
             sizeIndex : UInt32,
             initialValueIndex : UInt32,
	     initialValueSize : UInt32,
             destination : UInt32
           }
         | MakeClosure of
           {
             entryPoint : UInt32,
             ENVOffset : UInt32,
             destination : UInt32
           }
         | Raise of {exceptionOffset : UInt32}
         | PushHandler of {handler : UInt32, exceptionOffset : UInt32}
         | PopHandler
         | SwitchInt of
           {
             targetOffset : UInt32,
             casesCount : UInt32,
             cases : SInt32 list,
             default : UInt32
           }
         | SwitchWord of
           {
             targetOffset : UInt32,
             casesCount : UInt32,
             cases : UInt32 list,
             default : UInt32
           }
         | SwitchChar of
           {
             targetOffset : UInt32,
             casesCount : UInt32,
             cases : UInt32 list,
             default : UInt32
           }
         | SwitchString of
           {
             targetOffset : UInt32,
             casesCount : UInt32,
             cases : UInt32 list,
             default : UInt32
           }
         | Jump of {destination : UInt32}
         | Exit
         | Return_S of {variableOffset : UInt32}
         | Return_D of {variableOffset : UInt32}
         | Return_V of {variableOffset : UInt32, variableSize : UInt32}
         | (* entry point of a function.
            * Informations required to allocate new stack frame for an
            * invocation of the function are obtained from its operands.
            *)
           FunEntry of
           {
             (* the number of words of the stack frame. *)
             frameSize : UInt32,
             (* the offset of the first instruction of the function body. *)
             startOffset : UInt32,
             (* the number of arguments this function requires. *)
             arity : UInt32,
             (* a list of offset of slots of a new stack frame into which
              * passed arguments are copied.
              *)
             argsdest : UInt32 list,
             (* informations necessary to compose a frame bitmap. *)
             bitmapvalsFreesCount : UInt32,
             bitmapvalsFrees : UInt32 list,
             bitmapvalsArgsCount : UInt32,
             bitmapvalsArgs : UInt32 list,
             (* the number of slots used by pointer variables. *)
             pointers : UInt32,
             (* the number of slots used by non-pointer variables. *)
             atoms : UInt32,
             (* the number of elements of recordGroups. *)
             recordGroupsCount : UInt32,
             (* a list of the number of slots used by polytype variables
              * whose instantiated type is indicated by a bit in the frame
              * bitmap. *)
             recordGroups : UInt32 list
           }
         | (* This instruction is referred to by LoadString and SwitchString
            * instructions. This instruction itself is never executed.*)
           ConstString of
           {
             (* The number of bytes of the string, excluding trailing zeros. *)
             length : UInt32,
             (* This byte list includes trailing zeros.
              * The number of zeros is from 1 to 4.
              *)
             string : UInt8 list
           }
         | Nop
         | (* imports a function which is exported from a external library. *)
           FFIVal of
           {
             (* the offset of a frame slot which holds a pointer to a string
              * block for the function name. *)
             funNameOffset : UInt32, 
             (* the offset of a frame slot which holds a pointer to a string
              * block for the library name. *)
             libNameOffset : UInt32, 
             destination : UInt32
           }
         | (* invoke an external function which is imported by the FFIVal
            * instruction.
            *)
           ForeignApply of
           {
             (* the offset of a frame slot which holds a pointer to a block
              * containing a pointer to the external function. *)
             closureOffset : UInt32,
             argsCount : UInt32,
             argIndexes : UInt32 list,
             destination : UInt32
           }
         | DebuggerBreak

         | AddInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | AddInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }
         | AddReal_Const_1 of
           {
            argValue1 : Real64,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | AddReal_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : Real64,
            destination : UInt32
           }
         | AddWord_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | AddWord_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | AddByte_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | AddByte_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }

         | SubInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | SubInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }
         | SubReal_Const_1 of
           {
            argValue1 : Real64,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | SubReal_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : Real64,
            destination : UInt32
           }
         | SubWord_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | SubWord_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | SubByte_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | SubByte_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }

         | MulInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | MulInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }
         | MulReal_Const_1 of
           {
            argValue1 : Real64,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | MulReal_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : Real64,
            destination : UInt32
           }
         | MulWord_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | MulWord_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | MulByte_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | MulByte_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }

         | DivInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | DivInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }
         | DivReal_Const_1 of
           {
            argValue1 : Real64,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | DivReal_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : Real64,
            destination : UInt32
           }
         | DivWord_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | DivWord_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | DivByte_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | DivByte_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }

         | ModInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | ModInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }
         | ModWord_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | ModWord_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | ModByte_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | ModByte_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }

         | QuotInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | QuotInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }

         | RemInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | RemInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }

(* temporarily disable
         | LtInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LtInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }
         | LtReal_Const_1 of
           {
            argValue1 : Real64,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LtReal_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : Real64,
            destination : UInt32
           }
         | LtWord_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LtWord_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | LtByte_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LtByte_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | LtChar_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LtChar_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }

         | GtInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GtInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }
         | GtReal_Const_1 of
           {
            argValue1 : Real64,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GtReal_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : Real64,
            destination : UInt32
           }
         | GtWord_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GtWord_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | GtByte_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GtByte_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | GtChar_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GtChar_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }

         | LteqInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LteqInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }
         | LteqReal_Const_1 of
           {
            argValue1 : Real64,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LteqReal_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : Real64,
            destination : UInt32
           }
         | LteqWord_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LteqWord_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | LteqByte_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LteqByte_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | LteqChar_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | LteqChar_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }

         | GteqInt_Const_1 of
           {
            argValue1 : SInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GteqInt_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : SInt32,
            destination : UInt32
           }
         | GteqReal_Const_1 of
           {
            argValue1 : Real64,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GteqReal_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : Real64,
            destination : UInt32
           }
         | GteqWord_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GteqWord_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | GteqByte_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GteqByte_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | GteqChar_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | GteqChar_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
*)


         | Word_andb_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | Word_andb_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | Word_orb_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | Word_orb_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | Word_xorb_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | Word_xorb_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | Word_leftShift_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | Word_leftShift_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | Word_logicalRightShift_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | Word_logicalRightShift_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }
         | Word_arithmeticRightShift_Const_1 of
           {
            argValue1 : UInt32,
            argIndex2 : UInt32,
            destination : UInt32
           }
         | Word_arithmeticRightShift_Const_2 of
           {
            argIndex1 : UInt32,
            argValue2 : UInt32,
            destination : UInt32
           }


@SMLPrimitiveInstructions@

end

(* -*- sml -*- *)

(**
 * primitive operators
 * @author YAMATODANI Kiyoshi
 * @version $Id: Primitives.ppg.in,v 1.7 2006/02/03 13:47:25 kiyoshiy Exp $
 *)
structure Primitives =
struct

  (***************************************************************************)

  structure BT = BasicTypes
  structure I = Instructions

  (***************************************************************************)

  type operand1 =
       {
         argIndex : BT.UInt32,
         destination : BT.UInt32
       }

  type operand2 =
       {
         argIndex1 : BT.UInt32,
         argIndex2 : BT.UInt32,
         destination : BT.UInt32
       }

  type operand3 =
       {
         argIndex1 : BT.UInt32,
         argIndex2 : BT.UInt32,
         argIndex3 : BT.UInt32,
         destination : BT.UInt32
       }

  type operandN =
       {
         argsCount : BT.UInt32,
         argIndexes : BT.UInt32 list,
         destination : BT.UInt32
       }

  (*% *)
  datatype instruction =
           Internal1 of operand1 -> I.instruction
         | Internal2 of operand2 -> I.instruction
         | Internal3 of operand3 -> I.instruction
         | InternalN of operandN -> I.instruction
         | External of int
         | None

  (*%
   *)
  type primitive =
       (*%
        * @format({bindName, ty, instruction}) bindName
        *)
       {
         bindName : string,
         ty : Types.ty,
         instruction : instruction
       }

  (***************************************************************************)

  local open I
  in
  val primitives : primitive list =
      [
        @SMLPrimitives@
      ]
      handle
      TypeParser.TypeFormat typeString =>
      raise Control.Bug ("invalid type expression:" ^ typeString)
  end

  (***************************************************************************)

end

_require "../../../basis.smi"
_require local "../../../smlformat-lib.smi"
_require local "../../debug/main/Bug.ppg.smi"
_require local "../../json-to-ml/main/JSONToML.smi"
_require "./JSON.smi"

structure JSONImpl =
struct
  val getJson : 'a JSON.dyn -> JSON.json
  val checkTy : JSON.json -> JSON.jsonTy -> unit
  val checkInt : JSON.json -> int
  val checkReal : JSON.json -> real
  val checkBool : JSON.json -> bool
  val checkString : JSON.json -> string
  val checkArray : JSON.json -> JSON.json list
  val checkNull : JSON.json -> 'a option
  val checkDyn : JSON.json -> JSON.void JSON.dyn
  val checkRecord : JSON.json -> string list -> unit
  val makeCoerce : ['a#json. JSON.json -> JSON.jsonTy -> (JSON.json -> 'a) -> 'a JSON.dyn]
  val mapCoerce : (JSON.json -> 'a) -> JSON.json list -> 'a list
  val optionCoerce : (JSON.json -> 'a) -> JSON.json -> 'a option
  val coerceJson : ['a#json. JSON.json * JSON.jsonTy -> 'a]

  val naturalJoin : JSON.json * JSON.json -> JSON.json
  (* stub for avoiding duplicated top symbol *)
  val toJson : ['a#dynamic.'a -> JSON.json]
end

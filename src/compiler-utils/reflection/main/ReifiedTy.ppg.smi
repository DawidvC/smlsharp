_require local "../../../basis.smi"
_require local "../../../smlunit-lib.smi"

_require local "../../debug/main/Bug.ppg.smi"
_require local "../../format-utils/main/TermPrintUtils.ppg.smi"

_require "../../../smlformat-lib.smi"

_require "../../symbols/main/Symbol.ppg.smi"
_require "../../symbols/main/RecordLabel.smi"
_require "../../ids/main/LocalID.smi"
_require "../../env/main/SEnv.smi"
_require "../../symbols/main/Loc.ppg.smi"

structure ReifiedTy =
struct
  type btvId = BoundTypeVarID.id
  type typId = TypID.id
  exception ConSetNotFound

  datatype taggedLayout 
    = TAGGED_RECORD of {tagMap: int SEnv.map}
    | TAGGED_OR_NULL of {tagMap: int SEnv.map, nullName: string}
    | TAGGED_TAGONLY of {tagMap: int SEnv.map}

  val taggedLayoutToString : taggedLayout -> string
  val taggedLayoutEq : taggedLayout * taggedLayout -> bool
  val assertEqualTaggedLayout : taggedLayout -> taggedLayout -> unit
  datatype layout
    = LAYOUT_TAGGED of taggedLayout
    | LAYOUT_ARG_OR_NULL of {wrap: bool}
    | LAYOUT_SINGLE_ARG of {wrap: bool}
    | LAYOUT_CHOICE of {falseName: string}
    | LAYOUT_SINGLE
  val layoutToString : layout -> string
  val layoutEq : layout * layout -> bool
  val assertEqualLayout : layout -> layout -> unit

  datatype reifiedTy
    = ARRAYty of reifiedTy
    | BOOLty
    | BOUNDVARty of BoundTypeVarID.id
    | CHARty
    | CODEPTRty
    | CONSTRUCTty of {longsymbol: Symbol.longsymbol, id:TypID.id, args:reifiedTy list, conSet:reifiedTy option SEnv.map, layout:layout, size:int}
    | DATATYPEty of {longsymbol: Symbol.longsymbol, id:TypID.id, args:reifiedTy list, layout:layout, size:int}
    | DUMMYty of {boxed : bool, size : word}
    | ERRORty
    | EXNTAGty
    | EXNty
    | FUNty
    | INTty
    | INT8ty
    | INT16ty
    | INT64ty
    | INTERNALty of int
    | INTINFty
    | LISTty of reifiedTy
    | OPAQUEty of {longsymbol: Symbol.longsymbol, id:TypID.id, args:reifiedTy list, size:int}
    | OPTIONty of reifiedTy
    | POLYty of {boundenv: btvId BoundTypeVarID.Map.map, body:reifiedTy}
    | PTRty of reifiedTy
    | REAL32ty
    | REALty
    | RECORDty of reifiedTy RecordLabel.Map.map
    | REFty of reifiedTy
    | STRINGty
    | TYVARty
    | UNITty 
    | VECTORty of reifiedTy
    | WORDty
    | WORD8ty
    | WORD16ty
    | WORD64ty

 type conSet = reifiedTy option SEnv.map

  val format_reifiedTy : reifiedTy -> SMLFormat.format
  val reifiedTyToString : reifiedTy -> string
  val reifiedTyEq : reifiedTy * reifiedTy -> bool
  val assertEqualReifiedTy : reifiedTy -> reifiedTy -> unit

  val emptyConSet : conSet

  val format_conSet : conSet -> SMLFormat.format
  val conSetToString : conSet -> string
  val conSetEq : conSet * conSet -> bool
  val assertEqualConSet : conSet -> conSet -> unit

  type conSetEnv = conSet TypID.Map.map
  val emptyConSetEnv : conSetEnv
  val format_conSetEnv : conSetEnv -> SMLFormat.format
  val conSetEnvToString : conSetEnv -> string
  val conSetEnvEq : conSetEnv * conSetEnv -> bool
  val assertEqualConSetEnv : conSetEnv -> conSetEnv -> unit

  type tyRep = {conSetEnv: conSetEnv, reifiedTy : reifiedTy}
  val format_tyRep : tyRep -> SMLFormat.format
  val tyRepToString : tyRep -> string
  val tyRepEq : tyRep * tyRep -> bool
  val assertEqualTy : tyRep -> tyRep -> unit

  val globalConSetEnv : conSetEnv ref
  val resetGlobalConSetEnv : unit -> unit
  val getGlobalConSetEnv : unit -> conSetEnv
  val lookUpConSet : conSetEnv * TypID.id -> conSet
  val findConSet : TypID.id -> conSet option
  val mkConSet : (string * reifiedTy option) list -> conSet
  val insertConSet : conSetEnv * TypID.id * conSet -> conSetEnv
  val setConSet : TypID.id * conSet -> unit

  val getConstructTy : tyRep -> tyRep
  val getConSet : tyRep -> conSet
  val instantiate : reifiedTy * reifiedTy list -> reifiedTy

  val stringReifiedTyListToRecordTy :  (string * reifiedTy) list -> reifiedTy
  val stringReifiedTyOptionListToConSet : (string * reifiedTy option) list -> conSet
  val makePos : string -> int -> int -> Loc.pos
  val typIdConSetListToConSetEnv : (TypID.id * conSet) list -> conSetEnv
  val TyRep : conSetEnv -> reifiedTy -> tyRep
  val btvIdBtvIdListToBoundenv : (btvId * btvId) list -> btvId BoundTypeVarID.Map.map
  val boundenvReifiedTyToPolyTy : btvId BoundTypeVarID.Map.map -> reifiedTy -> reifiedTy
  val makeDummyTy : bool -> word -> reifiedTy
  val boolToWrapRecord : bool -> {wrap:bool}
  val stringToFalseNameRecord : string -> {falseName:string}
  val stringIntListToTagMap : (string * int) list -> int SEnv.map
  val tagMapStringToTagMapNullNameRecord : (int SEnv.map) -> string -> {tagMap:int SEnv.map, nullName:string}
  val tagMapToTagMapRecord : (int SEnv.map) -> {tagMap:int SEnv.map}
  val longsymbolIdArgsLayoutListToDatatypeTy : Symbol.longsymbol -> TypID.id -> reifiedTy list -> layout -> int -> reifiedTy
  val longsymbolIdArgsToOpaqueTy : Symbol.longsymbol -> TypID.id -> reifiedTy list -> int -> reifiedTy

end

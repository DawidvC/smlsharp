_require "../../../basis.smi"
_require "../../../compiler/types/main/Types.ppg.smi"
_require local "../../../compiler/types/main/TypesBasics.smi"
_require local "../../../compiler/runtimetypes/main/RuntimeTypes.ppg.smi"
_require local "../../../compiler/builtin2/main/BuiltinTypeNames.ppg.smi"
_require local "../../../compiler/builtin2/main/BuiltinTypes.smi"
_require local "../../../compiler/bitmapcompilation2/main/SingletonTyEnv.smi"
_require local "../../../compiler/bitmapcompilation2/main/RecordLayout.smi"
_require local "../../../compiler/control/main/Bug.ppg.smi"
_require "../../../compiler/absyn/main/RecordLabel.smi"
_require local "../../env/main/SEnv.smi"
_require local "../../env/main/IEnv.smi"
_require local "../../../compiler/name/main/LocalID.smi"
_require local "../../../compiler/datatypecompilation/main/DatatypeLayout.smi"

structure Dynamic =
struct

  type dynamic (= boxed)

  val dynamic = _builtin val Dynamic : 'a -> dynamic

  val load : unit ptr * Types.ty -> dynamic

  datatype value =
      WORD8 of Word8.word
    | CHAR of char
    | INT32 of Int32.int
    | INT64 of Int64.int
    | WORD32 of Word32.word
    | WORD64 of Word64.word
    | REAL of real
    | REAL32 of Real32.real
    | PTR of unit ptr
    | RECORD of (RecordLabel.label * dynamic) list
    | VARIANT of Types.typId * string * value option
    | LIST of dynamic_list
    | ARRAY of {length : int, sub : int -> dynamic}
    | VECTOR of {length : int, sub : int -> dynamic}
    | REF of value
    | INTINF of IntInf.int
    | STRING of string
    | EXN of exn
    | FUN
    | UNIT
    | OTHER
  and dynamic_list =
      NIL
    | CONS of dynamic * dynamic
  type dynamic_array =
      {length : int, sub : int -> dynamic}

  val read : dynamic -> value
  val readList : dynamic_list -> dynamic list
  val readArray : dynamic_array -> dynamic vector

end

(* -*- sml -*- *)
(**
 * SQL Query
 * @author UENO Katsuhiro
 * @copuyright (c) 2016 Tohoku University
 *)

structure SMLSharp_SQL_Query =
struct

  fun term s = [SMLFormat.FormatExpression.Term (size s, s)]

  fun formatSQLID s =
      term ("\"" ^ String.translate (fn #"\"" => "\"\"" | c => str c) s ^ "\"")

  fun formatSQLString s =
      term ("'" ^ String.translate
                    (fn #"'" => "''" | #"\\" => "\\\\" | c => str c)
                    s
            ^ "'")

  fun fixSign x = CharVector.map (fn #"~" => #"-" | c => c) x
  fun formatInteger fmt x = term (fixSign (fmt StringCvt.DEC x))
  fun formatSQLIntInf x = formatInteger IntInf.fmt x
  fun formatSQLInt x = formatInteger Int.fmt x
  fun formatSQLWord x = formatInteger Word.fmt x
  fun formatSQLReal x = term (fixSign (Real.fmt (StringCvt.FIX (SOME 10)) x))
  fun formatSQLReal32 x = term (fixSign (Real32.fmt (StringCvt.FIX (SOME 10)) x))
  fun formatSQLChar x = formatSQLString (str x)
  fun formatTimestamp x = term ("'" ^ (SMLSharp_SQL_TimeStamp.toString x) ^ "'")
  fun formatDecimal x = term (SMLSharp_SQL_Decimal.toString x)
  fun formatFloat x = term (SMLSharp_SQL_Float.toString x)

  fun ifnone (_,x,y) NONE = x
    | ifnone (_,x,y) (SOME _) = y

  fun default (f,x) NONE = x
    | default (f,_) (SOME x) = f x

  fun iftrue (x,y) true = x
    | iftrue (x,y) false = y

  fun ifsingle (_,x,y) [_] = x
    | ifsingle (_,x,y) _ = y

  fun ifempty (_,x,y) nil = x
    | ifempty (_,x,y) _ = y

  (*% @prefix ifInt_ @params(f) *)
  (*% @prefix format_
   * @formatter(sqlid) formatSQLID
   * @formatter(int) formatSQLInt
   * @formatter(intInf) formatSQLIntInf
   * @formatter(word) formatSQLWord
   * @formatter(real) formatSQLReal
   * @formatter(real32) formatSQLReal32
   * @formatter(sqlstring) formatSQLString
   * @formatter(char) formatSQLChar
   * @formatter(SMLSharp_SQL_TimeStamp.timestamp) formatTimestamp
   * @formatter(SMLSharp_SQL_Decimal.decimal) formatDecimal
   * @formatter(SMLSharp_SQL_Float.float) formatFloat
   * @formatter(ifnone) ifnone
   * @formatter(iftrue) iftrue
   * @formatter(ifempty) ifempty
   * @formatter(ifInt) ifInt_qexp
   *)
  datatype qexp =
      (*% @prefix format_ @format(x) x *)
      (*% @prefix ifInt_ @format f *)
      INT of int
    | (*% @prefix format_ @format(x) x *)
      (*% @prefix ifInt_ @format f *)
      WORD of word
    | (*% @prefix format_ @format(x) x *)
      (*% @prefix ifInt_ @format *)
      REAL of real
    | (*% @prefix format_ @format(x) x *)
      (*% @prefix ifInt_ @format *)
      REAL32 of real32
    | (*% @prefix format_ @format(x) x:sqlstring *)
      (*% @prefix ifInt_ @format *)
      STRING of string
    | (*% @prefix format_ @format(x) x *)
      (*% @prefix ifInt_ @format *)
      CHAR of char
    | (*% @prefix format_ @format(x) x *)
      (*% @prefix ifInt_ @format(x) "" *)
      INTINF of intInf
    | (*% @prefix format_ @format(x) x *)
      (*% @prefix ifInt_ @format *)
      TIMESTAMP of SMLSharp_SQL_TimeStamp.timestamp
    | (*% @prefix format_ @format(x) x *)
      (*% @prefix ifInt_ @format *)
      DECIMAL of SMLSharp_SQL_Decimal.decimal
    | (*% @prefix format_ @format(x) x *)
      (*% @prefix ifInt_ @format *)
      FLOAT of SMLSharp_SQL_Float.float
    | (*% @prefix format_ @format "NULL" *)
      (*% @prefix ifInt_ @format *)
      NULL
    | (*% @prefix format_ @format "DEFAULT" *)
      (*% @prefix ifInt_ @format *)
      DEFAULT
    | (*% @prefix format_
       * @format(id opt * col)
       * opt(id:sqlid) opt:ifnone(id)(,".") col:sqlid
       *)
      (*% @prefix ifInt_ @format *)
      COLUMN of string option * string
    | (*% @prefix format_
       * @format(e1 * e2)
       * L1{ e1 2[ +1 "OR" +d e2 ] }
       *)
      (*% @prefix ifInt_ @format *)
      OR of qexp * qexp
    | (*% @prefix format_
       * @format(e1 * e2)
       * L2{ e1 2[ +1 "AND" +d e2 ] }
       *)
      (*% @prefix ifInt_ @format *)
      AND of qexp * qexp
    | (*% @prefix format_
       * @format(e1)
       * N3{ "NOT" +d e1 }
       *)
      (*% @prefix ifInt_ @format *)
      NOT of qexp
    | (*% @prefix format_
       * @format(e1 * oper * e2)
       * N4{ e1 1[ +1 oper +d e2 ] }
       *)
      (*% @prefix ifInt_ @format *)
      CMPOP of qexp * string * qexp
    | (*% @prefix format_
       * @format(e1 * oper * e2)
       * N5{ e1 1[ +1 oper +d e2 ] }
       *)
      (*% @prefix ifInt_ @format *)
      ADDOP of qexp * string * qexp
    | (*% @prefix format_
       * @format(e1 * oper * e2)
       * N6{ e1 1[ +1 oper +d e2 ] }
       *)
      (*% @prefix ifInt_ @format *)
      MULOP of qexp * string * qexp
    | (*% @prefix format_
       * @format(oper * e1)
       * N7{ oper e1 }
       *)
      (*% @prefix ifInt_ @format *)
      UNARYOP of string * qexp
    | (*% @prefix format_
       * @format(e1)
       * N4{ e1 +d "IS" +d "NULL" }
       *)
      (*% @prefix ifInt_ @format *)
      ISNULL of qexp
    | (*% @prefix format_
       * @format(e1)
       * N4{ e1 +d "IS" +d +d "NOT" +d "NULL" }
       *)
      (*% @prefix ifInt_ @format *)
      ISNOTNULL of qexp
    | (*% @prefix format_
       * @format(q1)
       * N4{ "EXISTS(" !N0{ q1 ")" } }
       *)
      (*% @prefix ifInt_ @format *)
      EXISTS of qtable5

  and qtable1 =
      (*% @prefix format_ 
       * @format(id) id:sqlid
       *)
      (*% @prefix ifInt_ @format *)
      ID of string
    | (*% @prefix format_ 
       * @format(q * id)
       * N2{ q +1 "AS" +d id:sqlid }
       *)
      (*% @prefix ifInt_ @format *)
      AS of qtable1 * string
    | (*% @prefix format_ 
       * @format(q * id)
       * N2{ "(" !N0{ q ")" } +1 "AS" +d id:sqlid }
       *)
      (*% @prefix ifInt_ @format *)
      SUBQUERY of qtable5 * string
    | (*% @prefix format_ 
       * @format(q1 * q2)
       * L1{ q1 +1 "CROSS" +d "JOIN" +2 q2 }
       *)
      (*% @prefix ifInt_ @format *)
      CROSSJOIN of qtable1 * qtable1
    | (*% @prefix format_ 
       * @format(q1 * q2 * e)
       * L1{ q1 +1 "INNER" +d "JOIN" +2 q2 +1 "ON" +d e }
       *)
      (*% @prefix ifInt_ @format *)
      INNERJOIN of qtable1 * qtable1 * qexp
    | (*% @prefix format_ 
       * @format(q1 * q2)
       * L1{ q1 +1 "NATURAL" +d "JOIN" +2 q2 }
       *)
      (*% @prefix ifInt_ @format *)
      NATURALJOIN of qtable1 * qtable1

  and qtable2 =
      (*% @prefix format_ 
       * @format(q)
       * +1 !N0{ "FROM" 2[ +1 q ] }
       *)
      (*% @prefix ifInt_ @format *)
      FROM of qtable1
    | (*% @prefix format_ 
       * @format
       *)
      (*% @prefix ifInt_ @format *)
      FROM_DUAL

  and qtable3 =
      (*% @prefix format_ 
       * @format(q * e opt)
       * q opt:ifnone(e)(,+1 !N0{ "WHERE" 2[ +1 opt(e) ] })
       *)
      (*% @prefix ifInt_ @format *)
      WHERE of qtable2 * qexp option

  and qtable4 =
      (*% @prefix format_ 
       * @format({select: select selects, from: from, orderBy})
       * !N0{ 2[ +1 selects(select)("," +1) ] } from orderBy
       * @format:select(label * e)
       * !N0{ e 2[ +1 "AS" +d label:sqlid ] }
       * @format:orderBy(ord ords)
       * ords:ifempty(ord)(,+1 "ORDER" +d "BY" !N0{ 2[ +1 ords(ord)("," +1) ] })
       * @format:ord({key: key, asc})
       * { key:ifInt()("0+") key +d asc:iftrue()("ASC","DESC") }
       *)
      (*% @prefix ifInt_ @format *)
      SELECT of {select : (string * qexp) list,
                 from : qtable3,
                 orderBy : {key : qexp, asc : bool} list}

  and qtable5 =
      (*% @prefix format_ 
       * @format(q)
       * !N0{ "SELECT" +d "DISTINCT" q }
       *)
      (*% @prefix ifInt_ @format *)
      SELECT_DISTINCT of qtable4
    | (*% @prefix format_ 
       * @format(q)
       * !N0{ "SELECT" +d "ALL" q }
       *)
      (*% @prefix ifInt_ @format *)
      SELECT_ALL of qtable4
    | (*% @prefix format_ 
       * @format(q)
       * !N0{ "SELECT" q }
       *)
      (*% @prefix ifInt_ @format *)
      SELECT_DEFAULT of qtable4

  (*% *)
  type query =
      (*% @format(x) x *)
      qtable5

  (*%
   * @formatter(sqlid) formatSQLID
   * @formatter(ifsingle) ifsingle
   * @formatter(ifnone) ifnone
   *)
  datatype command =
      (*%
       * @format(q)
       * !N0{ "DELETE" q }
       *)
      DELETE of qtable3
    | (*%
       * @format({table: table, labels, values,
       *          from: f fopt, whereCond: wh whopt})
       * !N0{
       *    "UPDATE" +d table
       *    +1 { "SET" 2[ +1 { labels +1 "=" +d values } ] }
       *    fopt:ifnone(f)(,+1 { "FROM" 2[ +1 fopt(f) ] })
       *    whopt:ifnone(wh)(,+1 { "WHERE" 2[ +1 whopt(wh) ] })
       * }
       * @format:labels(l:sqlid ls)
       * ls:ifsingle(l)(,"(") !N0{ ls(l)("," +1) ls:ifsingle(l)(,")") }
       * @format:values(v vs)
       * vs:ifsingle(v)(,"(") !N0{ vs(v)("," +1) vs:ifsingle(v)(,")") }
       *)
      UPDATE of {table : qtable1,
                 labels : string list,
                 values: qexp list,
                 from : qtable1 option,
                 whereCond : qexp option}
    | (*%
       * @format({into, labels, values})
       * !N0{
       *    { "INSERT" +d "INTO" +d into:sqlid 2[ +1 labels ] }
       *    +1 { "VALUES" 2[ +2 values ] }
       * }
       * @format:labels(l:sqlid ls)
       * ls:ifsingle(l)(,"(") !N0{ ls(l)("," +1) ls:ifsingle(l)(,")") }
       * @format:values(r rs)
       * { rs(r)("," +1) }
       * @format:r(v vs)
       * vs:ifsingle(v)(,"(") !N0{ vs(v)("," +1) vs:ifsingle(v)(,")") }
       *)
      INSERT of {into : string,
                 labels : string list,
                 values : qexp list list}
    | (*%
       * @format
       * "BEGIN"
       *)
      BEGIN
    | (*%
       * @format
       * "COMMIT"
       *)
      COMMIT
    | (*%
       * @format
       * "ROLLBACK"
       *)
      ROLLBACK

end

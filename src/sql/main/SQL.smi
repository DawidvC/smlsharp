_require "./SQLPrim.smi"
_require "./SQLErrors.smi"
_require "./Backend.smi"
_require "./builtintypes/timestamp/TimeStamp.smi"
_require "./builtintypes/decimal/Decimal.smi"
_require "./builtintypes/float/Float.smi"

structure SQL =
struct

  structure TimeStamp = SMLSharp_SQL_TimeStamp
  structure Decimal = SMLSharp_SQL_Decimal
  structure Float = SMLSharp_SQL_Float

  type timestamp = SMLSharp_SQL_Prim.timestamp
  type decimal = SMLSharp_SQL_Prim.decimal
  type float = SMLSharp_SQL_Prim.float
  type backend = SMLSharp_SQL_Prim.backend
  type 'a server = 'a SMLSharp_SQL_Prim.server
  type 'a conn = 'a SMLSharp_SQL_Prim.conn
  type 'a cursor = 'a SMLSharp_SQL_Prim.cursor
  type ('toy,'w) exp = ('toy,'w) SMLSharp_SQL_Prim.exp
  type ('toy,'w) whr = ('toy,'w) SMLSharp_SQL_Prim.whr
  type ('toy,'w) from = ('toy,'w) SMLSharp_SQL_Prim.from
  type ('toy,'w) orderby = ('toy,'w) SMLSharp_SQL_Prim.orderby
  type ('src,'toy,'w) select = ('src,'toy,'w) SMLSharp_SQL_Prim.select
  type ('toy,'w) query = ('toy,'w) SMLSharp_SQL_Prim.query
  type ('toy,'ret,'w) command = ('toy,'ret,'w) SMLSharp_SQL_Prim.command
  type ('toy,'w) db = ('toy,'w) SMLSharp_SQL_Prim.db
  exception Format = SMLSharp_SQL_Errors.Format
  exception Exec = SMLSharp_SQL_Errors.Exec
  exception Connect = SMLSharp_SQL_Errors.Connect
  exception Link = SMLSharp_SQL_Errors.Link

  val postgresql = SMLSharp_SQL_Backend.postgresql
  val mysql = SMLSharp_SQL_Backend.mysql
  val odbc = SMLSharp_SQL_Backend.odbc

  val queryCommand = SMLSharp_SQL_Prim.queryCommand
  val connect = SMLSharp_SQL_Prim.connect
  val closeConn = SMLSharp_SQL_Prim.closeConn
  val closeCursor = SMLSharp_SQL_Prim.closeCursor
  val fetch = SMLSharp_SQL_Prim.fetch
  val fetchAll = SMLSharp_SQL_Prim.fetchAll

  val toy = SMLSharp_SQL_Prim.toy
  val commandToString = SMLSharp_SQL_Prim.commandToString

  structure Op = SMLSharp_SQL_Prim.Op

end

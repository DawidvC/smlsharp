_require "./SQLPrim.smi"
_require "./SQLUtils.smi"
_require "./Backend.smi"
_require "./SQLQuery.ppg.smi"
_require "./builtintypes/timestamp/TimeStamp.smi"
_require "./builtintypes/decimal/Decimal.smi"
_require "./builtintypes/float/Float.smi"
_require "../../basis/main/General.smi"
_require "../../basis/main/IEEEReal.smi"
_require "../../basis/main/IntInf.smi"


structure SQL =
struct
  type backend = SMLSharp_SQL_Prim.backend
  type 'a server = 'a SMLSharp_SQL_Prim.server
  type ('a,'b) value = ('a,'b) SMLSharp_SQL_Prim.value
  type 'a conn = 'a SMLSharp_SQL_Prim.conn
  type 'a db = 'a SMLSharp_SQL_Prim.db
  type ('a,'b) db' = ('a,'b) SMLSharp_SQL_Prim.db'
  type ('a,'b) table = ('a,'b) SMLSharp_SQL_Prim.table
  type ('a,'b) row = ('a,'b) SMLSharp_SQL_Prim.row
  type 'a query = 'a SMLSharp_SQL_Prim.query
  type command = SMLSharp_SQL_Prim.command
  type 'a rel = 'a SMLSharp_SQL_Prim.rel
  type 'w bool_value = 'w SMLSharp_SQL_Prim.bool_value

  datatype schema = datatype SMLSharp_SQL_Prim.schema

  type ('a,'w) toy = ('a,'w) SMLSharp_SQL_Prim.toy
  type ('a,'b) selector = ('a,'b) SMLSharp_SQL_Prim.selector
  type ('a,'w) raw_row = ('a,'w) SMLSharp_SQL_Prim.raw_row
 
  datatype res_impl = datatype SMLSharp_SQL_Prim.res_impl

  type qexp = SMLSharp_SQL_Prim.qexp
  
  type decimal = SMLSharp_SQL_Prim.decimal
  type timestamp = SMLSharp_SQL_Prim.timestamp
  type float = SMLSharp_SQL_Prim.float

  type ('row,'view,'w) table1 = ('row,'view,'w) SMLSharp_SQL_Prim.table1 
  type ('row,'view,'w) table2 = ('row,'view,'w) SMLSharp_SQL_Prim.table2 
  type ('row,'view,'w) table3 = ('row,'view,'w) SMLSharp_SQL_Prim.table3 
  type ('row,'view,'w) table4 = ('row,'view,'w) SMLSharp_SQL_Prim.table4 
  type ('row,'w) table5 = ('row,'w) SMLSharp_SQL_Prim.table5 
 
  type schema_column = SMLSharp_SQL_Backend.schema_column


  exception Format = SMLSharp_SQL_Prim.Format
  exception Exec = SMLSharp_SQL_Prim.Exec
  exception Connect = SMLSharp_SQL_Prim.Connect
  exception Link = SMLSharp_SQL_Prim.Link
  exception InvalidCommand = SMLSharp_SQL_Prim.InvalidCommand
  exception NotOne = SMLSharp_SQL_Utils.NotOne


  val postgresql : string -> backend
  val mysql : string -> backend
  val odbc : string -> backend

  val connect : 'a server -> 'a conn
  val fetch : 'a rel -> ('a * 'a rel) option
  val closeConn : 'a conn -> unit
  val closeRel : 'a rel -> unit

  val exists : ('a db -> 'b query) -> ('a,'w) db'
               -> (bool option,'w) value

  val Some : ('a, 'b) value -> ('a option, 'b) value
  val Null : ('a option, 'b) value

  val queryString : ('a db -> 'b query) -> string
  val commandString : ('a db -> command) -> string

  val + =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.add
      | intInf => SMLSharp_SQL_Prim.add
      | word => SMLSharp_SQL_Prim.add
      | real => SMLSharp_SQL_Prim.add
      | real32 => SMLSharp_SQL_Prim.add
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.add
        | intInf => SMLSharp_SQL_Prim.add
        | word => SMLSharp_SQL_Prim.add
        | real => SMLSharp_SQL_Prim.add
        | real32 => SMLSharp_SQL_Prim.add

  val - =
      case 'a in ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.sub
      | intInf => SMLSharp_SQL_Prim.sub
      | word => SMLSharp_SQL_Prim.sub
      | real => SMLSharp_SQL_Prim.sub
      | real32 => SMLSharp_SQL_Prim.sub
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.sub
        | intInf => SMLSharp_SQL_Prim.sub
        | word => SMLSharp_SQL_Prim.sub
        | real => SMLSharp_SQL_Prim.sub
        | real32 => SMLSharp_SQL_Prim.sub

  val * =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.mul
      | intInf => SMLSharp_SQL_Prim.mul
      | word => SMLSharp_SQL_Prim.mul
      | real => SMLSharp_SQL_Prim.mul
      | real32 => SMLSharp_SQL_Prim.mul
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.mul
        | intInf => SMLSharp_SQL_Prim.mul
        | word => SMLSharp_SQL_Prim.mul
        | real => SMLSharp_SQL_Prim.mul
        | real32 => SMLSharp_SQL_Prim.mul

  val / =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.div
      | intInf => SMLSharp_SQL_Prim.div
      | word => SMLSharp_SQL_Prim.div
      | real => SMLSharp_SQL_Prim.div
      | real32 => SMLSharp_SQL_Prim.div
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.div
        | intInf => SMLSharp_SQL_Prim.div
        | word => SMLSharp_SQL_Prim.div
        | real => SMLSharp_SQL_Prim.div
        | real32 => SMLSharp_SQL_Prim.div

  val div =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.div
      | intInf => SMLSharp_SQL_Prim.div
      | word => SMLSharp_SQL_Prim.div
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.div
        | intInf => SMLSharp_SQL_Prim.div
        | word => SMLSharp_SQL_Prim.div

  val mod =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.mod
      | intInf => SMLSharp_SQL_Prim.mod
      | word => SMLSharp_SQL_Prim.mod
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.mod
        | intInf => SMLSharp_SQL_Prim.mod
        | word => SMLSharp_SQL_Prim.mod

  val neg =
      case 'a in
        ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.neg
      | intInf => SMLSharp_SQL_Prim.neg
      | word => SMLSharp_SQL_Prim.neg
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.neg
        | intInf => SMLSharp_SQL_Prim.neg
        | word => SMLSharp_SQL_Prim.neg

  val abs =
      case 'a in
        ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.abs
      | intInf => SMLSharp_SQL_Prim.abs
      | word => SMLSharp_SQL_Prim.abs
      | 'c option =>
        case 'c in
          ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.abs
        | intInf => SMLSharp_SQL_Prim.abs
        | word => SMLSharp_SQL_Prim.abs

  val < =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.lt
      | intInf => SMLSharp_SQL_Prim.lt
      | word => SMLSharp_SQL_Prim.lt
      | char => SMLSharp_SQL_Prim.lt
      | string => SMLSharp_SQL_Prim.lt
      | real => SMLSharp_SQL_Prim.lt
      | real32 => SMLSharp_SQL_Prim.lt
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.lt
        | intInf => SMLSharp_SQL_Prim.lt
        | word => SMLSharp_SQL_Prim.lt
        | char => SMLSharp_SQL_Prim.lt
        | bool => SMLSharp_SQL_Prim.lt
        | string => SMLSharp_SQL_Prim.lt
        | real => SMLSharp_SQL_Prim.lt
        | real32 => SMLSharp_SQL_Prim.lt

  val <= =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.le
      | intInf => SMLSharp_SQL_Prim.le
      | word => SMLSharp_SQL_Prim.le
      | char => SMLSharp_SQL_Prim.le
      | string => SMLSharp_SQL_Prim.le
      | real => SMLSharp_SQL_Prim.le
      | real32 => SMLSharp_SQL_Prim.le
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.le
        | intInf => SMLSharp_SQL_Prim.le
        | word => SMLSharp_SQL_Prim.le
        | char => SMLSharp_SQL_Prim.le
        | bool => SMLSharp_SQL_Prim.le
        | string => SMLSharp_SQL_Prim.le
        | real => SMLSharp_SQL_Prim.le
        | real32 => SMLSharp_SQL_Prim.le

  val > =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.gt
      | intInf => SMLSharp_SQL_Prim.gt
      | word => SMLSharp_SQL_Prim.gt
      | char => SMLSharp_SQL_Prim.gt
      | string => SMLSharp_SQL_Prim.gt
      | real => SMLSharp_SQL_Prim.gt
      | real32 => SMLSharp_SQL_Prim.gt
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.gt
        | intInf => SMLSharp_SQL_Prim.gt
        | word => SMLSharp_SQL_Prim.gt
        | char => SMLSharp_SQL_Prim.gt
        | bool => SMLSharp_SQL_Prim.gt
        | string => SMLSharp_SQL_Prim.gt
        | real => SMLSharp_SQL_Prim.gt
        | real32 => SMLSharp_SQL_Prim.gt

  val >= =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.ge
      | intInf => SMLSharp_SQL_Prim.ge
      | word => SMLSharp_SQL_Prim.ge
      | char => SMLSharp_SQL_Prim.ge
      | string => SMLSharp_SQL_Prim.ge
      | real => SMLSharp_SQL_Prim.ge
      | real32 => SMLSharp_SQL_Prim.ge
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.ge
        | intInf => SMLSharp_SQL_Prim.ge
        | word => SMLSharp_SQL_Prim.ge
        | char => SMLSharp_SQL_Prim.ge
        | bool => SMLSharp_SQL_Prim.ge
        | string => SMLSharp_SQL_Prim.ge
        | real => SMLSharp_SQL_Prim.ge
        | real32 => SMLSharp_SQL_Prim.ge

  val == =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.eq
      | intInf => SMLSharp_SQL_Prim.eq
      | word => SMLSharp_SQL_Prim.eq
      | char => SMLSharp_SQL_Prim.eq
      | string => SMLSharp_SQL_Prim.eq
      | real => SMLSharp_SQL_Prim.eq
      | real32 => SMLSharp_SQL_Prim.eq
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.eq
        | intInf => SMLSharp_SQL_Prim.eq
        | word => SMLSharp_SQL_Prim.eq
        | char => SMLSharp_SQL_Prim.eq
        | bool => SMLSharp_SQL_Prim.eq
        | string => SMLSharp_SQL_Prim.eq
        | real => SMLSharp_SQL_Prim.eq
        | real32 => SMLSharp_SQL_Prim.eq

  val <> =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.neq
      | intInf => SMLSharp_SQL_Prim.neq
      | word => SMLSharp_SQL_Prim.neq
      | char => SMLSharp_SQL_Prim.neq
      | string => SMLSharp_SQL_Prim.neq
      | real => SMLSharp_SQL_Prim.neq
      | real32 => SMLSharp_SQL_Prim.neq
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.neq
        | intInf => SMLSharp_SQL_Prim.neq
        | word => SMLSharp_SQL_Prim.neq
        | char => SMLSharp_SQL_Prim.neq
        | bool => SMLSharp_SQL_Prim.neq
        | string => SMLSharp_SQL_Prim.neq
        | real => SMLSharp_SQL_Prim.neq
        | real32 => SMLSharp_SQL_Prim.neq

  val ^ : (string, 'a) value * (string, 'a) value -> (string, 'a) value

  val andAlso
      : (bool option, 'a) value * (bool option, 'a) value
        -> (bool option, 'a) value
  val orElse
      : (bool option, 'a) value * (bool option, 'a) value
        -> (bool option, 'a) value
  val not
      : (bool option, 'a) value -> (bool option, 'a) value

  val isNull
      : ('a option, 'b) value -> (bool option, 'b) value
  val isNotNull
      : ('a option, 'b) value -> (bool option, 'b) value

  val like =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        string => SMLSharp_SQL_Prim.like_string
      | string option => SMLSharp_SQL_Prim.like_stringOption

  val toSQL =
      case 'a in
        'a -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.toSQL_int
      | intInf => SMLSharp_SQL_Prim.toSQL_intInf
      | word => SMLSharp_SQL_Prim.toSQL_word
      | char => SMLSharp_SQL_Prim.toSQL_char
      | string => SMLSharp_SQL_Prim.toSQL_string
      | real => SMLSharp_SQL_Prim.toSQL_real
      | real32 => SMLSharp_SQL_Prim.toSQL_real32
      | timestamp => SMLSharp_SQL_Prim.toSQL_timestamp
      | 'c option =>
        case 'c in
          'c option -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.toSQL_intOption
        | intInf => SMLSharp_SQL_Prim.toSQL_intInfOption
        | word => SMLSharp_SQL_Prim.toSQL_wordOption
        | char => SMLSharp_SQL_Prim.toSQL_charOption
        | string => SMLSharp_SQL_Prim.toSQL_stringOption
        | real => SMLSharp_SQL_Prim.toSQL_realOption
        | real32 => SMLSharp_SQL_Prim.toSQL_real32Option
        | timestamp => SMLSharp_SQL_Prim.toSQL_timestampOption

  val fromSQL =
    case 'a in int * res_impl * ('a,'w) toy -> 'a of
      int => SMLSharp_SQL_Prim.fromSQL_int
    | intInf => SMLSharp_SQL_Prim.fromSQL_intInf
    | word => SMLSharp_SQL_Prim.fromSQL_word
    | char => SMLSharp_SQL_Prim.fromSQL_char
    | string => SMLSharp_SQL_Prim.fromSQL_string
    | real => SMLSharp_SQL_Prim.fromSQL_real
    | real32 => SMLSharp_SQL_Prim.fromSQL_real32
    | timestamp => SMLSharp_SQL_Prim.fromSQL_timestamp
    | decimal => SMLSharp_SQL_Prim.fromSQL_decimal
    | float => SMLSharp_SQL_Prim.fromSQL_float
    | 'c option =>
      case 'c in int * res_impl * ('c option,'w) toy -> 'c option of
        int => SMLSharp_SQL_Prim.fromSQL_intOption
      | intInf => SMLSharp_SQL_Prim.fromSQL_intInfOption
      | word => SMLSharp_SQL_Prim.fromSQL_wordOption
      | char => SMLSharp_SQL_Prim.fromSQL_charOption
      | string => SMLSharp_SQL_Prim.fromSQL_stringOption
      | real => SMLSharp_SQL_Prim.fromSQL_realOption
      | real32 => SMLSharp_SQL_Prim.fromSQL_real32Option
      | timestamp => SMLSharp_SQL_Prim.fromSQL_timestampOption
      | decimal => SMLSharp_SQL_Prim.fromSQL_decimalOption
      | float => SMLSharp_SQL_Prim.fromSQL_floatOption


  val fetchAll : 'a rel -> 'a list
  val fetchOne : 'a rel -> 'a

  val exec : ('a db -> command) -> 'a conn -> unit

  structure TimeStamp = 
  struct
    val now : unit -> timestamp
    val toString : timestamp -> string
    val fromString : string -> timestamp
    val defaultTimestamp : timestamp
    val compare : timestamp * timestamp -> General.order
  end
  structure Decimal = 
  struct
    val toString : decimal -> string
    val fromString : string -> decimal
    val toReal : decimal -> real
    val toDecimal : decimal -> IEEEReal.decimal_approx
  end
  structure Float = 
  struct
    val toString : float -> string
    val fromString : string -> float
    val toReal : float -> real
    val toDecimal : float -> IEEEReal.decimal_approx
  end
  structure Prims =
  struct
    datatype schema = datatype schema
    val sqlserver_string : string * 'a schema -> 'a server
    val sqlserver_backend : backend * 'a schema -> 'a server
    val sqlserver =
        case 'a in 'a * 'b schema -> 'b server of
          string => sqlserver_string
        | backend => sqlserver_backend
  
    val connect : 'a server -> 'a conn
    val eval : ('a db -> 'b query) -> 'a conn -> 'b rel
    val exec : ('a db -> command) -> 'a conn -> unit
    val fetch : 'a rel -> ('a * 'a rel) option
    val closeConn : 'a conn -> unit
    val closeRel : 'a rel -> unit
    val queryString : ('a db -> 'b query) -> string
    val commandString : ('a db -> command) -> string
  
    val columnInfo_int
        : string -> (unit -> int) * schema_column 
    val columnInfo_intInf
        : string -> (unit -> intInf) * schema_column
    val columnInfo_word
        : string -> (unit -> word) * schema_column
    val columnInfo_char
        : string -> (unit -> char) * schema_column
    val columnInfo_string
        : string -> (unit -> string) * schema_column
    val columnInfo_real
        : string -> (unit -> real) * schema_column
    val columnInfo_real32
        : string -> (unit -> real32) * schema_column
    val columnInfo_timestamp
        : string -> (unit -> timestamp) * schema_column
    val columnInfo_decimal
        : string -> (unit -> decimal) * schema_column
    val columnInfo_float
        : string -> (unit -> float) * schema_column
    val columnInfo_int_option
        : string -> (unit -> int option) * schema_column
    val columnInfo_intInf_option
        : string -> (unit -> intInf option) * schema_column
    val columnInfo_word_option
        : string -> (unit -> word option) * schema_column
    val columnInfo_char_option
        : string -> (unit -> char option) * schema_column
    val columnInfo_string_option
        : string -> (unit -> string option) * schema_column
    val columnInfo_real_option
        : string -> (unit -> real option) * schema_column
    val columnInfo_real32_option
        : string -> (unit -> real32 option) * schema_column
    val columnInfo_timestamp_option
        : string -> (unit -> timestamp option) * schema_column
    val columnInfo_decimal_option
        : string -> (unit -> decimal option) * schema_column
    val columnInfo_float_option
        : string -> (unit -> float option) * schema_column
  
    val columnInfo =
        case 'a in string -> (unit -> 'a) * schema_column of
          int => columnInfo_int
        | intInf => columnInfo_intInf
        | word => columnInfo_word
        | char => columnInfo_char
        | string => columnInfo_string
        | real => columnInfo_real
        | real32 => columnInfo_real32
        | timestamp => columnInfo_timestamp
        | decimal => columnInfo_decimal
        | float => columnInfo_float
        | 'b option =>
          case 'b in string -> (unit -> 'b option) * schema_column of
            int => columnInfo_int_option
          | intInf => columnInfo_intInf_option
          | word => columnInfo_word_option
          | char => columnInfo_char_option
          | string => columnInfo_string_option
          | real => columnInfo_real_option
          | real32 => columnInfo_real32_option
          | timestamp => columnInfo_timestamp_option
          | decimal => columnInfo_decimal_option
          | float => columnInfo_float_option
  
    val Some : ('a,'w) value -> ('a option,'w) value
    val Null : ('a option,'w) value
  
    val add : ('a,'w) value * ('a,'w) value -> ('a,'w) value
    val sub : ('a,'w) value * ('a,'w) value -> ('a,'w) value
    val mul : ('a,'w) value * ('a,'w) value -> ('a,'w) value
    val div : ('a,'w) value * ('a,'w) value -> ('a,'w) value
    val mod : ('a,'w) value * ('a,'w) value -> ('a,'w) value
    val neg : ('a,'w) value -> ('a,'w) value
    val abs : ('a,'w) value -> ('a,'w) value
    val lt : ('a,'w) value * ('a,'w) value -> 'w bool_value
    val le : ('a,'w) value * ('a,'w) value -> 'w bool_value
    val gt : ('a,'w) value * ('a,'w) value -> 'w bool_value
    val ge : ('a,'w) value * ('a,'w) value -> 'w bool_value
    val eq : ('a,'w) value * ('a,'w) value -> 'w bool_value
    val neq : ('a,'w) value * ('a,'w) value -> 'w bool_value
    val strcat : (string, 'w) value * (string, 'w) value -> (string, 'w) value
    val andAlso : 'w bool_value * 'w bool_value -> 'w bool_value
    val orElse : 'w bool_value * 'w bool_value -> 'w bool_value
    val not : 'w bool_value -> 'w bool_value
    val isNull : ('a,'w) value -> 'w bool_value
    val isNotNull : ('a,'w) value -> 'w bool_value
    val like_string : (string,'w) value * (string,'w) value -> 'w bool_value
    val like_stringOption
        : (string option,'w) value * (string option,'w) value -> 'w bool_value
    val exists : ('a db -> 'b query) -> ('a,'w) db' -> 'w bool_value
  
    val toSQL_int : int -> (int,'w) value
    val toSQL_intInf : intInf -> (intInf,'w) value
    val toSQL_word : word -> (word,'w) value
    val toSQL_char : char -> (char,'w) value
    val toSQL_string : string -> (string,'w) value
    val toSQL_real : real -> (real,'w) value
    val toSQL_timestamp : timestamp -> (timestamp,'w) value
    val toSQL_decimal : decimal -> (decimal,'w) value
    val toSQL_float : float -> (float,'w) value
    val toSQL_intOption : int option -> (int option, 'w) value
    val toSQL_intInfOption : intInf option -> (intInf option,'w) value
    val toSQL_wordOption : word option -> (word option,'w) value
    val toSQL_charOption : char option -> (char option,'w) value
    val toSQL_stringOption : string option -> (string option,'w) value
    val toSQL_realOption : real option -> (real option,'w) value
    val toSQL_timestampOption : timestamp option -> (timestamp option,'w) value
    val toSQL_decimalOption : decimal option -> (decimal option,'w) value
    val toSQL_floatOption : float option -> (float option,'w) value
  
    val fromSQL_int
        : int * res_impl * (int,'w) toy -> int
    val fromSQL_intInf
        : int * res_impl * (intInf,'w) toy -> intInf
    val fromSQL_word
        : int * res_impl * (word,'w) toy -> word
    val fromSQL_char
        : int * res_impl * (char,'w) toy -> char
    val fromSQL_string
        : int * res_impl * (string,'w) toy -> string
    val fromSQL_real
        : int * res_impl * (real,'w) toy -> real
    val fromSQL_timestamp
        : int * res_impl * (timestamp,'w) toy -> timestamp
    val fromSQL_decimal
        : int * res_impl * (decimal,'w) toy -> decimal
    val fromSQL_float
        : int * res_impl * (float,'w) toy -> float
    val fromSQL_intOption
        : int * res_impl * (int option,'w) toy -> int option
    val fromSQL_intInfOption
        : int * res_impl * (intInf option,'w) toy
          -> intInf option
    val fromSQL_wordOption
        : int * res_impl * (word option,'w) toy -> word option
    val fromSQL_charOption
        : int * res_impl * (char option,'w) toy -> char option
    val fromSQL_stringOption
        : int * res_impl * (string option,'w) toy
          -> string option
    val fromSQL_realOption
        : int * res_impl * (real option,'w) toy -> real option
    val fromSQL_timestampOption
        : int * res_impl * (timestamp option,'w) toy
          -> timestamp option
    val fromSQL_decimalOption
        : int * res_impl * (decimal option,'w) toy
          -> decimal option
    val fromSQL_floatOption
        : int * res_impl * (float option,'w) toy -> float option
  
    val fromSQL =
        case 'a in int * res_impl * ('a,'w) toy -> 'a of
          int => fromSQL_int
        | intInf => fromSQL_intInf
        | word => fromSQL_word
        | char => fromSQL_char
        | string => fromSQL_string
        | real => fromSQL_real
        | real32 => fromSQL_real
        | timestamp => fromSQL_timestamp
        | decimal => fromSQL_decimal
        | float => fromSQL_float
        | 'c option =>
          case 'c in int * res_impl * ('c option,'w) toy -> 'c option of
            int => fromSQL_intOption
          | intInf => fromSQL_intInfOption
          | word => fromSQL_wordOption
          | char => fromSQL_charOption
          | string => fromSQL_stringOption
          | real => fromSQL_realOption
          | timestamp => fromSQL_timestampOption
          | decimal => fromSQL_decimalOption
          | float => fromSQL_floatOption
  
(*
    type ('row,'view,'w) table1 (= boxed)
    type ('row,'view,'w) table2 (= boxed)
    type ('row,'view,'w) table3 (= boxed)
    type ('row,'view,'w) table4 (= boxed)
    type ('row,'w) table5 (= boxed)
*)
  
    val openDB : ('w -> unit) * 'a db -> ('a,'w) db'
    val getValue : ('a,'w) row * ('a,'b) selector -> ('b,'w) value
    val readValue : ('a,'w) value -> qexp * ('a,'w) toy
    val getTable : ('a,'w) db' * ('a,'b) selector -> ('b,'w) table
    val getDefault : ('a,'w) table * ('a,'b) selector -> ('b,'w) value
    val useTable : ('a,'w) table -> ('a, ('a,'w) row, 'w) table1
    val aliasTable : ('a,'b,'w) table1 * string -> ('a,('a,'w) row,'w) table1
    val crossJoin : ('a,'b,'w) table1 * ('c,'d,'w) table1
                    -> ('a * 'c, 'b * 'd, 'w) table1
    val innerJoin : ('a,'b,'w) table1 * ('c,'d,'w) table1 * 
                    ('b * 'd -> 'w bool_value)
                      -> ('a * 'c, 'b * 'd, 'w) table1
    val naturalJoin : ('a,'b,'w) table1 * ('c,'d,'w) table1 * ('a * 'c -> 'e)
                      -> ('e, 'b * 'd, 'w) table1
    val dummyJoin : ('a,'b,'w) table1 -> ('a * unit, 'b, 'w) table1
    val subquery : ('a db -> 'b query) * ('a,'w) db' * string
                   -> ('b,('b,'w) row,'w) table1
    val sourceTable : ('a,'b,'w) table1 -> ('a,'b,'w) table2
    val useDual : unit -> (unit, unit, 'a) table2
    val chooseRows : ('a,'b,'w) table2 * ('b -> 'w bool_value)
                     -> ('a,'b,'w) table3
    val chooseAll : ('a,'b,'w) table2 -> ('a,'b,'w) table3
    val mapTable : ('a,'b,'w) table3 * ('b -> ('c,'w) raw_row)
                   -> ('a * 'c, 'b * ('c,'w) row, 'w) table4
    val sortTableAsc : ('a,'b,'w) table4 * ('b -> ('c,'w) value)
                       -> ('a,'b,'w) table4
    val sortTableDesc : ('a,'b,'w) table4 * ('b -> ('c,'w) value)
                        -> ('a,'b,'w) table4
    val selectDistinct : ('a * 'b, 'c, 'w) table4 -> ('b,'w) table5
    val selectAll : ('a * 'b, 'c, 'w) table4 -> ('b,'w) table5
    val selectDefault : ('a * 'b, 'c, 'w) table4 -> ('b,'w) table5
    val readRow : ('a,'w) table5 -> ('a,'w) toy
    val makeQuery : ('a,'w) table5 * (res_impl -> 'a)
                    -> ('d,'w) db' -> 'a query
    val deleteRows : ('a,'b,'w) table3
                     -> ('d,'w) db' -> command
    val updateRows : ('a * 'b, 'c, 'w) table3
                     * ('c * ('a,'w) toy -> ('a,'w) raw_row)
                     -> ('d,'w) db' -> command
    val insertRows : ('a,'w) table * ('a,'w) raw_row list
                     -> ('d,'w) db' -> command
    val beginTransaction : ('d,'w) db' -> command
    val commitTransaction : ('d,'w) db' -> command
    val rollbackTransaction : ('d,'w) db' -> command
  end
end

_require "../../basis.smi"
_require "../../smlformat-lib.smi"
_require "./SQLErrors.smi"
_require local "./SQLBackendTy.smi"
_require "./Backend.smi"
_require "./builtintypes/timestamp/TimeStamp.smi"
_require "./builtintypes/decimal/Decimal.smi"
_require "./builtintypes/float/Float.smi"
_require "./SQLQuery.ppg.smi"

structure SMLSharp_SQL_Prim =
struct

  exception Format = SMLSharp_SQL_Errors.Format
  exception Exec = SMLSharp_SQL_Errors.Exec
  exception Connect = SMLSharp_SQL_Errors.Connect
  exception Link = SMLSharp_SQL_Errors.Link

  datatype backend = datatype SMLSharp_SQL_Backend.backend
  datatype 'a schema = SCHEMA of SMLSharp_SQL_Backend.schema * 'a
  type 'a server (= boxed)
  type 'a conn (= boxed)
  type 'a db (= boxed)
  type 'a rel (= boxed)
  datatype res_impl = datatype SMLSharp_SQL_Backend.res_impl
  type timestamp = SMLSharp_SQL_TimeStamp.timestamp
  type decimal = SMLSharp_SQL_Decimal.decimal
  type float = SMLSharp_SQL_Float.float

  datatype qconst =
      CONST_INT of int
    | CONST_WORD of word
    | CONST_REAL of real
    | CONST_STRING of string
    | CONST_CHAR of char

  type 'w dbi (= contag)
  type ('a,'w) db' (= boxed)
  type ('a,'w) table (= boxed)
  type ('a,'w) row (= boxed)
  type qexp (= boxed)
  type ('a,'w) toy = 'w dbi -> 'a
  type ('a,'b) selector = ('a -> 'b) * string
  type ('a,'w) raw_row = (string * qexp) list * ('a,'w) toy
  type ('a,'w) value' (= boxed)
  datatype ('a,'w) value = VALUE of ('a,'w) value' | CONST of qconst * 'a
  type 'w bool_value = (bool option, 'w) value
  type 'a query (= boxed)
  type command (= boxed)

  val sqlserver_string : string * 'a schema -> 'a server
  val sqlserver_backend : backend * 'a schema -> 'a server
  val sqlserver =
      case 'a in 'a * 'b schema -> 'b server of
        string => sqlserver_string
      | backend => sqlserver_backend

  val connect : 'a server -> 'a conn
  val eval : ('a db -> 'b query) -> 'a conn -> 'b rel
  val exec : ('a db -> command) -> 'a conn -> unit
  val fetch : 'a rel -> ('a * 'a rel) option
  val closeConn : 'a conn -> unit
  val closeRel : 'a rel -> unit
  val queryString : ('a db -> 'b query) -> string
  val commandString : ('a db -> command) -> string

  val columnInfo_int
      : string -> int * SMLSharp_SQL_Backend.schema_column 
  val columnInfo_intInf
      : string -> IntInf.int * SMLSharp_SQL_Backend.schema_column
  val columnInfo_word
      : string -> word * SMLSharp_SQL_Backend.schema_column
  val columnInfo_char
      : string -> char * SMLSharp_SQL_Backend.schema_column
  val columnInfo_string
      : string -> string * SMLSharp_SQL_Backend.schema_column
  val columnInfo_real
      : string -> real * SMLSharp_SQL_Backend.schema_column
  val columnInfo_real32
      : string -> Real32.real * SMLSharp_SQL_Backend.schema_column
  val columnInfo_timestamp
      : string -> timestamp * SMLSharp_SQL_Backend.schema_column
  val columnInfo_decimal
      : string -> decimal * SMLSharp_SQL_Backend.schema_column
  val columnInfo_float
      : string -> float * SMLSharp_SQL_Backend.schema_column
  val columnInfo_int_option
      : string -> int option * SMLSharp_SQL_Backend.schema_column
  val columnInfo_intInf_option
      : string -> IntInf.int option * SMLSharp_SQL_Backend.schema_column
  val columnInfo_word_option
      : string -> word option * SMLSharp_SQL_Backend.schema_column
  val columnInfo_char_option
      : string -> char option * SMLSharp_SQL_Backend.schema_column
  val columnInfo_string_option
      : string -> string option * SMLSharp_SQL_Backend.schema_column
  val columnInfo_real_option
      : string -> real option * SMLSharp_SQL_Backend.schema_column
  val columnInfo_real32_option
      : string -> Real32.real option * SMLSharp_SQL_Backend.schema_column
  val columnInfo_timestamp_option
      : string -> timestamp option * SMLSharp_SQL_Backend.schema_column
  val columnInfo_decimal_option
      : string -> decimal option * SMLSharp_SQL_Backend.schema_column
  val columnInfo_float_option
      : string -> float option * SMLSharp_SQL_Backend.schema_column

  val columnInfo =
      case 'a in string -> 'a * SMLSharp_SQL_Backend.schema_column of
        int => columnInfo_int
      | IntInf.int => columnInfo_intInf
      | word => columnInfo_word
      | char => columnInfo_char
      | string => columnInfo_string
      | real => columnInfo_real
      | Real32.real => columnInfo_real32
      | timestamp => columnInfo_timestamp
      | decimal => columnInfo_decimal
      | float => columnInfo_float
      | 'b option =>
        case 'b in string -> 'b option * SMLSharp_SQL_Backend.schema_column of
          int => columnInfo_int_option
        | IntInf.int => columnInfo_intInf_option
        | word => columnInfo_word_option
        | char => columnInfo_char_option
        | string => columnInfo_string_option
        | real => columnInfo_real_option
        | Real32.real => columnInfo_real32_option
        | timestamp => columnInfo_timestamp_option
        | decimal => columnInfo_decimal_option
        | float => columnInfo_float_option

  val Some : ('a,'w) value -> ('a option,'w) value
  val Null : ('a option,'w) value

  val add : ('a,'w) value * ('a,'w) value -> ('a,'w) value
  val sub : ('a,'w) value * ('a,'w) value -> ('a,'w) value
  val mul : ('a,'w) value * ('a,'w) value -> ('a,'w) value
  val div : ('a,'w) value * ('a,'w) value -> ('a,'w) value
  val mod : ('a,'w) value * ('a,'w) value -> ('a,'w) value
  val neg : ('a,'w) value -> ('a,'w) value
  val abs : ('a,'w) value -> ('a,'w) value
  val lt : ('a,'w) value * ('a,'w) value -> 'w bool_value
  val le : ('a,'w) value * ('a,'w) value -> 'w bool_value
  val gt : ('a,'w) value * ('a,'w) value -> 'w bool_value
  val ge : ('a,'w) value * ('a,'w) value -> 'w bool_value
  val eq : ('a,'w) value * ('a,'w) value -> 'w bool_value
  val neq : ('a,'w) value * ('a,'w) value -> 'w bool_value
  val strcat : (string, 'w) value * (string, 'w) value -> (string, 'w) value
  val andAlso : 'w bool_value * 'w bool_value -> 'w bool_value
  val orElse : 'w bool_value * 'w bool_value -> 'w bool_value
  val not : 'w bool_value -> 'w bool_value
  val isNull : ('a,'w) value -> 'w bool_value
  val isNotNull : ('a,'w) value -> 'w bool_value
  val like_string : (string,'w) value * (string,'w) value -> 'w bool_value
  val like_stringOption
      : (string option,'w) value * (string option,'w) value -> 'w bool_value
  val exists : ('a db -> 'b query) -> ('a,'w) db' -> 'w bool_value

  val toSQL_int : int -> (int,'w) value
  val toSQL_intInf : IntInf.int -> (IntInf.int,'w) value
  val toSQL_word : word -> (word,'w) value
  val toSQL_char : char -> (char,'w) value
  val toSQL_string : string -> (string,'w) value
  val toSQL_real : real -> (real,'w) value
  val toSQL_timestamp : timestamp -> (timestamp,'w) value
  val toSQL_decimal : decimal -> (decimal,'w) value
  val toSQL_float : float -> (float,'w) value
  val toSQL_intOption : int option -> (int option, 'w) value
  val toSQL_intInfOption : IntInf.int option -> (IntInf.int option,'w) value
  val toSQL_wordOption : word option -> (word option,'w) value
  val toSQL_charOption : char option -> (char option,'w) value
  val toSQL_stringOption : string option -> (string option,'w) value
  val toSQL_realOption : real option -> (real option,'w) value
  val toSQL_timestampOption : timestamp option -> (timestamp option,'w) value
  val toSQL_decimalOption : decimal option -> (decimal option,'w) value
  val toSQL_floatOption : float option -> (float option,'w) value

  val fromSQL_int
      : int * SMLSharp_SQL_Backend.res_impl * (int,'w) toy -> int
  val fromSQL_intInf
      : int * SMLSharp_SQL_Backend.res_impl * (IntInf.int,'w) toy -> IntInf.int
  val fromSQL_word
      : int * SMLSharp_SQL_Backend.res_impl * (word,'w) toy -> word
  val fromSQL_char
      : int * SMLSharp_SQL_Backend.res_impl * (char,'w) toy -> char
  val fromSQL_string
      : int * SMLSharp_SQL_Backend.res_impl * (string,'w) toy -> string
  val fromSQL_real
      : int * SMLSharp_SQL_Backend.res_impl * (real,'w) toy -> real
  val fromSQL_timestamp
      : int * SMLSharp_SQL_Backend.res_impl * (timestamp,'w) toy -> timestamp
  val fromSQL_decimal
      : int * SMLSharp_SQL_Backend.res_impl * (decimal,'w) toy -> decimal
  val fromSQL_float
      : int * SMLSharp_SQL_Backend.res_impl * (float,'w) toy -> float
  val fromSQL_intOption
      : int * SMLSharp_SQL_Backend.res_impl * (int option,'w) toy -> int option
  val fromSQL_intInfOption
      : int * SMLSharp_SQL_Backend.res_impl * (IntInf.int option,'w) toy
        -> IntInf.int option
  val fromSQL_wordOption
      : int * SMLSharp_SQL_Backend.res_impl * (word option,'w) toy -> word option
  val fromSQL_charOption
      : int * SMLSharp_SQL_Backend.res_impl * (char option,'w) toy -> char option
  val fromSQL_stringOption
      : int * SMLSharp_SQL_Backend.res_impl * (string option,'w) toy
        -> string option
  val fromSQL_realOption
      : int * SMLSharp_SQL_Backend.res_impl * (real option,'w) toy -> real option
  val fromSQL_timestampOption
      : int * SMLSharp_SQL_Backend.res_impl * (timestamp option,'w) toy
        -> timestamp option
  val fromSQL_decimalOption
      : int * SMLSharp_SQL_Backend.res_impl * (decimal option,'w) toy
        -> decimal option
  val fromSQL_floatOption
      : int * SMLSharp_SQL_Backend.res_impl * (float option,'w) toy -> float option

  val fromSQL =
      case 'a in int * res_impl * ('a,'w) toy -> 'a of
        int => fromSQL_int
      | IntInf.int => fromSQL_intInf
      | word => fromSQL_word
      | char => fromSQL_char
      | string => fromSQL_string
      | real => fromSQL_real
      | timestamp => fromSQL_timestamp
      | decimal => fromSQL_decimal
      | float => fromSQL_float
      | 'c option =>
        case 'c in int * res_impl * ('c option,'w) toy -> 'c option of
          int => fromSQL_intOption
        | IntInf.int => fromSQL_intInfOption
        | word => fromSQL_wordOption
        | char => fromSQL_charOption
        | string => fromSQL_stringOption
        | real => fromSQL_realOption
        | timestamp => fromSQL_timestampOption
        | decimal => fromSQL_decimalOption
        | float => fromSQL_floatOption

  exception InvalidCommand

  type ('row,'view,'w) table1 (= boxed)
  type ('row,'view,'w) table2 (= boxed)
  type ('row,'view,'w) table3 (= boxed)
  type ('row,'view,'w) table4 (= boxed)
  type ('row,'w) table5 (= boxed)

  val openDB : ('w -> unit) * 'a db -> ('a,'w) db'
  val getValue : ('a,'w) row * ('a,'b) selector -> ('b,'w) value
  val readValue : ('a,'w) value -> qexp * ('a,'w) toy
  val getTable : ('a,'w) db' * ('a,'b) selector -> ('b,'w) table
  val getDefault : ('a,'w) table * ('a,'b) selector -> ('b,'w) value
  val useTable : ('a,'w) table -> ('a, ('a,'w) row, 'w) table1
  val aliasTable : ('a,'b,'w) table1 * string -> ('a,('a,'w) row,'w) table1
  val crossJoin : ('a,'b,'w) table1 * ('c,'d,'w) table1
                  -> ('a * 'c, 'b * 'd, 'w) table1
  val innerJoin : ('a,'b,'w) table1 * ('c,'d,'w) table1 * 
                  ('b * 'd -> 'w bool_value)
                    -> ('a * 'c, 'b * 'd, 'w) table1
  val naturalJoin : ('a,'b,'w) table1 * ('c,'d,'w) table1 * ('a * 'c -> 'e)
                    -> ('e, 'b * 'd, 'w) table1
  val dummyJoin : ('a,'b,'w) table1 -> ('a * unit, 'b, 'w) table1
  val subquery : ('a db -> 'b query) * ('a,'w) db' * string
                 -> ('b,('b,'w) row,'w) table1
  val sourceTable : ('a,'b,'w) table1 -> ('a,'b,'w) table2
  val useDual : unit -> (unit, unit, 'a) table2
  val chooseRows : ('a,'b,'w) table2 * ('b -> 'w bool_value)
                   -> ('a,'b,'w) table3
  val chooseAll : ('a,'b,'w) table2 -> ('a,'b,'w) table3
  val mapTable : ('a,'b,'w) table3 * ('b -> ('c,'w) raw_row)
                 -> ('a * 'c, 'b * ('c,'w) row, 'w) table4
  val sortTableAsc : ('a,'b,'w) table4 * ('b -> ('c,'w) value)
                     -> ('a,'b,'w) table4
  val sortTableDesc : ('a,'b,'w) table4 * ('b -> ('c,'w) value)
                      -> ('a,'b,'w) table4
  val selectDistinct : ('a * 'b, 'c, 'w) table4 -> ('b,'w) table5
  val selectAll : ('a * 'b, 'c, 'w) table4 -> ('b,'w) table5
  val selectDefault : ('a * 'b, 'c, 'w) table4 -> ('b,'w) table5
  val readRow : ('a,'w) table5 -> ('a,'w) toy
  val makeQuery : ('a,'w) table5 * (SMLSharp_SQL_Backend.res_impl -> 'a)
                  -> ('d,'w) db' -> 'a query
  val deleteRows : ('a,'b,'w) table3
                   -> ('d,'w) db' -> command
  val updateRows : ('a * 'b, 'c, 'w) table3
                   * ('c * ('a,'w) toy -> ('a,'w) raw_row)
                   -> ('d,'w) db' -> command
  val insertRows : ('a,'w) table * ('a,'w) raw_row list
                   -> ('d,'w) db' -> command
  val beginTransaction : ('d,'w) db' -> command
  val commitTransaction : ('d,'w) db' -> command
  val rollbackTransaction : ('d,'w) db' -> command

end

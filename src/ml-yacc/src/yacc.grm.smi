_require "../../basis.smi"
_require "../../ml-yacc/lib/base.sig"
_require "../../ml-yacc/lib/parser2.smi"
_require "utils.sig"
_require "sigs.sml"
_require "hdr.smi"
_require "yacc.grm.sig"

structure LrVals =
struct
  structure ParserData =
  struct
    type pos = int
    type svalue (= boxed)
    type arg = Header.inputSource
    type result = string * Header.declData * (Header.rule list)
    structure ParserArg = struct type pos = pos type svalue = svalue type arg = arg end
    structure LrParser = LrParserFun(ParserArg)
    structure Token = LrParser.Token
    structure LrTable = LrParser.LrTable
    structure Actions =
    struct
      val actions : int * pos *
                    (LrTable.state * (svalue * pos * pos)) list * arg ->
                    LrTable.nonterm * (svalue * pos * pos) *
                    (LrTable.state *(svalue * pos * pos)) list
      val void : svalue
      val extract : svalue -> result
    end
    structure EC =
    struct
      val is_keyword : LrTable.term -> bool
      val noShift : LrTable.term -> bool
      val preferred_change : (LrTable.term list * LrTable.term list) list
      val errtermvalue : LrTable.term -> svalue
      val showTerminal : LrTable.term -> string
      val terms: LrTable.term list
    end
    val table : LrTable.table
  end
  structure Tokens =
  struct
    type pos = ParserData.pos
    type svalue = ParserData.svalue
    type token = ParserData.Token.token
    val BOGUS_VALUE : pos * pos -> token
    val UNKNOWN : string * pos * pos -> token
    val VALUE : pos * pos -> token
    val VERBOSE : pos * pos -> token
    val TYVAR : string * pos * pos -> token
    val TERM : pos * pos -> token
    val START : pos * pos -> token
    val SUBST : pos * pos -> token
    val RPAREN : pos * pos -> token
    val RBRACE : pos * pos -> token
    val PROG : string * pos * pos -> token
    val PREFER : pos * pos -> token
    val PREC_TAG : pos * pos -> token
    val PREC : Header.prec * pos * pos -> token
    val PERCENT_TOKEN_SIG_INFO : pos * pos -> token
    val PERCENT_ARG : pos * pos -> token
    val PERCENT_POS : pos * pos -> token
    val PERCENT_PURE : pos * pos -> token
    val PERCENT_EOP : pos * pos -> token
    val OF : pos * pos -> token
    val NOSHIFT : pos * pos -> token
    val NONTERM : pos * pos -> token
    val NODEFAULT : pos * pos -> token
    val NAME : pos * pos -> token
    val LPAREN : pos * pos -> token
    val LBRACE : pos * pos -> token
    val KEYWORD : pos * pos -> token
    val INT : string * pos * pos -> token
    val PERCENT_BLOCKSIZE:  pos * pos -> token
    val PERCENT_DECOMPOSE:  pos * pos -> token
    val PERCENT_FOOTER : pos * pos -> token
    val PERCENT_HEADER : pos * pos -> token
    val IDDOT : string * pos * pos -> token
    val ID : (string * int) * pos * pos -> token
    val HEADER : string * pos * pos -> token
    val FOR : pos * pos -> token
    val EOF : pos * pos -> token
    val DELIMITER : pos * pos -> token
    val COMMA : pos * pos -> token
    val COLON : pos * pos -> token
    val CHANGE : pos * pos -> token
    val BAR : pos * pos -> token
    val BLOCK : pos * pos -> token
    val ASTERISK : pos * pos -> token
    val ARROW : pos * pos -> token
  end
end

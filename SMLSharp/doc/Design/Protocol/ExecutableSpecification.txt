// -*- idl-*-

/*
 * The specification of the serialized format of Executable in
 * ExecutionRequest message transmitted from the IML compiler to the IML
 * runtime.
 * This specification is described in the Microsoft IDL.
 * 
 * @author YAMATODANI Kiyoshi
 * @version $Id: ExecutableSpecification.txt,v 1.1 2008/03/13 02:14:09 kiyoshiy Exp $
 */

include "MessageSpecification.txt";

typedef
struct {
  UInt32Value instructionOffset;
  /*
   * the index of a fileNameOffset in the fileNameOffsets.
   * The address of the fileName can be obtained as
   *   &fileNamesBytes[fileNameOffsets[fileNameIndex]]
   */
  UInt32Value fileNameIndex;
  UInt32Value leftLine;
  UInt32Value leftCol;
  UInt32Value rightLine;
  UInt32Value rightCol;
} Location;

typedef
struct {
  UInt32Value locationsCount;
  [length_is(locationsCount)] Location locations[];
  UInt32Value fileNamesCount;
  // array of offsets in fileNamesBytes
  [length_is(fileNamesCount)] UInt32Value fileNameOffsets[];
  union
  {
    [length_is(fileNamesCount)] ByteArray fileNames[];
    ByteValue fileNamesBytes[];
  } 
} LocationTable;

typedef
struct {
  ByteValue magic[4]; /* {0x53, 0x4d, 0x4c, 0x23} = {'S', 'M', 'L', '#'} */
  UInt16Value minor; /* in the Network Byte Order. */
  UInt16Value major; /* in the Network Byte Order. */
  /* the byte order of following fields. This field itself is in the Network
   * Byte Order (= Big endian). */
  ByteOrder endian;
  UInt32Value codeLength; /* words */
  [length_is(codeLength)] UInt32Value code[];
  UInt32Value locationTableSize; /* words */
  [size_is(locationTableSize * sizeof UInt32Value)]
    LocationTable locationTable;
} Executable;


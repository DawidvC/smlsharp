(* -*- sml -*- *)

(**
 * primitive operators
 * @author YAMATODANI Kiyoshi
 * @version $Id: Primitives.ppg.in,v 1.9 2007/08/28 14:05:42 kiyoshiy Exp $
 *)
structure Primitives =
struct

  (***************************************************************************)

  structure BT = BasicTypes
  structure I = Instructions

  (***************************************************************************)

  type operand1 =
       {
         argIndex : BT.UInt32,
         destination : BT.UInt32
       }

  type operand2 =
       {
         argIndex1 : BT.UInt32,
         argIndex2 : BT.UInt32,
         destination : BT.UInt32
       }

  type operand3 =
       {
         argIndex1 : BT.UInt32,
         argIndex2 : BT.UInt32,
         argIndex3 : BT.UInt32,
         destination : BT.UInt32
       }

  type operandN =
       {
         argsCount : BT.UInt32,
         argIndexes : BT.UInt32 list,
         destination : BT.UInt32
       }

  (*% *)
  datatype instruction =
           Internal1 of operand1 -> I.instruction
         | Internal2 of operand2 -> I.instruction
         | Internal3 of operand3 -> I.instruction
         | InternalN of operandN -> I.instruction
         | External of int
         | None

  (*%
   *)
  type primitive =
       (*%
        * @format({bindName, ty, instruction, hasEffect}) bindName
        *)
       {
         bindName : string,
         ty : string, (* Types.ty *)
         instruction : instruction,
         hasEffect : bool
       }

  (***************************************************************************)

(*
  @SMLPrimitiveTypes@

  @SMLPrimitiveInfos@
*)

  local
    open I
    val primitives : primitive SEnv.map =
        SEnv.fromList
            [
              @SMLPrimitives@
            ]
            handle
            TypeParser.TypeFormat typeString =>
            raise Control.Bug ("invalid type expression:" ^ typeString)
  in
  val allPrimitives = SEnv.listItems primitives
  (** get an instruction which implements the specified primitive.
   * @params name
   * @param the name of primitive
   *)
  fun findPrimitive name =
      case SEnv.find (primitives, name)
       of NONE => raise Control.Bug ("primitive " ^ name ^ " is not found.")
        | SOME primitive => primitive
  end

  (***************************************************************************)

end

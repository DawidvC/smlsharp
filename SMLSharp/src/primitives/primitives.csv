# List of primitive operators.
# See README.txt.
# $Id: primitives.csv,v 1.86 2008/03/11 08:53:57 katsu Exp $

:=,assign,"['a.('a) ref * 'a -> unit]",2,,,effective

=,equal,"[''a.''a * ''a -> bool]",2,Equal,,noneffective

# Arithmetic primitives may raise exception, except for primitives on 'real'.
addInt,,"int * int -> int",2,AddInt,,effective
addLargeInt,,"largeInt * largeInt -> largeInt",2,AddLargeInt,,effective
addReal,,"real * real -> real",2,AddReal,,noneffective
addFloat,,"float * float -> float",2,AddFloat,,noneffective
addWord,,"word * word -> word",2,AddWord,,effective
addByte,,"byte * byte -> byte",2,AddByte,,effective
subInt,,"int * int -> int",2,SubInt,,effective
subLargeInt,,"largeInt * largeInt -> largeInt",2,SubLargeInt,,effective
subReal,,"real * real -> real",2,SubReal,,noneffective
subFloat,,"float * float -> float",2,SubFloat,,noneffective
subWord,,"word * word -> word",2,SubWord,,effective
subByte,,"byte * byte -> byte",2,SubByte,,effective
mulInt,,"int * int -> int",2,MulInt,,effective
mulLargeInt,,"largeInt * largeInt -> largeInt",2,MulLargeInt,,effective
mulReal,,"real * real -> real",2,MulReal,,noneffective
mulFloat,,"float * float -> float",2,MulFloat,,noneffective
mulWord,,"word * word -> word",2,MulWord,,effective
mulByte,,"byte * byte -> byte",2,MulByte,,effective
divInt,,"int * int -> int",2,DivInt,,effective
divLargeInt,,"largeInt * largeInt -> largeInt",2,DivLargeInt,,effective
divWord,,"word * word -> word",2,DivWord,,effective
divByte,,"byte * byte -> byte",2,DivByte,,effective
/,divReal,"real * real -> real",2,DivReal,,noneffective
divFloat,,"float * float -> float",2,DivFloat,,noneffective
modInt,,"int * int -> int",2,ModInt,,effective
modLargeInt,,"largeInt * largeInt -> largeInt",2,ModLargeInt,,effective
modWord,,"word * word -> word",2,ModWord,,effective
modByte,,"byte * byte -> byte",2,ModByte,,effective
quotInt,,"int * int -> int",2,QuotInt,,effective
quotLargeInt,,"largeInt * largeInt -> largeInt",2,QuotLargeInt,,effective
remInt,,"int * int -> int",2,RemInt,,effective
remLargeInt,,"largeInt * largeInt -> largeInt",2,RemLargeInt,,effective
negInt,,"int -> int",1,NegInt,,effective
negLargeInt,,"largeInt -> largeInt",1,NegLargeInt,,effective
negReal,,"real -> real",1,NegReal,,noneffective
negFloat,,"float -> float",1,NegFloat,,noneffective
absInt,,"int -> int",1,AbsInt,,effective
absLargeInt,,"largeInt -> largeInt",1,AbsLargeInt,,effective
absReal,,"real-> real",1,AbsReal,,noneffective
absFloat,,"float-> float",1,AbsFloat,,noneffective

# Comparison primitives are noneffective because they do not raise exception.
ltInt,,"int * int -> bool",2,LtInt,,noneffective
ltLargeInt,,"largeInt * largeInt -> bool",2,LtLargeInt,,noneffective
ltReal,,"real * real -> bool",2,LtReal,,noneffective
ltFloat,,"float * float -> bool",2,LtFloat,,noneffective
ltWord,,"word * word -> bool",2,LtWord,,noneffective
ltByte,,"byte * byte -> bool",2,LtByte,,noneffective
ltChar,,"char * char -> bool",2,LtChar,,noneffective
ltString,,"string * string -> bool",2,LtString,,noneffective
gtInt,,"int * int -> bool",2,GtInt,,noneffective
gtLargeInt,,"largeInt * largeInt -> bool",2,GtLargeInt,,noneffective
gtReal,,"real * real -> bool",2,GtReal,,noneffective
gtFloat,,"float * float -> bool",2,GtFloat,,noneffective
gtWord,,"word * word -> bool",2,GtWord,,noneffective
gtByte,,"byte * byte -> bool",2,GtByte,,noneffective
gtChar,,"char * char -> bool",2,GtChar,,noneffective
gtString,,"string * string -> bool",2,GtString,,noneffective
lteqInt,,"int * int -> bool",2,LteqInt,,noneffective
lteqLargeInt,,"largeInt * largeInt -> bool",2,LteqLargeInt,,noneffective
lteqReal,,"real * real -> bool",2,LteqReal,,noneffective
lteqFloat,,"float * float -> bool",2,LteqFloat,,noneffective
lteqWord,,"word * word -> bool",2,LteqWord,,noneffective
lteqByte,,"byte * byte -> bool",2,LteqByte,,noneffective
lteqChar,,"char * char -> bool",2,LteqChar,,noneffective
lteqString,,"string * string -> bool",2,LteqString,,noneffective
gteqInt,,"int * int -> bool",2,GteqInt,,noneffective
gteqLargeInt,,"largeInt * largeInt -> bool",2,GteqLargeInt,,noneffective
gteqReal,,"real * real -> bool",2,GteqReal,,noneffective
gteqFloat,,"float * float -> bool",2,GteqFloat,,noneffective
gteqWord,,"word * word -> bool",2,GteqWord,,noneffective
gteqByte,,"byte * byte -> bool",2,GteqByte,,noneffective
gteqChar,,"char * char -> bool",2,GteqChar,,noneffective
gteqString,,"string * string -> bool",2,GteqString,,noneffective

Int_toString,,"int -> string",1,,IMLPrim_Int_toString,effective

LargeInt_toString,,"largeInt -> string",1,,IMLPrim_LargeInt_toString,effective
LargeInt_toInt,,"largeInt -> int",1,,IMLPrim_LargeInt_toInt,effective
LargeInt_toWord,,"largeInt -> word",1,,IMLPrim_LargeInt_toWord,effective
LargeInt_fromInt,,"int -> largeInt",1,,IMLPrim_LargeInt_fromInt,effective
LargeInt_fromWord,,"word -> largeInt",1,,IMLPrim_LargeInt_fromWord,effective
LargeInt_pow,,"largeInt * int -> largeInt",2,,IMLPrim_LargeInt_pow,effective
LargeInt_log2,,"largeInt -> int",1,,IMLPrim_LargeInt_log2,effective
LargeInt_orb,,"largeInt * largeInt -> largeInt",2,,IMLPrim_LargeInt_orb,effective
LargeInt_xorb,,"largeInt * largeInt -> largeInt",2,,IMLPrim_LargeInt_xorb,effective
LargeInt_andb,,"largeInt * largeInt -> largeInt",2,,IMLPrim_LargeInt_andb,effective
LargeInt_notb,,"largeInt -> largeInt",1,,IMLPrim_LargeInt_notb,effective

Byte_toIntX,,"byte -> int",1,Byte_toIntX,,effective
Byte_fromInt,,"int -> byte",1,Byte_fromInt,,effective

Word_toIntX,,"word -> int",1,Word_toIntX,,effective
Word_fromInt,,"int -> word",1,Word_fromInt,,effective
Word_andb,,"word * word -> word",2,Word_andb,,effective
Word_orb,,"word * word -> word",2,Word_orb,,effective
Word_xorb,,"word * word -> word",2,Word_xorb,,effective
Word_notb,,"word -> word",1,Word_notb,,effective
Word_leftShift,,"word * word -> word",2,Word_leftShift,,effective
Word_logicalRightShift,,"word * word -> word",2,Word_logicalRightShift,,effective
Word_arithmeticRightShift,,"word * word -> word",2,Word_arithmeticRightShift,,effective
Word_toString,,"word -> string",1,,IMLPrim_Word_toString,effective

Real_fromInt,,"int -> real",1,,IMLPrim_Real_fromInt,effective
Real_toString,,"real -> string",1,,IMLPrim_Real_toString,effective
Real_floor,,"real -> int",1,,IMLPrim_Real_floor,effective
Real_ceil,,"real -> int",1,,IMLPrim_Real_ceil,effective
Real_trunc,,"real -> int",1,,IMLPrim_Real_trunc,effective
Real_round,,"real -> int",1,,IMLPrim_Real_round,effective
Real_split,,"real -> real * real",1,,IMLPrim_Real_split,effective
Real_toManExp,,"real -> real * int",1,,IMLPrim_Real_toManExp,effective
Real_fromManExp,,"real * int -> real",2,,IMLPrim_Real_fromManExp,effective
Real_copySign,,"real * real -> real",2,,IMLPrim_Real_copySign,effective
Real_equal,,"real * real -> bool",2,,IMLPrim_Real_equal,effective
Real_class,,"real -> int",1,,IMLPrim_Real_class,effective
Real_toFloat,,"real -> float",1,,IMLPrim_Real_toFloat,effective
Real_fromFloat,,"float -> real",1,,IMLPrim_Real_fromFloat,effective
Real_dtoa,,"(real * int) -> string * int",2,,IMLPrim_Real_dtoa,effective
Real_strtod,,"string -> real",1,,IMLPrim_Real_strtod,noneffective

Float_fromInt,,"int -> float",1,,IMLPrim_Float_fromInt,effective
Float_toString,,"float -> string",1,,IMLPrim_Float_toString,effective
Float_floor,,"float -> int",1,,IMLPrim_Float_floor,effective
Float_ceil,,"float -> int",1,,IMLPrim_Float_ceil,effective
Float_trunc,,"float -> int",1,,IMLPrim_Float_trunc,effective
Float_round,,"float -> int",1,,IMLPrim_Float_round,effective
Float_split,,"float -> float * float",1,,IMLPrim_Float_split,effective
Float_toManExp,,"float -> float * int",1,,IMLPrim_Float_toManExp,effective
Float_fromManExp,,"float * int -> float",2,,IMLPrim_Float_fromManExp,effective
Float_copySign,,"float * float -> float",2,,IMLPrim_Float_copySign,effective
Float_equal,,"float * float -> bool",2,,IMLPrim_Float_equal,effective
Float_class,,"float -> int",1,,IMLPrim_Float_class,effective

# Char_chr may raise Chr exception.
Char_toString,,"char -> string",1,,IMLPrim_Char_toString,effective
Char_toEscapedString,,"char -> string",1,,IMLPrim_Char_toEscapedString,effective
Char_ord,,"char -> int",1,,IMLPrim_Char_ord,effective
Char_chr,,"int -> char",1,,IMLPrim_Char_chr,effective

String_concat2,,"string * string -> string",2,,IMLPrim_String_concat2,effective
String_sub,,"string * int -> char",2,,IMLPrim_String_sub,effective
String_size,,"string -> int",1,,IMLPrim_String_size,effective
String_substring,,"string * int * int -> string",3,,IMLPrim_String_substring,effective
String_update,,"string * int * char -> unit",3,,IMLPrim_String_update,effective
String_allocateMutable,,"int * char -> string",2,,IMLPrim_String_allocateMutable,effective
String_allocateImmutable,,"int * char -> string",2,,IMLPrim_String_allocateImmutable,effective
String_copy,,"string * int * string * int * int -> unit",5,,IMLPrim_String_copy,effective

print,,"string -> unit",1,,IMLPrim_print,effective

Array_mutableArray,,"['a.int * 'a -> ('a) array]",2,,,effective
Array_immutableArray,,"['a.int * 'a -> ('a) array]",2,,,effective
Array_sub,,"['a.('a) array * int -> 'a]",2,,,effective
Array_update,,"['a.('a) array * int * 'a -> unit]",3,,,effective
Array_length,,"['a.('a) array -> int]",1,Array_length,,effective
Array_copy,,"['a.('a) array * int * ('a) array * int * int -> unit]",5,,,effective

Internal_getCurrentIP,,"int -> word * word",1,CurrentIP,,effective
Internal_getStackTrace,,"int -> (word * word) array",1,StackTrace,,effective
Internal_IPToString,,"word * word -> string",2,,IMLPrim_Internal_IPToString,effective

Time_gettimeofday,,"int -> int * int",1,,IMLPrim_Time_gettimeofday,effective

GenericOS_errorName,,"int -> string",1,,IMLPrim_GenericOS_errorName,effective
GenericOS_errorMsg,,"int -> string",1,,IMLPrim_GenericOS_errorMsg,effective
GenericOS_syserror,,"string -> (int) option",1,,IMLPrim_GenericOS_syserror,effective

GenericOS_getSTDIN,,"int -> word",1,,IMLPrim_GenericOS_getSTDIN,effective
GenericOS_getSTDOUT,,"int -> word",1,,IMLPrim_GenericOS_getSTDOUT,effective
GenericOS_getSTDERR,,"int -> word",1,,IMLPrim_GenericOS_getSTDERR,effective
# FILE* fileOpen(fileName, mode)
GenericOS_fileOpen,,"string * string -> word",2,,IMLPrim_GenericOS_fileOpen,effective
GenericOS_fileClose,,"word -> unit",1,,IMLPrim_GenericOS_fileClose,effective
# buffer fileRead(FILE*, nbytes)
GenericOS_fileRead,,"word * int -> byteArray",2,,IMLPrim_GenericOS_fileRead,effective
# readBytes fileReadBuf(FILE*, buffer, start, nbytes)
GenericOS_fileReadBuf,,"word * byteArray * int * int -> int",4,,IMLPrim_GenericOS_fileReadBuf,effective
# writtenBytes fileWrite(FILE*, buffer, start, nbytes)
GenericOS_fileWrite,,"word * byteArray * int * int -> int",4,,IMLPrim_GenericOS_fileWrite,effective
GenericOS_fileSetPosition,,"word * int -> int",2,,IMLPrim_GenericOS_fileSetPosition,effective
GenericOS_fileGetPosition,,"word -> int",1,,IMLPrim_GenericOS_fileGetPosition,effective
# returns the file descriptor.
GenericOS_fileNo,,"word -> int",1,,IMLPrim_GenericOS_fileNo,effective
# returns size of an opened file
GenericOS_fileSize,,"word -> int",1,,IMLPrim_GenericOS_fileSize,effective

GenericOS_isRegFD,,"word -> bool",1,,IMLPrim_GenericOS_isRegFD,effective
GenericOS_isDirFD,,"word -> bool",1,,IMLPrim_GenericOS_isDirFD,effective
GenericOS_isChrFD,,"word -> bool",1,,IMLPrim_GenericOS_isChrFD,effective
GenericOS_isBlkFD,,"word -> bool",1,,IMLPrim_GenericOS_isBlkFD,effective
GenericOS_isLinkFD,,"word -> bool",1,,IMLPrim_GenericOS_isLinkFD,effective
GenericOS_isFIFOFD,,"word -> bool",1,,IMLPrim_GenericOS_isFIFOFD,effective
GenericOS_isSockFD,,"word -> bool",1,,IMLPrim_GenericOS_isSockFD,effective
GenericOS_poll,,"((int * word) array * (int * int) option) -> (int * word) array",2,,IMLPrim_GenericOS_poll,effective
GenericOS_getPOLLINFlag,,"int -> word",1,,IMLPrim_GenericOS_getPOLLINFlag,effective
GenericOS_getPOLLOUTFlag,,"int -> word",1,,IMLPrim_GenericOS_getPOLLOUTFlag,effective
GenericOS_getPOLLPRIFlag,,"int -> word",1,,IMLPrim_GenericOS_getPOLLPRIFlag,effective

# int system(char* name)
GenericOS_system,,"string -> int",1,,IMLPrim_GenericOS_system,effective
# void exit(int)
GenericOS_exit,,"int -> unit",1,,IMLPrim_GenericOS_exit,effective
GenericOS_getEnv,,"string -> (string) option",1,,IMLPrim_GenericOS_getEnv,effective
# void sleep(unsigned int seconds)
GenericOS_sleep,,"word -> unit",1,,IMLPrim_GenericOS_sleep,effective

GenericOS_openDir,,"string -> word",1,,IMLPrim_GenericOS_openDir,effective
GenericOS_readDir,,"word -> (string) option",1,,IMLPrim_GenericOS_readDir,effective
GenericOS_rewindDir,,"word -> unit",1,,IMLPrim_GenericOS_rewindDir,effective
GenericOS_closeDir,,"word -> unit",1,,IMLPrim_GenericOS_closeDir,effective
GenericOS_chDir,,"string -> unit",1,,IMLPrim_GenericOS_chDir,effective
GenericOS_getDir,,"int -> string",1,,IMLPrim_GenericOS_getDir,effective
GenericOS_mkDir,,"string -> unit",1,,IMLPrim_GenericOS_mkDir,effective
GenericOS_rmDir,,"string -> unit",1,,IMLPrim_GenericOS_rmDir,effective
GenericOS_isDir,,"string -> bool",1,,IMLPrim_GenericOS_isDir,effective
GenericOS_isLink,,"string -> bool",1,,IMLPrim_GenericOS_isLink,effective
GenericOS_readLink,,"string -> string",1,,IMLPrim_GenericOS_readLink,effective
GenericOS_getFileModTime,,"string -> int",1,,IMLPrim_GenericOS_getFileModTime,effective
GenericOS_setFileTime,,"string * int -> unit",2,,IMLPrim_GenericOS_setFileTime,effective
GenericOS_getFileSize,,"string -> int",1,,IMLPrim_GenericOS_getFileSize,effective
GenericOS_remove,,"string -> unit",1,,IMLPrim_GenericOS_remove,effective
GenericOS_rename,,"string * string -> unit",2,,IMLPrim_GenericOS_rename,effective
GenericOS_isFileExists,,"string -> bool",1,,IMLPrim_GenericOS_isFileExists,effective
GenericOS_isFileReadable,,"string -> bool",1,,IMLPrim_GenericOS_isFileReadable,effective
GenericOS_isFileWritable,,"string -> bool",1,,IMLPrim_GenericOS_isFileWritable,effective
GenericOS_isFileExecutable,,"string -> bool",1,,IMLPrim_GenericOS_isFileExecutable,effective
GenericOS_tempFileName,,"unit -> string",1,,IMLPrim_GenericOS_tempFileName,effective
GenericOS_getFileID,,"string -> word",1,,IMLPrim_GenericOS_getFileID,effective

CommandLine_name,,"int -> string",1,,IMLPrim_CommandLine_name,effective
CommandLine_arguments,,"int -> (string) array",1,,IMLPrim_CommandLine_arguments,effective

Date_ascTime,,"(int * int * int * int * int * int * int * int * int) -> string",9,,IMLPrim_Date_ascTime,effective
Date_localTime,,"int -> (int * int * int * int * int * int * int * int * int)",1,,IMLPrim_Date_localTime,effective
Date_gmTime,,"int -> (int * int * int * int * int * int * int * int * int)",1,,IMLPrim_Date_gmTime,effective
Date_mkTime,,"(int * int * int * int * int * int * int * int * int) -> int",9,,IMLPrim_Date_mkTime,effective
Date_strfTime,,"(string * (int * int * int * int * int * int * int * int * int)) -> string",2,,IMLPrim_Date_strfTime,effective

Timer_getTime,,"int -> (int * int * int * int * int * int)",1,,IMLPrim_Timer_getTime,effective

# There Math primitives are effective since underlying GMP may raise exception.
Math_sqrt,,"real -> real",1,,IMLPrim_Math_sqrt,effective
Math_sin,,"real -> real",1,,IMLPrim_Math_sin,effective
Math_cos,,"real -> real",1,,IMLPrim_Math_cos,effective
Math_tan,,"real -> real",1,,IMLPrim_Math_tan,effective
Math_asin,,"real -> real",1,,IMLPrim_Math_asin,effective
Math_acos,,"real -> real",1,,IMLPrim_Math_acos,effective
Math_atan,,"real -> real",1,,IMLPrim_Math_atan,effective
Math_atan2,,"real * real -> real",2,,IMLPrim_Math_atan2,effective
Math_exp,,"real -> real",1,,IMLPrim_Math_exp,effective
Math_pow,,"real * real -> real",2,,IMLPrim_Math_pow,effective
Math_ln,,"real -> real",1,,IMLPrim_Math_ln,effective
Math_log10,,"real -> real",1,,IMLPrim_Math_log10,effective
Math_sinh,,"real -> real",1,,IMLPrim_Math_sinh,effective
Math_cosh,,"real -> real",1,,IMLPrim_Math_cosh,effective
Math_tanh,,"real -> real",1,,IMLPrim_Math_tanh,effective

StandardC_errno,,"unit -> int",1,,IMLPrim_StandardC_errno,noneffective

UnmanagedMemory_allocate,,"int -> (unit) ptr",1,,IMLPrim_UnmanagedMemory_allocate,effective
UnmanagedMemory_release,,"(unit) ptr -> unit",1,,IMLPrim_UnmanagedMemory_release,effective
UnmanagedMemory_sub,,"(unit) ptr -> byte",1,,IMLPrim_UnmanagedMemory_sub,effective
UnmanagedMemory_update,,"(unit) ptr * byte -> unit",2,,IMLPrim_UnmanagedMemory_update,effective
UnmanagedMemory_subWord,,"(unit) ptr -> word",1,,IMLPrim_UnmanagedMemory_subWord,effective
UnmanagedMemory_updateWord,,"(unit) ptr * word -> unit",2,,IMLPrim_UnmanagedMemory_updateWord,effective
UnmanagedMemory_subInt,,"(unit) ptr -> int",1,,IMLPrim_UnmanagedMemory_subWord,effective
UnmanagedMemory_updateInt,,"(unit) ptr * int -> unit",2,,IMLPrim_UnmanagedMemory_updateWord,effective
UnmanagedMemory_subReal,,"(unit) ptr -> real",1,,IMLPrim_UnmanagedMemory_subReal,effective
UnmanagedMemory_updateReal,,"(unit) ptr * real -> unit",2,,IMLPrim_UnmanagedMemory_updateReal,effective
UnmanagedMemory_import,,"(unit) ptr * int -> byteArray",2,,IMLPrim_UnmanagedMemory_import,effective
UnmanagedMemory_export,,"byteArray * int * int -> (unit) ptr",3,,IMLPrim_UnmanagedMemory_export,effective
UnmanagedString_size,,"(unit) ptr -> int",1,,IMLPrim_UnmanagedString_size,effective

DynamicLink_dlopen,,"string -> (unit) ptr",1,,IMLPrim_DynamicLink_dlopen,effective
DynamicLink_dlclose,,"(unit) ptr -> unit",1,,IMLPrim_DynamicLink_dlclose,effective
DynamicLink_dlsym,,"(unit) ptr * string -> (unit) ptr",2,,IMLPrim_DynamicLink_dlsym,effective

# actual domain type of addFinalizable is: 'a ref * ('a ref -> unit) ref
GC_addFinalizable,,"['a.('a) ref -> int]",1,,IMLPrim_GC_addFinalizable,effective
GC_doGC,,"int -> unit",1,,IMLPrim_GC_doGC,effective
GC_fixedCopy,,"['a.('a) ref -> unit]",1,,IMLPrim_GC_fixedCopy,effective
GC_releaseFLOB,,"['a.('a) ref -> unit]",1,,IMLPrim_GC_releaseFLOB,effective
GC_addressOfFLOB,,"['a.('a) ref -> (unit) ptr]",1,,IMLPrim_GC_addressOfFLOB,effective
GC_copyBlock,,"['a.('a) ref -> unit]",1,,IMLPrim_GC_copyBlock,effective
GC_isAddressOfBlock,,"(unit) ptr -> bool",1,,IMLPrim_GC_isAddressOfBlock,effective
GC_isAddressOfFLOB,,"(unit) ptr -> bool",1,,IMLPrim_GC_isAddressOfFLOB,effective

Platform_getPlatform,,"unit -> string",1,,IMLPrim_Platform_getPlatform,effective
Platform_isBigEndian,,"unit -> bool",1,,IMLPrim_Platform_isBigEndian,noneffective

Pack_packWord32Little,,"(byte * byte * byte * byte) -> word",4,,IMLPrim_Pack_packWord32Little,effective
Pack_packWord32Big,,"(byte * byte * byte * byte) -> word",4,,IMLPrim_Pack_packWord32Big,effective
Pack_unpackWord32Little,,"word -> (byte * byte * byte * byte)",1,,IMLPrim_Pack_unpackWord32Little,effective
Pack_unpackWord32Big,,"word -> (byte * byte * byte * byte)",1,,IMLPrim_Pack_unpackWord32Big,effective
Pack_packReal64Little,,"(byte * byte * byte * byte * byte * byte * byte * byte) -> real",8,,IMLPrim_Pack_packReal64Little,effective
Pack_packReal64Big,,"(byte * byte * byte * byte * byte * byte * byte * byte) -> real",8,,IMLPrim_Pack_packReal64Big,effective
Pack_unpackReal64Little,,"real -> (byte * byte * byte * byte * byte * byte * byte * byte)",1,,IMLPrim_Pack_unpackReal64Little,effective
Pack_unpackReal64Big,,"real -> (byte * byte * byte * byte * byte * byte * byte * byte)",1,,IMLPrim_Pack_unpackReal64Big,effective

Pack_packReal32Little,,"(byte * byte * byte * byte) -> float",4,,IMLPrim_Pack_packReal32Little,effective
Pack_packReal32Big,,"(byte * byte * byte * byte) -> float",4,,IMLPrim_Pack_packReal32Big,effective
Pack_unpackReal32Little,,"float -> (byte * byte * byte * byte)",1,,IMLPrim_Pack_unpackReal32Little,effective
Pack_unpackReal32Big,,"float -> (byte * byte * byte * byte)",1,,IMLPrim_Pack_unpackReal32Big,effective

SMLSharpCommandLine_executableImageName,,"unit -> (string) option",1,,IMLPrim_SMLSharpCommandLine_executableImageName,effective

DynamicBind_importSymbol,,"string -> (unit) ptr",1,,IMLPrim_DynamicBind_importSymbol,effective
DynamicBind_exportSymbol,,"string * (unit) ptr -> unit",2,,IMLPrim_DynamicBind_exportSymbol,effective

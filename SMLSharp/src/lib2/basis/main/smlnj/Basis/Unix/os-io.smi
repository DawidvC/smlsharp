_require "basis/main/General.smi"
_require "basis/main/IntStructures.smi"
_require "basis/main/Time.smi"
_require "basis/main/List.smi"
_require "basis/main/ListPair.smi"
_require "basis/main/SMLSharpOSFileSys.smi"
_require "basis/main/OS_IO.sig"

structure SMLSharpSMLNJ_OS_IO =
struct
  type iodesc = SMLSharpOSFileSys.iodesc
  val hash : iodesc -> word
  val compare : iodesc * iodesc -> order
  datatype iodesc_kind (= K of string) as eqtype
  val kind : iodesc -> iodesc_kind
  structure Kind =
  struct
    val file : iodesc_kind
    val dir : iodesc_kind
    val symlink : iodesc_kind
    val tty : iodesc_kind
    val pipe : iodesc_kind
    val socket : iodesc_kind
    val device : iodesc_kind
  end
  datatype poll_desc (= PollDesc of iodesc * {rd : bool, wr : bool, pri : bool})
    as eqtype
  datatype poll_info (= PollInfo of iodesc * {rd : bool, wr : bool, pri : bool})
  val pollDesc : iodesc -> poll_desc option
  val pollToIODesc : poll_desc -> iodesc
  exception Poll
  val pollIn : poll_desc -> poll_desc
  val pollOut : poll_desc -> poll_desc
  val pollPri : poll_desc -> poll_desc
  val poll : poll_desc list * Time.time option -> poll_info list
  val isIn : poll_info -> bool
  val isOut : poll_info -> bool
  val isPri : poll_info -> bool
  val infoToPollDesc : poll_info -> poll_desc
end

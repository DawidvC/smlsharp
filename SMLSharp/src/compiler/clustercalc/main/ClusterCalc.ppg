(**
 * @copyright (c) 2006, Tohoku University.
 * @author Huu-Duc Nguyen
 * @version $Id: ClusterCalc.ppg,v 1.18 2008/08/06 17:23:39 ohori Exp $
 *)

structure ClusterCalc = struct

 type loc = Loc.loc

 (*%
  * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
  *)
 (*%
  * @prefix typed
  * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
  *)
 type ffiAttributes = Absyn.ffiAttributes

 (*%
  * @formatter(AnnotatedTypes.ty) AnnotatedTypes.format_ty
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.ty) AnnotatedTypes.format_ty
  *)
 type ty = AnnotatedTypes.ty

(*
 (*%
  * @formatter(ID.id) ID.format_id
  *)
 (*%
  * @prefix typed
  * @formatter(ID.id) ID.format_id
  *)
 type id = ID.id
*)

 (*%
  * @formatter(AnnotatedTypes.varInfo) AnnotatedTypes.format_varInfoWithoutType
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.varInfo) AnnotatedTypes.format_varInfo
  *)
 type varInfo = AnnotatedTypes.varInfo

 (*%
  * @formatter(AnnotatedTypes.primInfo) AnnotatedTypes.format_primInfo
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.primInfo) AnnotatedTypes.format_primInfo
  *)
 type primInfo = AnnotatedTypes.primInfo

 (*%
  * @formatter(AnnotatedTypes.annotationLabel) AnnotatedTypes.format_annotationLabel
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.annotationLabel) AnnotatedTypes.format_annotationLabel
  *)
 type annotationLabel = AnnotatedTypes.annotationLabel

 (*%
  * @formatter(AnnotatedTypes.funStatus) AnnotatedTypes.format_funStatus
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.funStatus) AnnotatedTypes.format_funStatus
  *)
 type funStatus = AnnotatedTypes.funStatus

 (*%
  * @formatter(AnnotatedTypes.btvEnv) AnnotatedTypes.format_btvEnv
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.btvEnv) AnnotatedTypes.format_btvEnv
  *)
 type btvEnv = AnnotatedTypes.btvEnv

 (*%
  * @formatter(ExnTagID.id) ExnTagID.format_id
  *)
 (*%
  * @prefix typed
  * @formatter(ExnTagID.id) ExnTagID.format_id
  *)
 type globalTag = ExnTagID.id

 (*%
  * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
  *)
 (*%
  * @prefix typed
  * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
  *)
 datatype constant = datatype ConstantTerm.constant

 (*
  * formatter precedence:
  * L9 { x [ ] }    field selection
  * L8 { x y }      application
  *
  * L2 { x : y }    type annotation (see also AnnotatedTypes)
  * N1 { }          let, raise, switch, handle, etc.
  * R1 { x => y }   abstraction
  *
  * Precedence 0 is reserved for cut.
  * Use +1 for separating declarations.
  * Be careful of usage of guard so that the above +1 works fine.
  *)

 (*%
  * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
  * @formatter(bool) SmlppgUtil.formatBinaryChoice
  *)
 (*%
  * @prefix typed
  * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
  * @formatter(listWithEnclosure) SmlppgUtil.formatListWithEnclosure
  * @formatter(bool) SmlppgUtil.formatBinaryChoice
  *)
 datatype ccexp =
          (*%
           * @format({funExp,
           *          funTy,
           *          argExpList: arg args:listWithEnclosureOne,
           *          attributes,
           *          loc:loc})
           * L9{
           *   "FOREIGNAPPLY(" !N0{ funExp } ")"
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({funExp,
           *          funTy,
           *          argExpList: arg args:listWithEnclosureOne,
           *          attributes,
           *          loc:loc})
           * L9{
           *   L2{
           *     "FOREIGNAPPLY(" !N0{ funExp } ")"
           *     +1 "as" +d funTy
           *   }
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          CCFOREIGNAPPLY of
          {
           funExp : ccexp,
           funTy : ty,
           argExpList : ccexp list,
           attributes : ffiAttributes,
           loc : loc
          }
(*
        | (*%
           * @format({funExp, funTy, attributes, loc})
           * "EXPORTCALLBACK(" !N0{ funExp } ")"
           *)
          (*%
           * @prefix typed
           * @format({funExp, funTy, attributes, loc})
           * L2{
           *   "EXPORTCALLBACK(" !N0{ funExp } ")"
           *   +1 "as" +d funTy
           * }
           *)
          CCEXPORTCALLBACK of
          {
           funExp : ccexp,
           funTy : ty,
           attributes : ffiAttributes,
           loc: loc
          }
*)
        | (*%
           * @format({ty, loc}) "_sizeof(" !N0{ ty } ")"
           *)
          (*%
           * @prefix typed
           * @format({ty, loc}) "_sizeof(" !N0{ ty } ")"
           *)
          CCSIZEOF of {ty : ty, loc : loc}
        | (*%
           * @format({value, loc}) value
           *)
          (*%
           * @prefix typed
           * @format({value, loc}) value
           *)
          CCCONSTANT of {value : constant, loc : loc}
        | (*%
           * @format({name, kind, ty, loc}) name ":" ty
           *)
          (*%
           * @prefix typed
	   * @format({name, kind, ty, loc}) ty
           *)
          CCGLOBALSYMBOL of {name:string, kind:Absyn.globalSymbolKind, ty:ty, loc:loc}
        | (*%
           * @format({tagValue, displayName, loc}) "EXNTAG(" tagValue ")"
           *)
          (*%
           * @prefix typed
           * @format({tagValue, displayName, loc}) "EXNTAG(" tagValue ")"
           *)
          CCEXCEPTIONTAG of {tagValue : globalTag, displayName : string, loc : loc}
        | (*%
           * @format({varInfo, loc}) varInfo
           *)
          (*%
           * @prefix typed
           * @format({varInfo, loc}) varInfo
           *)
          CCVAR of {varInfo : varInfo, loc : loc}
        | (*%
           * @format({arrayExp, indexExp, elementTy, loc})
           * N1{
           *   "GETFIELD"
           *   2[ +1 L9{ arrayExp 1 "[" !N0{ indexExp } "]" } ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({arrayExp, indexExp, elementTy, loc})
           * L2{
           *   N1{
           *     "GETFIELD"
           *     2[ +1 L9{ arrayExp 1 "[" !N0{ indexExp } "]" } ]
           *   }
           *   +1 ":" +d elementTy
           * }
           *)
          CCGETFIELD of
          {arrayExp : ccexp, indexExp : ccexp, elementTy : ty, loc : loc}
        | (*%
           * @format({valueExp, arrayExp, indexExp, elementTy, loc})
           * N1{ !N0{
           *   "SETFIELD"
           *   2[ +1 L9{ arrayExp 1 "[" !N0{ indexExp } "]" }
           *      +d ":="
           *      2[ +1 valueExp ] ]
           * } }
           *)
          (*%
           * @prefix typed
           * @format({valueExp, arrayExp, indexExp, elementTy, loc})
           * N1{ !N0{
           *   "SETFIELD"
           *   2[ +1 L9{ arrayExp 1 "[" !N0{ indexExp } "]" }
           *      +d ":="
           *      2[ +1 valueExp ] ]
           * } }
           *)
          CCSETFIELD of
          {
           valueExp : ccexp,
           arrayExp : ccexp,
           indexExp : ccexp,
           elementTy : ty,
           loc: loc
          }
        | (*%
           * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel,
           *         loc})
           * N1{ !N0{
           *   "SETTAIL"
           *   2[ +1 L9{ consExp 1 "[" tailLabel "]" }
           *      +d ":="
           *      2[ +1 newTailExp ] ]
           * } }
           *)
          (*%
           * @prefix typed
           * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel,
           *         loc})
           * N1{ !N0{
           *   "SETTAIL"
           *   2[ +1 L9{ consExp 1 "[" tailLabel "]" }
           *      +d ":="
           *      2[ +1 newTailExp ] ]
           * } }
           *)
          CCSETTAIL of
          {
           consExp : ccexp,
           newTailExp : ccexp,
           tailLabel : string,
           listTy : ty,
           consRecordTy : ty,
           loc: loc
          }
        | (*%
           * @format({sizeExp, initialValue, elementTy, isMutable, loc})
           * N1{
           *   "ARRAY"
           *   isMutable()(+d "mutable",)
           *   2[ 1 "(" !N0{ sizeExp "," +2 initialValue } ")" ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({sizeExp, initialValue, elementTy, isMutable, loc})
           * N1{
           *   "ARRAY"
           *   isMutable()(+d "mutable",)
           *   2[ 1 "(" !N0{ sizeExp "," +2 initialValue } ")" ]
           * }
           *)
          CCARRAY of
          {
           sizeExp : ccexp,
           initialValue : ccexp,
           elementTy : ty,
           isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({srcExp, srcIndexExp, dstExp, dstIndexExp, lengthExp,
           *          elementTy, loc})
           * N1{
           * "COPYARRAY"
           * 2[ 1 "(" !N0{
           *   srcExp "," +2
           *   srcIndexExp "," +2
           *   dstExp "," +2
           *   dstIndexExp "," +2
           *   lengthExp
           * } ")" ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({srcExp, srcIndexExp, dstExp, dstIndexExp, lengthExp,
           *          elementTy, loc})
           * N1{
           * "COPYARRAY"
           * 2[ 1 "(" !N0{
           *   srcExp "," +2
           *   srcIndexExp "," +2
           *   dstExp "," +2
           *   dstIndexExp "," +2
           *   lengthExp
           * } ")" ]
           * }
           *)
          CCCOPYARRAY of
          {
           srcExp : ccexp,
           srcIndexExp : ccexp,
           dstExp : ccexp,
           dstIndexExp : ccexp,
           lengthExp : ccexp,
           elementTy : ty,
           loc: loc
          }
        | (*%
           * @format({primInfo,
           *          argExpList:arg args,
           *          instTyList:ty tys:listWithEnclosure,
           *          loc})
           * L9{ primInfo
           *     2[ 1 "(" !N0{ args(arg)("," +2) } ")" ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({primInfo,
           *          argExpList:arg args,
           *          instTyList:ty tys:listWithEnclosure,
           *          loc})
           * L9{ primInfo
           *     2[ 1 "(" !N0{ tys(ty)("," +2, "{", "}" "," +1)
           *              !N0{ args(arg)("," +2) } } ")"
           *      ] }
(*
           * L9{ primInfo
           *     2[ { 1 !N0{ tys(ty)("," +2, "{", "}") } }
           *        1 "(" !N0{ args(arg)("," +2) } ")"
           *      ] }
*)
           *)
          CCPRIMAPPLY of
          {
           primInfo : primInfo,
           argExpList : ccexp list,
           instTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({funExp, funTy,
           *          argExpList:arg args:listWithEnclosureOne, loc})
           * L9{ funExp 2[ +1 args(arg)("," +2, "{", "}") ] }
           *)
          (*%
           * @prefix typed
           * @format({funExp, funTy,
           *          argExpList:arg args:listWithEnclosureOne, loc})
           * L9{ funExp 2[ +1 args(arg)("," +2, "{", "}") ] }
           *)
          CCAPPM of
          {
           funExp : ccexp,
           funTy : ty,
           argExpList : ccexp list,
           loc : loc
          }
        | (*%
           * @format({funExp, funTy,
           *          argExpList:arg args:listWithEnclosureOne, loc})
           * L9{ "LOCALAPP(" !N0{ funExp } ")"
           *     2[ +1 args(arg)("," +2, "{", "}") ] }
           *)
          (*%
           * @prefix typed
           * @format({funExp, funTy,
           *          argExpList:arg args:listWithEnclosureOne, loc})
           * L9{ "LOCALAPP(" !N0{ funExp } ")"
           *     2[ +1 args(arg)("," +2, "{", "}") ] }
           *)
          CCLOCALAPPM of
          {
           funExp : ccexp,
           funTy : ty,
           argExpList : ccexp list,
           loc : loc
          }
        | (*%
           * @format({localDeclList : dec decs, mainExp, loc})
           * N1{ !N0{
           *   "let"
           *   2[ +1 decs(dec)(+1) ]
           *   +1 "in"
           *   2[ +1 mainExp ]
           *   +1 "end"
           * } }
           *)
          (*%
           * @prefix typed
           * @format({localDeclList : dec decs, mainExp, loc})
           * N1{ !N0{
           *   "let"
           *   2[ +1 decs(dec)(+1) ]
           *   +1 "in"
           *   2[ +1 mainExp ]
           *   +1 "end"
           * } }
           *)
          CCLET of
          {
           localDeclList : ccdecl list,
           mainExp : ccexp,
           loc : loc
          }
        | (*%
           * @format({expList:field fields, tyList, loc})
           * { "{" 2[ 1 !N0{ fields(field)("," +1) } ] 1 "}" }
           *)
          (*%
           * @prefix typed
           * @format({expList:field fields, tyList, loc})
           * { "{" 2[ 1 !N0{ fields(field)("," +1) } ] 1 "}" }
           *)
          CCMVALUES of {expList : ccexp list, tyList : ty list, loc : loc}
        | (*%
           * @format({expList:field fields, recordTy, annotation, isMutable,
           *          loc})
           * !N0{ "(" 2[ 1 fields(field)("," +1) ] 1 ")"
           *          d "^" annotation }
           *)
          (*%
           * @prefix typed
           * @format({expList:field fields, recordTy, annotation, isMutable,
           *          loc})
           * L2{ !N0{ "(" 2[ 1 fields(field)("," +1) ] 1 ")"
           *          d "^" annotation }
           *    +1 ":" +d recordTy }
           *)
          CCRECORD of
          {
           expList : ccexp list,
           recordTy : ty,
           annotation : annotationLabel,
           isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({recordExp, label, recordTy, resultTy, loc})
           * L9{ recordExp 2[ 1 "[" label "]" ] }
           *)
          (*%
           * @prefix typed
           * @format({recordExp, label, recordTy, resultTy, loc})
           * L2{
           *   L9{ recordExp 2[ 1 "[" label "]" ] }
           *   +1 ":" +d resultTy
           * }
           *)
          CCSELECT of
          {
           recordExp : ccexp,
           label : string,
           recordTy : ty,
           resultTy : ty,
           loc : loc
          }
        | (*%
           * @format({recordExp, recordTy, label, valueExp, valueTy, loc})
           * L9{
           *   recordExp
           *   2[ +1 "#" +d
           *      !N0{ "{"
           *           2[ 1 label + "=" 2[ +1 valueExp ] ]
           *           1 "}" } ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({recordExp, recordTy, label, valueExp, valueTy, loc})
           * L9{
           *   recordExp
           *   2[ +1 "#" +d
           *      !N0{ "{"
           *           2[ 1 label + "=" 2[ +1 valueExp ] ]
           *           1 "}" } ]
           * }
           *)
          CCMODIFY of
          {
           recordExp : ccexp,
           recordTy : ty,
           label : string,
           valueExp : ccexp,
           valueTy : ty,
           loc : loc
          }
        | (*%
           * @format({argExp, resultTy, loc})
           * N1{ "raise" 2[ +1 argExp ] }
           *)
          (*%
           * @prefix typed
           * @format({argExp, resultTy, loc})
           * L2{
           *   N1{ "raise" 2[ +1 argExp ] }
           *   +1 ":" +d resultTy
           * }
           *)
          CCRAISE of
          {
           argExp : ccexp,
           resultTy : ty,
           loc : loc
          }
        | (*%
           * @format({exp, exnVar, handler, loc})
           * N1{ !N0{
           *   "try"
           *   2[ +1 exp ]
           *   +1 R1{ "handle" +d !N0{ exnVar } +d "=>" 2[ +1 handler ] }
           * } }
           *)
          (*%
           * @prefix typed
           * @format({exp, exnVar, handler, loc})
           * N1{ !N0{
           *   "try"
           *   2[ +1 exp ]
           *   +1 R1{ "handle" +d !N0{ exnVar } +d "=>" 2[ +1 handler ] }
           * } }
           *)
          CCHANDLE of
          {
           exp : ccexp,
           exnVar : varInfo,
           handler : ccexp,
           loc : loc
          }
        | (*%
           * @format({exp, expTy,
           *          instTyList:tyArg tyArgs:listWithEnclosureOne,
           *          loc})
           * L9{ exp 2[ +1 "{TAPP}" ] }
           *)
          (*%
           * @prefix typed
           * @format({exp, expTy,
           *          instTyList:tyArg tyArgs:listWithEnclosureOne,
           *          loc})
           * L9{ exp 2[ +1 tyArgs(tyArg)("," +2, "{", "}") ] }
           *)
          CCTAPP of
          {
           exp : ccexp,
           expTy : ty,
           instTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
           * N1{ !N0{
           *   { "switch" 2[ +1 switchExp ] }
           *   +1 "of" +d rules(rule)(+1 " |" +d)
           *   +1 " |" +d R1{ "_" +d "=>" +1 defaultExp }
           * } }
           *
           * @format:rule({constant, exp})
           * R1{ constant +d "=>" +1 exp }
           *)
          (*%
           * @prefix typed
           * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
           * N1{ !N0{
           *   { "switch" 2[ +1 switchExp ] }
           *   +1 "of" +d rules(rule)(+1 " |" +d)
           *   +1 " |" +d R1{ "_" +d "=>" +1 defaultExp }
           * } }
           *
           * @format:rule({constant, exp})
           * R1{ constant +d "=>" +1 exp }
           *)
          CCSWITCH of
          {
           switchExp : ccexp,
           expTy : ty,
           branches : {constant : ccexp , exp : ccexp} list,
           defaultExp : ccexp,
           loc : loc
          }
        | (*%
           * @format({exp, expTy, targetTy, loc})
           * "cast" "(" !N0{ exp } ")"
           *)
          (*%
           * @prefix typed
           * @format({exp, expTy, targetTy, loc})
           * L2{
           *   "cast" "(" !N0{ exp } ")"
           *   2[ +1 "to" +d targetTy ]
           * }
           *)
          CCCAST of {exp : ccexp, expTy : ty, targetTy : ty, loc : loc}

      and ccdecl =
          (*%
           * @format({boundVars:var vars:listWithEnclosureOne, boundExp, loc})
           * !N0{ "val" +d { vars(var)("," +1, "{", "}") +d "=" }
           *      2[ +1 boundExp ] }
           *)
          (*%
           * @prefix typed
           * @format({boundVars:var vars:listWithEnclosureOne, boundExp, loc})
           * !N0{ "val" +d { vars(var)("," +1, "{", "}") +d "=" }
           *      2[ +1 boundExp ] }
           *)
          CCVAL of
          {
           boundVars : varInfo list,
           boundExp : ccexp,
           loc : loc
          }
        | (*%
           * @format({btvEnv, boundVar, boundExp, loc})
           * !N0{
           *   "POLY["
           *   2[ 1 "val" +d { boundVar +d "=" } 2[ +1 boundExp ] ]
           *   1 "]"
           * }
           *)
          (*%
           * @prefix typed
           * @format({btvEnv, boundVar, boundExp, loc})
           * !N0{
           *   "[" btvEnv "."
           *   2[ 1 "val" +d { boundVar +d "=" } 2[ +1 boundExp ] ]
           *   1 "]"
           * }
           *)
          CCPOLYVAL of
          {
           btvEnv : btvEnv,
           boundVar : varInfo,
           boundExp : ccexp,
           loc : loc
          }
        | (*%
           * @format({code:code codes, isRecursive, loc})
           * !N0{ "code" isRecursive()(+d "rec",) +d codes(code)(+1 "and" +d) }
           *)
          (*%
           * @prefix typed
           * @format({code:code codes, isRecursive, loc})
           * !N0{ "code" isRecursive()(+d "rec",) +d codes(code)(+1 "and" +d) }
           *)
          CCVALCODE of
          {
           code : codeDecl list,
           isRecursive : bool,
           loc : loc
          }
        | (*%
           * @format({btvEnv, code:code codes, isRecursive, loc})
           * !N0{
           *   "POLY["
           *   2[ 1 "code" isRecursive()(+d "rec",) +d
           *               codes(code)(+1 "and" +d) ]
           *   1 "]"
           * }
           *)
          (*%
           * @prefix typed
           * @format({btvEnv, code:code codes, isRecursive, loc})
           * !N0{
           *   "[" btvEnv "."
           *   2[ 1 "code" isRecursive()(+d "rec",) +d
           *               codes(code)(+1 "and" +d) ]
           *   1 "]"
           * }
           *)
          CCPOLYVALCODE of
          {
           btvEnv : btvEnv,
           code : codeDecl list,
           isRecursive : bool,
           loc : loc
          }
        | (*%
           * @format({entryFunctions:entry entries,
           *          innerFunctions:inner inners,
           *          isRecursive,
           *          loc})
           * !N0{
           *   "cluster" isRecursive()(+d "rec",) +d
           *   2[ +1 "entry" +d entries(entry)(+1 "and" +d) ]
           *   2[ +1 "inner" +d inners(inner)(+1 "and" +d) ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({entryFunctions:entry entries,
           *          innerFunctions:inner inners,
           *          isRecursive,
           *          loc})
           * !N0{
           *   "cluster" isRecursive()(+d "rec",) +d
           *   2[ +1 "entry" +d entries(entry)(+1 "and" +d) ]
           *   2[ +1 "inner" +d inners(inner)(+1 "and" +d) ]
           * }
           *)
          CCCLUSTER of
          {
           entryFunctions : funDecl list,
           innerFunctions : funDecl list,
           isRecursive : bool,
           loc : loc
          }
        | (*%
           * @format({btvEnv,
           *          entryFunctions:entry entries,
           *          innerFunctions:inner inners,
           *          isRecursive,
           *          loc})
           * !N0{
           *   "POLY["
           *   2[
           *     1 "cluster" isRecursive()(+d "rec",) +d
           *     2[ +1 "entry" +d entries(entry)(+1 "and" +d) ]
           *     2[ +1 "inner" +d inners(inner)(+1 "and" +d) ]
           *   ]
           *   1 "]"
           * }
           *)
          (*%
           * @prefix typed
           * @format({btvEnv,
           *          entryFunctions:entry entries,
           *          innerFunctions:inner inners,
           *          isRecursive,
           *          loc})
           * !N0{
           *   "[" btvEnv "."
           *   2[
           *     1 "cluster" isRecursive()(+d "rec",) +d
           *     2[ +1 "entry" +d entries(entry)(+1 "and" +d) ]
           *     2[ +1 "inner" +d inners(inner)(+1 "and" +d) ]
           *   ]
           *   1 "]"
           * }
           *)
          CCPOLYCLUSTER of
          {
           btvEnv : btvEnv,
           entryFunctions : funDecl list,
           innerFunctions : funDecl list,
           isRecursive : bool,
           loc : loc
          }
        | (*%
           * @format({funDecl, attributes, loc})
           * !N0{
           *   "cluster"
           *   2[ +1 attributes ]
           *   2[ +1 "entry" +d funDecl ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({funDecl, attributes, loc})
           * !N0{
           *   "cluster"
           *   2[ +1 attributes ]
           *   2[ +1 "entry" +d funDecl ]
           * }
           *)
          CCCALLBACKCLUSTER of
          {
           funDecl : funDecl,
           attributes : ffiAttributes,
           loc : loc
          }

 withtype funDecl =
          (*%
           * @format({funVar, argVarList: arg args:listWithEnclosureOne,
           *          bodyExp, loc})
           * { funVar +d args(arg)("," +2, "{", "}") +d "=" }
           * 2[ +1 bodyExp ]
           *)
          (*%
           * @prefix typed
           * @format({funVar, argVarList: arg args,
           *          bodyExp, loc})
           * { funVar +1 "{" !N0{ args(arg)("," +2) } "}" +d "=" }
           * 2[ +1 bodyExp ]
           *)
          {
            funVar : varInfo,
            argVarList : varInfo list,
            bodyExp : ccexp,
            loc:loc
          }
  and codeDecl =
          (*%
           * @format({funVar, argVarList: arg args:listWithEnclosureOne,
           *          bodyExp, loc})
           * { funVar +d args(arg)("," +2, "{", "}") +d "=" }
           * 2[ +1 bodyExp ]
           *)
          (*%
           * @prefix typed
           * @format({funVar, argVarList: arg args,
           *          bodyExp, loc})
           * { funVar +1 "{" !N0{ args(arg)("," +2) } "}" +d "=" }
           * 2[ +1 bodyExp ]
           *)
          {
            funVar : varInfo,
            argVarList : varInfo list,
            bodyExp : ccexp,
            loc:loc
          }

end

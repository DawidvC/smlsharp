(**
 * @copyright (c) 2006, Tohoku University.
 * @author Atsushi Ohori 
 * @version $Id: RecordCalc.ppg,v 1.35 2008/08/06 17:23:40 ohori Exp $
 *)
structure RecordCalc = struct

 structure BT = BasicTypes
 type loc = Loc.loc

 (*%
  * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
  *)
 type ffiAttributes = Absyn.ffiAttributes
        
 (*%
  * @params(btvEnv)
  * @formatter(tyformat) Types.format_ty
  *)
 type ty = 
  (*%
   * @format(ty:tyformat) ty()(btvEnv)
   *)
     Types.ty

 (*%
  * @formatter(absyntvar) Absyn.format_tvar
  *)
  type tvar = 
    (*%
    * @format(tvar:absyntvar) tvar
    *)
    Absyn.tvar 

 (*% 
  * @params(btvEnv)
  * @formatter(tyConFormat) Types.format_tyCon
  *)
 type tyCon = 
    (*%
     * @format(tyCon:tyConFormat) tyCon()(btvEnv)
     *)
    Types.tyCon

 (*%
  * @formatter(conInfoFormat) Types.format_conInfoName
  *)
 type conInfo =  
     (*%
      * @format(value:conInfoFormat) value
      *)
     Types.conInfo

 (*%
  * @formatter(exnInfoFormat) Types.format_exnInfoName
  *)
 type exnInfo =  
     (*%
      * @format(value:exnInfoFormat) value
      *)
     Types.exnInfo

 (*% 
  * @params(btvEnv)
  * @formatter(typesValIdent) Types.format_valIdent
 *)
 type valIdent = 
     (*%
      * @format(id:typesValIdent) id()(btvEnv)
      *)
     Types.valIdent
 (*% 
  * @formatter(LocalVarID.id) LocalVarID.format_id
  *)
 type id = 
     (*%
      * @format(id) id
      *)
      LocalVarID.id
 (*% 
  * @params(btvEnv)
  * @formatter(typesValdInfo) Types.format_varIdInfo
  *)
 type varIdInfo = 
     (*%
      * @format(id:typesValdInfo) id()(btvEnv)
      *)
      Types.varIdInfo

 (*%
  * @params(btvEnv)
  *)
 type varIdInfoWithType = 
     (*%
      * @format({id,displayName,ty:ty}) R0{displayName "<" id ">" ":" ty()(btvEnv)}
      *)
     {id:id,displayName:string, ty:ty}

 local
   fun format_types_primInfo x = Types.format_primInfo nil x
   fun format_types_oprimInfo x = Types.format_oprimInfo nil x
 in
 (*% @formatter(Types.primInfo) format_types_primInfo *)
  type primInfo = Types.primInfo
 (*% @formatter(Types.oprimInfo) format_types_oprimInfo *)
  type oprimInfo = Types.oprimInfo
 end

 (*%
  * @params(btvEnv)
  * @formatter(btvKindFormat) Types.format_btvKind
  *)
 type btvKind = 
     (*%
      * @format(value:btvKindFormat) value()(btvEnv)
      *)
      Types.btvKind

(*
OHORI: Why this is needed?
 (*% 
  * @formatter(MultipleValueCalc.mvdecl) MultipleValueCalc.format_mvdecl
  *)
 type mvdecl = 
     (*%
      * @format(dec) dec
      *)
      MultipleValueCalc.mvdecl
*)

 datatype constant =  datatype ConstantTerm.constant

(*%
 * @params(btvEnv)
 *
 * @formatter(enclosedListIfMoreThanOne) SmlppgUtil.formatListWithEnclosureIfMoreThanOne
 * @formatter(prependedOpt) SmlppgUtil.formatPrependedOpt
 * @formatter(formatConst) ConstantTerm.format_constant
 * @formatter(formatListWithEnclosure) SmlppgUtil.formatListWithEnclosure
 * @formatter(formatListWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
 * @formatter(genericSmapExp) SmlppgUtil.formatGenericSmapExp
 * @formatter(imap) SmlppgUtil.formatImap
 * @formatter(createBtvKindMap) Types.createBtvKindMap
 * @formatter(formatUInt32) BasicTypeFormatters.format_UInt32
 *)
 datatype rcexp 
   = 
     (*%
      * @format
      *   ({funExp:exp1, 
      *     funTy,
      *     instTyList:ty tys:formatListWithEnclosure, 
      *     argExpList:exp2 exps2:formatListWithEnclosure, 
      *     argTyList:argTy argTys,
      *     attributes,
      *     loc
      *     })
      * L10{
      *      "("
      *          attributes + exp1()(btvEnv)
      *          2[ +2 ":" +d !N0{tys(ty()(btvEnv))(",","{","}")} ]
      *      ")" +1
      *      {exps2(exp2()(btvEnv))(","1,"(",")")}
      *    }
      *)
      RCFOREIGNAPPLY of 
        {
          funExp : rcexp, 
          funTy: ty,
	  instTyList:ty list,
	  argExpList:rcexp list, 
	  argTyList : ty list, 
          attributes : ffiAttributes,
	  loc: loc
        }
   | (*%
      * @format({funExp,
      *          argTyList: argTy argTys:formatListWithEnclosure, resultTy,
      *          attributes, loc})
      * L10{ "CALLBACK(" funExp()(btvEnv) 
      *       +1 ":" + {argTys(argTy()(btvEnv))(","+2,"{","}") +2
      *         "->" +2 resultTy()(btvEnv)}
      * ")" }
      *)
     RCEXPORTCALLBACK of 
       {
         funExp : rcexp,  (* must be RCFNM *)
	 argTyList : ty list,
	 resultTy : ty,
         attributes : ffiAttributes,
         loc: loc
       }
   | (*%
      * @format(ty * loc)
      * "_sizeof(" ty()(btvEnv) ")"
      *)
     RCSIZEOF of ty * loc
   | (*%
      * @format(const:formatConst * loc) const
      *)
     RCCONSTANT of constant * loc
   | (*%
      * @format(name * gk * ty * loc) {name}
      *)
     RCGLOBALSYMBOL of string * Absyn.globalSymbolKind * ty * loc
   | (*%
      * @format(id * loc) id()(btvEnv)
      *)
     RCVAR of varIdInfo * loc
(*
   | (*%
      * @format(arrayindex : formatUInt32 * offset * ty * loc) 
      * "GetGlobalValue(" arrayindex "," offset ")"
      *)
     RCGETGLOBALVALUE of BT.UInt32 * int * ty * loc
*)
   | (*%
      * @format(array * offset * elementtype * loc)
      * "arraySub(" array()(btvEnv) "," offset ")"
      *)
     RCGETFIELD of rcexp * int * ty * loc
   | (*%
      * @format({sizeExp:exp1, initExp:exp2, elementTy:ty1, resultTy:ty2, loc:loc}) 
       !N0 {ty1()(btvEnv) "[" 2[1 exp1()(btvEnv) ] 1"]" "{" exp2()(btvEnv) "}"
           }
      *)
     (** ty1[e] : ty2  *)
     RCARRAY of
       {
        sizeExp : rcexp,
        initExp : rcexp,
        elementTy : ty ,
        resultTy : ty,
        loc :loc
        }
   | (*%
      * @format({primOp:prim, instTyList:ty tys:formatListWithEnclosure, argExpOpt:exp opt, loc:loc}) 
        R1{d prim + opt(exp()(btvEnv))}
     *)
     (*
        R1{d {prim !N0{tys(ty()(btvEnv))(",","{","}")} opt(exp()(btvEnv))}}
      *)
     RCPRIMAPPLY of {primOp:primInfo, instTyList:ty list, argExpOpt:rcexp option, loc:loc}
   | (*%
      * @format({oprimOp:oprim,instances:ty tys:formatListWithEnclosure, argExpOpt:exp opt,loc:loc}) 
     *)
     (*
        R1{d oprim exp()(btvEnv))}
      *)
     RCOPRIMAPPLY of {oprimOp:oprimInfo, instances:ty list, argExpOpt:rcexp option, loc:loc}
   | (*%
      * @format({con:con, instTyList:ty tys:formatListWithEnclosure, argExpOpt:exp opt, loc:loc}) 
         R1{d con 2[+1 opt(exp()(btvEnv))]}
      *)
     (*
         R1{d {con !N0{tys(ty()(btvEnv))(",","{","}")} + {opt(exp()(btvEnv))}}}
      *)
     RCDATACONSTRUCT of {con:conInfo, instTyList:ty list, argExpOpt:rcexp option,loc:loc}
   | (*%
      * @format({exn:exn, instTyList:ty tys:formatListWithEnclosure, argExpOpt:exp opt, loc:loc}) 
         R1{d exn 2[+1 opt(exp()(btvEnv))]}
      *)
     (*
         R1{d {exn !N0{tys(ty()(btvEnv))(",","{","}")} + {opt(exp()(btvEnv))}}}
      *)
     RCEXNCONSTRUCT of {exn:exnInfo, instTyList:ty list, argExpOpt:rcexp option,loc:loc}
   | (*%
      * @format({funExp:exp1, funTy:ty, argExpList:exp2 exps:enclosedListIfMoreThanOne, loc:loc})
      * L10{ exp1()(btvEnv) 
         2[1 exps(exp2()(btvEnv))(","+2, "{", "}")] 
           }
      *)
      (*
         ty is the type of the function
      *) 
     RCAPPM of {funExp:rcexp,funTy:ty, argExpList:rcexp list,loc:loc}
   | (*%
      * @format({binds:bind binds, bodyExp:exp, loc:loc})
      *          !N0{ {"bind" 2[ +1 binds(bind)( +1) ]}  +1
      *               {"in" 2[ +2 exp()(btvEnv) ] +2
      *              "end"} }
      * @format:bind(id * exp)
      * id()(btvEnv) +d "=" +2 {exp()(btvEnv)}
      *)
     RCMONOLET of {binds:(varIdInfo * rcexp) list, bodyExp:rcexp, loc:loc}
   | (*%
      * @format(dec decs * exp exps * ty tys * loc)
      *          !N0{ {"let" 2[ +1 decs(dec()(btvEnv))( +1) ]}  +1
      *               {"in" 2[ +2 exps(exp()(btvEnv))( +3 ) ] +2
      *                 "end"} }
      *)
     RCLET of rcdecl list * rcexp list * ty list * loc
   | (*%
      * @format({fields:records, recordTy:ty, loc:loc}) records()(btvEnv)
      *)
     RCRECORD of {fields:fields, recordTy:ty,loc:loc}
   | (*%
      * @format({label:selector, exp:exp, expTy:ty, resultTy, loc:loc})
      * L10{"#"{selector} + {exp()(btvEnv)}}
      *)
     RCSELECT of {label:string, exp:rcexp, expTy:ty, resultTy:ty, loc:loc}
   | (*%
      * @format({label:label,recordExp:exp1, recordTy:ty1, elementExp:exp2, elementTy:ty2, loc:loc})
      *   !N0 { "MODIFY(" exp1()(btvEnv) "," + label "," + exp2()(btvEnv) ")"
      }
      *)
     RCMODIFY of 
      {
       label:string, 
       recordExp:rcexp, 
       recordTy:ty, 
       elementExp:rcexp, 
       elementTy:ty, 
       loc:loc
       }
   | (*%
      * @format(exp * ty * loc)
      * N0{ "raise" +d {exp()(btvEnv)} }
      *)
     RCRAISE of rcexp * ty * loc
   | (*%
      * @format({exp:exp1, exnVar:id, handler:exp2, loc:loc})
                 "handle" + N0{exp1()(btvEnv)} +d 
                 "with letexp" +  id()(btvEnv)  + "in" + {exp2()(btvEnv)}
      *)
      (*
      * handle (exp1, x, exp2) 
	   exp1 the expression to be evaluated normally
	   x variable to received exception value 
	   exp2 the handler body using x 
      *)
     RCHANDLE of {exp:rcexp, exnVar:varIdInfo, handler:rcexp, loc:loc}
   | (*%
      * @format({exp:exp1,
                 expTy:ty, 
                 ruleList:rule rules, 
                 defaultExp:exp2,
                 loc:loc})
          L0{"case" 
                 2[ +d exp1()(btvEnv) ]
		 2[ +1 "of" ] 
		 + {rules(rule)(~2[ +1 "|" ]+)}
		 2[ +1 " | _ =>"  + {exp2()(btvEnv)} ] }
      * @format:rule(con * id opt * exp)
      * con + opt(id()(btvEnv)) + "=>" +1{exp()(btvEnv)}
      *)
     RCCASE of 
       {
        exp:rcexp,
        expTy:ty,
        ruleList:(conInfo * varIdInfo option * rcexp) list,
        defaultExp:rcexp,
        loc:loc
        }
   | (*%
      * @format({exp:exp1,
                 expTy:ty, 
                 ruleList:rule rules, 
                 defaultExp:exp2,
                 loc:loc})
          L0{"exncase" 
                 2[ +d exp1()(btvEnv) ]
		 2[ +1 "of" ] 
		 + {rules(rule)(~2[ +1 "|" ]+)}
		 2[ +1 " | _ =>"  + {exp2()(btvEnv)} ] }
      * @format:rule(con * id opt * exp)
      * con + opt(id()(btvEnv)) + "=>" +1{exp()(btvEnv)}
      *)
     RCEXNCASE of 
       {
        exp:rcexp,
        expTy:ty,
        ruleList:(exnInfo * varIdInfo option * rcexp) list,
        defaultExp:rcexp,
        loc:loc
        }
   | (*%
      * @format({switchExp:exp1, expTy:ty, branches:rule rules, defaultExp:exp2, loc:loc})
          L0{"switch" 
                 2[ +d exp1()(btvEnv) ]
		 2[ +1 "of" ] 
                     + {rules(rule)(~2[ +1 "|" ]+)}
                 2[+1 " | _ =>"  + {exp2()(btvEnv)}] }
      * @format:rule(const:formatConst * exp) const + "=>" +1{exp()(btvEnv)}
      *)
     (* switch e of ... | c => e ... | _ => e
      *)
     RCSWITCH of
       {
        switchExp:rcexp, 
        expTy:ty, 
        branches:(constant * rcexp) list, 
        defaultExp:rcexp, 
        loc:loc
        }
   | (*%
     * @format({argVarList:id ids:enclosedListIfMoreThanOne, bodyTy:ty, bodyExp:exp,loc:loc}) 
           R1{ "(fn" + {ids(id()(btvEnv))(","+1,"{","}")}  
                     2[ +1 "=>" {exp()(btvEnv)}]
               ")" 
	     }
     *)
     (**
       \lambda(x1,....,xn).e 
     *)
     RCFNM of {argVarList:varIdInfo list, bodyTy:ty, bodyExp: rcexp, loc:loc}
   | (*%
      * @format({btvEnv:btvKind:btvKind imap,
                 argVarList:var vars:enclosedListIfMoreThanOne,
                 bodyTy:ty,
                 bodyExp:exp,
                 loc:loc})
      *         {"[" 2[1  imap:imap(btvKind()(imap:createBtvKindMap()(btvEnv)))  "." +
                          !N0{"fn" + vars(var()(imap:createBtvKindMap()(btvEnv)))(",","{","}")
			         2[+d "=>" +1 {exp()(imap:createBtvKindMap()(btvEnv))}]} 
                       ] 1 
                 "]"}
      *)
      (*
        \forall t.\fn x => e 
      ty is the type of rcexp without type abstraction
      *)
     RCPOLYFNM of 
     {
      btvEnv:btvKind IEnv.map, 
      argVarList:varIdInfo list,
      bodyTy:ty,
      bodyExp:rcexp,
      loc:loc
      }
   | (*%
      * @format({btvEnv:btvKind:btvKind imap,
                 expTyWithoutTAbs:ty,
                 exp:exp,
                 loc:loc})
      *         {"[" 2[1  imap:imap(btvKind()(imap:createBtvKindMap()(btvEnv)))  "." +
			         2[{exp()(imap:createBtvKindMap()(btvEnv))} ] 
                ] 1 "]"}
      *)
      (*
       \forall t.e 
      ty is the type of tpexp without type abstraction
      *)
     RCPOLY of {btvEnv:btvKind IEnv.map, expTyWithoutTAbs:ty, exp:rcexp, loc:loc}
   | (*%
       * @format({exp:exp, expTy:ty1, instTyList:ty2 tys, loc:loc}) 
                 {exp()(btvEnv) 2[1 "(" ty1()(btvEnv) ")"] 2[1 !N0{"{" 2[ 1tys(ty2()(btvEnv))("," +1) ] 1 "}" }]}
      *)
     RCTAPP of {exp:rcexp, expTy:ty, instTyList:ty list, loc:loc}
  | (*%
     * @format({expList:exp exps, expTyList:ty tys, loc:loc})
     * !N0{ "(" 2[ 1 exps(exp()(btvEnv))(";" +1) ] 1 ")" }
     *)
     RCSEQ of {expList:rcexp list, expTyList:ty list, loc:loc}
  | (*%
     * @format({expList:exp exps, listTy:ty, loc:loc})
     * !N0{
     *      "["
     *          2[ 1 exps(exp()(btvEnv))("," +2) ] 1
     *      "]" 
     *      2[ +1 ":" ty()(btvEnv) ]
     *    }
     *)
     RCLIST of {expList:rcexp list, listTy:ty, loc:loc}
  | (*%
     * @format(exp * ty * loc) "cast(" exp()(btvEnv) + "to" + ty()(btvEnv) ")"
     *)
    (*
      cast e to some type ty
      this is used to coerce constructor type to a record type
      *)
    RCCAST of rcexp * ty * loc

 and rcdecl 
   = (*%
      * @format(bind binds * loc)  "val" + {binds(bind)(~4[ +1 "and"] +)}
      * @format:bind(id * exp) {id()(btvEnv)} +d "=" +2 {exp()(btvEnv)}
      *)
     RCVAL of (valIdent * rcexp) list * loc
   | (*%
      * @format(bind binds * loc)
      *  "val rec" +d {binds(bind)(~4[ +1 "and"] +)}
      * @format:bind({var:id, expTy:ty, exp:exp}) 
           {id()(btvEnv) +d "=" +2 {exp()(btvEnv)} }
      *)
     RCVALREC of {var:varIdInfo, expTy:ty, exp:rcexp} list * loc
   | (*%
      * @format(btvKind:btvKind imap * bind binds * loc)
           {"[" 2[1  imap:imap(btvKind()(imap:createBtvKindMap()(btvEnv)))  "." +
                    "val rec" +d {binds(bind)(~4[ +1 "and"] +)} ] "]"}
      * @format:bind({var:id, expTy:ty, exp:exp})
           {id()(imap:createBtvKindMap()(btvEnv)) +d "=" 
	      +2 2[{exp()(imap:createBtvKindMap()(btvEnv))} 
		   ]
		   }
      *)
     RCVALPOLYREC of btvKind IEnv.map * {var:varIdInfo, expTy:ty, exp:rcexp} list * loc
   | (*%
      * @format(localdec localdecs * dec decs * loc)
      *            "local" 2[ +2 localdecs(localdec()(btvEnv))(+d) ] +1
      *            "in" 2[ +2 decs(dec()(btvEnv))(+3) ] +2
      *            "end"
      *)
     RCLOCALDEC of rcdecl list * rcdecl list * loc
   | (*%
      * @format(exp * arrayexp * offset * ty * loc)  
	       "SetField" + arrayexp()(btvEnv) "[" offset "]" "=" exp()(btvEnv) 
      *)
     RCSETFIELD of rcexp * rcexp * int * ty * loc
   | (*%
      * @format(loc) ""
      *)
     RCEMPTY of loc


 withtype fields = 
     (*%
      * @format(exp smap:genericSmapExp) smap(exp()(btvEnv))(+"=" +,"," +1)
      *)
     rcexp SEnv.map

 val format_rcdecl' =  format_rcdecl nil

 (*%
  * @formatter(rcdecl) format_rcdecl'
  *)
 datatype basicBlock =
          (*%
           * @format({code, exnIDSet}) code
           * @format:code(dec decs) 
           *  decs(dec)(+1)
           *)
          RCVALBLOCK of {code : rcdecl list, exnIDSet : ExnTagID.Set.set}
        | (*%
           * @format({name, 
                      actualArgName, 
                      typeResolutionTable,
                      exnTagResolutionTable, 
                      externalVarIDResolutionTable,
                      refreshedExceptionTagTable, 
                      refreshedExternalVarIDTable, 
                      loc})
           * name "(" actualArgName ")"
           *)
          RCLINKFUNCTORBLOCK of {name : string, 
                                 actualArgName : string,
                                 typeResolutionTable : Types.tyBindInfo TyConID.Map.map,
                                 exnTagResolutionTable : ExnTagID.id ExnTagID.Map.map,
                                 externalVarIDResolutionTable : ExternalVarID.id ExternalVarID.Map.map,
                                 refreshedExceptionTagTable : ExnTagID.id ExnTagID.Map.map,
                                 refreshedExternalVarIDTable : ExternalVarID.id ExternalVarID.Map.map,
                                 loc : loc}

 (*%
  *)
 datatype topBlock = 
          (*%
           * @format({name, formalAbstractTypeIDSet, formalVarIDSet, formalExnIDSet, 
                      generativeVarIDSet, generativeExnIDSet, bodyCode:dec decs})
           * "functor" + name +  "=" +d  
           *  "{" +d 3[decs(dec)(+3)] +d "}"
           *)
          RCFUNCTORBLOCK of {name : string, 
                             formalAbstractTypeIDSet : TyConID.Set.set, 
                             formalVarIDSet : ExternalVarID.Set.set,
                             formalExnIDSet : ExnTagID.Set.set,
                             generativeVarIDSet : ExternalVarID.Set.set,
                             generativeExnIDSet : ExnTagID.Set.set,
                             bodyCode : basicBlock list}      
        | (*%
           * @format(info) info
           *)
          RCBASICBLOCK of basicBlock

end

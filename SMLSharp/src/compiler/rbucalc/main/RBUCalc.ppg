(**
 * @copyright (c) 2006, Tohoku University.
 * @author Huu-Duc Nguyen 
 * @version $Id: RBUCalc.ppg,v 1.21 2008/08/06 17:23:40 ohori Exp $
 *)

structure RBUCalc = struct

 type loc = Loc.loc

 (*%
  * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
  *)
 (*%
  * @prefix typed
  * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
  *)
 type ffiAttributes = Absyn.ffiAttributes

 (*%
  * @formatter(RBUTypes.ty) RBUTypes.format_ty
  *)
 (*%
  * @prefix typed
  * @formatter(RBUTypes.ty) RBUTypes.format_ty
  *)
 type ty = RBUTypes.ty

 (*%
  * @formatter(ID.id) ID.format_id
  *)
 (*%
  * @prefix typed
  * @formatter(VarID.id) VarID.format_id
  *)
 type id = VarID.id

 (*%
  * @formatter(Types.varId) Types.format_varId
  *)
 (*%
  * @prefix typed
  * @formatter(Types.varId) Types.format_varId
  *)
 type varId = Types.varId

 (*%
  * @formatter(ExnTagID.id) ExnTagID.format_id
  *)
 (*%
  * @prefix typed
  * @formatter(ExnTagID.id) ExnTagID.format_id
  *)
 type globalTag = ExnTagID.id

 (*%
  * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
  *)
 (*%
  * @prefix typed
  * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
  *)
 datatype constant = datatype ConstantTerm.constant

 (*%
  * @formatter(BasicTypes.UInt32) BasicTypeFormatters.format_UInt32
  *)
 (*%
  * @prefix typed
  * @formatter(BasicTypes.UInt32) BasicTypeFormatters.format_UInt32
  *)
 datatype varKind =
          (*%
           * @format "A"
           *)
          (*%
           * @prefix typed
           * @format "A"
           *)
          ARG
        | (*%
           * @format "LA"
           *)
          (*%
           * @prefix typed
           * @format "LA"
           *)
          LOCALARG
        | (*%
           * @format "L"
           *)
          (*%
           * @prefix typed
           * @format "L"
           *)
          LOCAL
        | (*%
           * @format "F"
           *)
          (*%
           * @prefix typed
           * @format "F"
           *)
          FREE
        | (*%
           * @format({nestLevel, offset})
           *   "F[" nestLevel "," offset "]"
           *)
          (*%
           * @prefix typed
           * @format({nestLevel, offset})
           *   "F[" nestLevel "," offset "]"
           *)
          FREEWORD of {nestLevel: BasicTypes.UInt32, offset: BasicTypes.UInt32}
        | (*%
           * @format(id) "EL[" id "]"
           *)
          (*%
           * @prefix typed
           * @format(id) "EL[" id "]"
           *)
          ENTRYLABEL of id
        | (*%
           * @format(id) "IL[" id "]"
           *)
          (*%
           * @prefix typed
           * @format(id) "IL[" id "]"
           *)
          INNERLABEL of id
        | (*%
           * @format(id * var:varInfo vars)
           * "LC[" id "]" "(" !N0{ vars(var)("," +1) } ")"
           *)
          (*%
           * @format(id * var:varInfo vars)
           * "LC[" id "]" "(" !N0{ vars(var)("," +1) } ")"
           *)
          LOCALCODE of id * varInfo list
        | (*%
           * @format "G" 
           *)
          (*%
           * @prefix typed
           * @format "G"
           *)
          EXTERNAL 

 withtype varInfo = 
      (*%
       * @format({varId, displayName, ty, varKind: kind kref})
       * L1{ displayName 1 ":" d kref(kind) }
       *)
      (*%
       * @prefix typed
       * @format({varId, displayName, ty, varKind: kind kref})
       * L1{ L1{ displayName 1 ":" d varId 1 ":" d kref(kind) }
       *     +1 ":" +d ty }
       *)
      {varId : varId, displayName : string, ty : ty, varKind : varKind ref}

 (*
  * formatter precedence:
  * L9 { x [ ] }    field selection
  * L8 { x y }      application
  *
  * L2 { x : y }    type annotation (see also AnnotatedTypes)
  * N1 { }          let, raise, switch, handle, etc.
  * R1 { x => y }   abstraction
  *
  * Precedence 0 is reserved for cut.
  * Use +1 for separating declarations.
  * Be careful of usage of guard so that the above +1 works fine.
  *)

 (*%
  * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
  * @formatter(listWithEnclosure) SmlppgUtil.formatListWithEnclosure
  * @formatter(optionWithPrefix) SmlppgUtil.formatPrependedOpt
  * @formatter(bool) SmlppgUtil.formatBinaryChoice
  * @formatter(BasicTypes.UInt32) BasicTypeFormatters.format_UInt32
  * @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
  *)
 (*%
  * @prefix typed
  * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
  * @formatter(listWithEnclosure) SmlppgUtil.formatListWithEnclosure
  * @formatter(optionWithPrefix) SmlppgUtil.formatPrependedOpt
  * @formatter(bool) SmlppgUtil.formatBinaryChoice
  * @formatter(BasicTypes.UInt32) BasicTypeFormatters.format_UInt32
  * @formatter(BuiltinPrimitive.primitive) BuiltinPrimitive.format_primitive
  *)
 datatype rbuexp =
          (*%
           * @format({funExp,
           *          argExpList: arg args:listWithEnclosureOne,
           *          argTyList: argTy argTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          resultTyList: retTy retTys:listWithEnclosureOne,
           *          attributes,
           *          loc:loc})
           * L9{
           *   "FOREIGNAPPLY(" !N0{ funExp } ")"
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({funExp,
           *          argExpList: arg args:listWithEnclosureOne,
           *          argTyList: argTy argTys:listWithEnclosureOne,
           *          resultTyList: retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          attributes,
           *          loc:loc})
           * L9{
           *   L2{
           *     "FOREIGNAPPLY(" !N0{ funExp } ")"
           *     +1 "as" +d R2{ argTys(argTy)("," +1, "{", "}")
           *                    +1 "->" +d retTys(retTy)("," +1, "{", "}") }
           *   }
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          RBUFOREIGNAPPLY of 
          {
           funExp : rbuexp,
           argExpList : rbuexp list,
           argTyList : ty list,
           argSizeExpList : rbuexp list,
           resultTyList : ty list,
           attributes : ffiAttributes,
           loc : loc
          }
        | (*%
           * @format({codeExp, envExp,
           *          argTyList: argTy argTys:listWithEnclosureOne,
           *          resultTyList: retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          resultSizeExpList,
           *          attributes,
           *          loc})
           * "CALLBACKCLOSURE(" !N0{ codeExp "," +1 envExp } ")"
           *)
          (*%
           * @prefix typed
           * @format({codeExp, envExp,
           *          argTyList: argTy argTys:listWithEnclosureOne,
           *          resultTyList: retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          resultSizeExpList,
           *          attributes,
           *          loc})
           * L2{
           *   "CALLBACKCLOSURE(" !N0{ codeExp "," +1 envExp } ")"
           *   +1 "as" +d R2{ argTys(argTy)("," +1, "{", "}")
           *                  +1 "->" +d retTys(retTy)("," +1, "{", "}") }
           * }
           *)
          RBUCALLBACKCLOSURE of
          {
            codeExp : rbuexp,
            envExp : rbuexp,
            argSizeExpList : rbuexp list,
            resultSizeExpList : rbuexp list,
            argTyList : ty list,
            resultTyList : ty list,
            attributes : ffiAttributes,
            loc : loc
          }

        | (*%
           * @format({value, loc}) value
           *)
          (*%
           * @prefix typed
           * @format({value, loc}) value
           *)
          RBUCONSTANT of {value : constant, loc : loc}
        | (*%
           * @format({name, kind, ty, loc}) name ":" ty
           *)
          (*%
           * @prefix typed
	   * @format({name, kind, ty, loc}) ty
           *)
	  RBUGLOBALSYMBOL of {name:string, kind:Absyn.globalSymbolKind, ty:ty, loc:loc}
        | (*%
           * @format({tagValue, displayName, loc}) "EXNTAG(" tagValue ")"
           *)
          (*%
           * @prefix typed
           * @format({tagValue, displayName, loc}) "EXNTAG(" tagValue ")"
           *)
          RBUEXCEPTIONTAG of {tagValue : globalTag, displayName : string, loc : loc}
        | (*%
           * @format({varInfo, valueSizeExp, loc}) varInfo
           *)
          (*%
           * @prefix typed
           * @format({varInfo, valueSizeExp, loc})
           * L2{ varInfo +1 "/" +d valueSizeExp }
           *)
          RBUVAR of {varInfo : varInfo, valueSizeExp: rbuexp, loc : loc}
        | (*%
           * @format({codeId, loc}) codeId
           *)
          (*%
           * @prefix typed
           * @format({codeId, loc}) codeId
           *)
          RBULABEL of {codeId : id, loc : loc}
        | (*%
           * @format({arrayExp, offsetExp, sizeExp, elementTy, loc})
           * L2{
           *   N1{
           *     "GETFIELD"
           *     2[ +1 L9{ arrayExp 1 "[" !N0{ offsetExp } "]" } ]
           *   }
           *   +1 "/" +d sizeExp
           * }
           *)
          (*%
           * @prefix typed
           * @format({arrayExp, offsetExp, sizeExp, elementTy, loc})
           * L2{
           *   L2{
           *     N1{
           *       "GETFIELD"
           *       2[ +1 L9{ arrayExp 1 "[" !N0{ offsetExp } "]" } ]
           *     }
           *     +1 ":" +d elementTy
           *   }
           *   +1 "/" +d sizeExp
           * }
           *)
          RBUGETFIELD of 
          {
           arrayExp : rbuexp, 
           offsetExp : rbuexp,
           sizeExp : rbuexp,
           elementTy : ty,
           loc : loc
          }
        | (*%
           * @format({arrayExp, offsetExp, valueExp, valueTy, valueSizeExp,
           *          valueTagExp, loc})
           * N1{ !N0{
           *   "SETFIELD"
           *   2[ +1 L9{ arrayExp 1 "[" !N0{ offsetExp } "]"
           *             +1 "/" +d valueSizeExp }
           *      +d ":="
           *      2[ +1 valueExp ] ]
           * } }
           *)
          (*%
           * @prefix typed
           * @format({arrayExp, offsetExp, valueExp, valueTy, valueSizeExp,
           *          valueTagExp, loc})
           * N1{ !N0{
           *   "SETFIELD"
           *   2[ +1 L9{ arrayExp 1 "[" !N0{ offsetExp } "]"
           *             +1 "/" +d valueSizeExp }
           *      +d ":="
           *      2[ +1 valueExp ] ]
           * } }
           *)
          RBUSETFIELD of 
          {
           arrayExp : rbuexp,
           offsetExp : rbuexp,
           valueExp : rbuexp, 
           valueTy : ty,
           valueSizeExp : rbuexp,
           valueTagExp : rbuexp,
           loc: loc
          }
        | (*%
           * @format({consExp, newTailExp, newTailTy, newTailSizeExp,
           *          newTailTagExp, offsetExp, nestLevelExp, loc})  
           * N1{ !N0{
           *   "SETTAIL"
           *   2[ +1 L9{ consExp
           *             1 "[" !N0{ nestLevelExp "," +1 offsetExp } "]"
           *             +1 "/" +d newTailSizeExp }
           *      +d ":="
           *      2[ +1 newTailExp ] ]
           * } }
           *)
          (*%
           * @prefix typed
           * @format({consExp, newTailExp, newTailTy, newTailSizeExp,
           *          newTailTagExp, offsetExp, nestLevelExp, loc})  
           * N1{ !N0{
           *   "SETTAIL"
           *   2[ +1 L9{ consExp
           *             1 "[" !N0{ nestLevelExp "," +1 offsetExp } "]"
           *             +1 "/" +d newTailSizeExp }
           *      +d ":="
           *      2[ +1 newTailExp ] ]
           * } }
           *)
          RBUSETTAIL of 
          {
           consExp : rbuexp, 
           newTailExp : rbuexp, 
           newTailTy : ty,
           newTailSizeExp : rbuexp,
           newTailTagExp : rbuexp,
	   offsetExp :  rbuexp,
           nestLevelExp : rbuexp, 
           loc: loc
          }
        | (*%
           * @format({bitmapExp, sizeExp, initialValue, elementTy,
           *          elementSizeExp, isMutable, loc})
           * N1{
           *   "ARRAY"
           *   isMutable()(+d "mutable",)
           *   2[ 1 "(" !N0{ bitmapExp ";" +2
           *                 sizeExp "," +2
           *                 L2{ initialValue +1 "/" +d elementSizeExp }
           *            } ")" ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({bitmapExp, sizeExp, initialValue, elementTy,
           *          elementSizeExp, isMutable, loc})
           * N1{
           *   "ARRAY"
           *   isMutable()(+d "mutable",)
           *   2[ 1 "(" !N0{ bitmapExp ";" +2
           *                 sizeExp "," +2
           *                 L2{ initialValue +1 "/" +d elementSizeExp }
           *            } ")" ]
           * }
           *)
          RBUARRAY of 
          {
           bitmapExp : rbuexp,
           sizeExp : rbuexp, 
           initialValue : rbuexp, 
           elementTy : ty,
           elementSizeExp : rbuexp,
           isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({srcExp, srcOffsetExp, dstExp, dstOffsetExp, lengthExp,
           *          elementTy, elementSizeExp, elementTagExp, loc})
           * N1{
           * "COPYARRAY"
           * 2[ 1 "(" !N0{
           *   srcExp "," +2
           *   srcOffsetExp "," +2
           *   dstExp "," +2
           *   dstOffsetExp "," +2
           *   lengthExp
           * } ")" ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({srcExp, srcOffsetExp, dstExp, dstOffsetExp, lengthExp,
           *          elementTy, elementSizeExp, elementTagExp, loc})
           * N1{
           * "COPYARRAY"
           * 2[ 1 "(" !N0{
           *   srcExp "," +2
           *   srcOffsetExp "," +2
           *   dstExp "," +2
           *   dstOffsetExp "," +2
           *   lengthExp
           * } ")" ]
           * }
           *)
          RBUCOPYARRAY of 
          {
           srcExp : rbuexp,
           srcOffsetExp : rbuexp,
           dstExp : rbuexp,
           dstOffsetExp : rbuexp,
           lengthExp : rbuexp,
           elementTy : ty,
           elementSizeExp : rbuexp,
           elementTagExp : rbuexp,
           loc: loc
          }
        | (*%
           * @format({prim,
           *          argExpList:arg args,
           *          argTyList,
           *          argSizeExpList,
           *          resultTyList,
           *          instSizeExpList:sz szs:listWithEnclosure,
           *          instTagExpList:tag tags:listWithEnclosure,
           *          loc
           *          }
           *         )
           * L9{ prim
           *     2[ 1 "(" !N0{ tags(tag)("," +2, "<", ">" "," +1) }
           *              !N0{ szs(sz)("," +2, "|", "|" "," +1) }
           *              !N0{ args(arg)("," +2) } ")"
           *      ] }
           *)
          (*%
           * @prefix typed
           * @format({prim,
           *          argExpList:arg args,
           *          argTyList,
           *          argSizeExpList,
           *          resultTyList,
           *          instSizeExpList:sz szs:listWithEnclosure,
           *          instTagExpList:tag tags:listWithEnclosure,
           *          loc
           *          }
           *         )
           * L9{ prim
           *     2[ 1 "(" !N0{ tags(tag)("," +2, "<", ">" "," +1)
           *              !N0{ szs(sz)("," +2, "|", "|" "," +1)
           *              !N0{ args(arg)("," +2) } } } ")"
           *      ] }
           *)
          RBUPRIMAPPLY of 
          {
           prim : BuiltinPrimitive.primitive, 
           argExpList : rbuexp list,
           argSizeExpList : rbuexp list,
           argTyList : ty list,
           resultTyList : ty list,
	   instSizeExpList : rbuexp list,
	   instTagExpList : rbuexp list,
           loc : loc
          }
        | (*%
           * @format({funExp,
           *          argExpList:arg args:listWithEnclosureOne,
           *          argTyList:argTy argTys:listWithEnclosureOne,
           *          resultTyList:retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          loc})
           * L9{
           *   funExp
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({funExp,
           *          argExpList:arg args:listWithEnclosureOne,
           *          argTyList:argTy argTys:listWithEnclosureOne,
           *          resultTyList:retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          loc})
           * L9{
           *   L2{
           *     funExp 
           *     +1 ":" +d R2{ argTys(argTy)("," +1, "{", "}")
           *                   +1 "->" +d retTys(retTy)("," +1, "{", "}") }
           *   }
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          RBUAPPM of 
          {
           funExp : rbuexp, 
           argExpList : rbuexp list,
           argTyList : ty list,
           argSizeExpList : rbuexp list,
           resultTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({funLabel,
           *          argVarList,
           *          argExpList:arg args:listWithEnclosureOne,
           *          argTyList:argTy argTys:listWithEnclosureOne,
           *          resultTyList:retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          loc})
           * L9{
           *   "LOCALAPP(" !N0{ funLabel } ")"
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({funLabel,
           *          argVarList,
           *          argExpList:arg args:listWithEnclosureOne,
           *          argTyList:argTy argTys:listWithEnclosureOne,
           *          resultTyList:retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          loc})
           * L9{
           *   L2{
           *     "LOCALAPP(" !N0{ funLabel } ")"
           *     +1 ":" +d R2{ argTys(argTy)("," +1, "{", "}")
           *                   +1 "->" +d retTys(retTy)("," +1, "{", "}") }
           *   }
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          RBULOCALAPPM of 
          {
           funLabel : id, 
	   argVarList : varInfo list,
           argExpList : rbuexp list,
           argTyList : ty list,
           argSizeExpList : rbuexp list,
           resultTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({codeExp,
           *          argExpList:arg args:listWithEnclosureOne,
           *          argTyList:argTy argTys:listWithEnclosureOne,
           *          resultTyList:retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          loc})
           * L9{
           *   "RECCALL(" !N0{ codeExp } ")"
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({codeExp,
           *          argExpList:arg args:listWithEnclosureOne,
           *          argTyList:argTy argTys:listWithEnclosureOne,
           *          resultTyList:retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          loc})
           * L9{
           *   L2{
           *     "RECCALL(" !N0{ codeExp } ")"
           *     +1 ":" +d R2{ argTys(argTy)("," +1, "{", "}")
           *                   +1 "->" +d retTys(retTy)("," +1, "{", "}") }
           *   }
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          RBURECCALL of 
          {
           codeExp : rbuexp, 
           argExpList : rbuexp list,
           argTyList : ty list,
           argSizeExpList : rbuexp list,
           resultTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({codeExp,
           *          argExpList:arg args:listWithEnclosureOne,
           *          argTyList:argTy argTys:listWithEnclosureOne,
           *          resultTyList:retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          loc})
           * L9{
           *   "INNERCALL(" !N0{ codeExp } ")"
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({codeExp,
           *          argExpList:arg args:listWithEnclosureOne,
           *          argTyList:argTy argTys:listWithEnclosureOne,
           *          resultTyList:retTy retTys:listWithEnclosureOne,
           *          argSizeExpList,
           *          loc})
           * L9{
           *   L2{
           *     "INNERCALL(" !N0{ codeExp } ")"
           *     +1 ":" +d R2{ argTys(argTy)("," +1, "{", "}")
           *                   +1 "->" +d retTys(retTy)("," +1, "{", "}") }
           *   }
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          RBUINNERCALL of 
          {
           codeExp : rbuexp, 
           argExpList : rbuexp list,
           argTyList : ty list,
           argSizeExpList : rbuexp list,
           resultTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({localDeclList : dec decs, mainExp, loc})
           * N1{ !N0{
           *   "let"
           *   2[ +1 decs(dec)(+1) ]
           *   +1 "in"
           *   2[ +1 mainExp ]
           *   +1 "end"
           * } }
           *)
          (*%
           * @prefix typed
           * @format({localDeclList : dec decs, mainExp, loc})
           * N1{ !N0{
           *   "let"
           *   2[ +1 decs(dec)(+1) ]
           *   +1 "in"
           *   2[ +1 mainExp ]
           *   +1 "end"
           * } }
           *)
          RBULET of
          {
           localDeclList : rbudecl list,
           mainExp : rbuexp,
           loc : loc
          }
        | (*%
           * @format({expList:field fields, tyList, sizeExpList, loc})
           * { "{" 2[ 1 !N0{ fields(field)("," +1) } ] 1 "}" }
           *)
          (*%
           * @prefix typed
           * @format({expList:field fields, tyList, sizeExpList, loc})
           * { "{" 2[ 1 !N0{ fields(field)("," +1) } ] 1 "}" }
           *)
          RBUMVALUES of {expList : rbuexp list, tyList : ty list,
                         sizeExpList : rbuexp list, loc : loc}
        | (*%
           * @format({bitmapExp, 
           *          totalSizeExp,
           *          fieldList:field fields, 
           *          fieldTyList:ty tys,
           *          fieldSizeExpList:size sizes,
	   *          isMutable,
           *          loc
           *         }) 
           * L2{
           *   !N0{ "(" 2[ 1 totalSizeExp ";"
           *              +1 fields(field)("," +1) ] 1 ")" }
           *   +1 "/" +d "(" !N0{ sizes(size)("," +1) } ")"
           * }
           *)
          (*%
           * @prefix typed
           * @format({bitmapExp, 
           *          totalSizeExp,
           *          fieldList:field fields, 
           *          fieldTyList:ty tys,
           *          fieldSizeExpList:size sizes,
	   *          isMutable,
           *          loc
           *         }) 
           * L2{
           *   !N0{ "(" 2[ 1 totalSizeExp ";"
           *              +1 fields(field)("," +1) ] 1 ")" }
           *   +1 ":" +d "(" !N0{ tys(ty)("," +1) } ")"
           *   +1 "/" +d "(" !N0{ sizes(size)("," +1) } ")"
           * }
           *)
          RBURECORD of 
          {
           bitmapExp : rbuexp,
           totalSizeExp : rbuexp,
           fieldList : rbuexp list,
           fieldTyList : ty list,
           fieldSizeExpList : rbuexp list,
	   isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({bitmapExp, 
           *          totalSize,
           *          fieldList:field fields, 
           *          fieldTyList:ty tys,
           *          fieldSizeExpList:size sizes,
           *          fixedSizeList,
           *          loc
           *         }) 
           * L2{
           *   !N0{ "ENV(" 2[ 1 totalSize ";"
           *                 +1 fields(field)("," +1) ] 1 ")" }
           *   +1 "/" +d "(" !N0{ sizes(size)("," +1) } ")"
           * }
           *)
          (*%
           * @prefix typed
           * @format({bitmapExp, 
           *          totalSize,
           *          fieldList:field fields, 
           *          fieldTyList:ty tys,
           *          fieldSizeExpList:size sizes,
           *          fixedSizeList,
           *          loc
           *         }) 
           * L2{
           *   !N0{ "ENV(" 2[ 1 totalSize ";"
           *                 +1 fields(field)("," +1) ] 1 ")" }
           *   +1 ":" +d "(" !N0{ tys(ty)("," +1) } ")"
           *   +1 "/" +d "(" !N0{ sizes(size)("," +1) } ")"
           * }
           *)
          RBUENVRECORD of 
          {
           bitmapExp : rbuexp,
           totalSize : BasicTypes.UInt32,
           fieldList : rbuexp list,
           fieldTyList : ty list,
           fieldSizeExpList : rbuexp list,
           fixedSizeList : BasicTypes.UInt32 list,
           loc : loc
          }
        | (*%
           * @format({recordExp, nestLevelExp, offsetExp, sizeExp,
           *          fieldTy, loc})
           * L9{ recordExp
           *     2[ 1 "[" !N0{ nestLevelExp "," +1 offsetExp } "]"
           *        +1 "/" +d sizeExp ] }
           *)
          (*%
           * @prefix typed
           * @format({recordExp, nestLevelExp, offsetExp, sizeExp,
           *          fieldTy, loc})
           * L2{
           *   L9{ recordExp
           *       2[ 1 "[" !N0{ nestLevelExp "," +1 offsetExp } "]"
           *          +1 "/" +d sizeExp ] }
           *   +1 ":" +d fieldTy
           * }
           *)
          RBUSELECT of 
          {
           recordExp : rbuexp, 
           nestLevelExp : rbuexp, 
           offsetExp : rbuexp,
           sizeExp : rbuexp,
           fieldTy : ty,
           loc : loc
          }
        | (*%
           * @format({recordExp, nestLevelExp, offsetExp, valueExp, valueTy, 
           *          valueSizeExp, valueTagExp, loc})
           * L9{
           *   recordExp
           *   2[ +1 "#" +d
           *      !N0{ "{"
           *        2[ 1 L2{ "[" !N0{ nestLevelExp "," +1 offsetExp } "]"
           *                 +1 "/" +d valueSizeExp }
           *          +d "="
           *          +1 valueExp ]
           *        1 "}" } ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({recordExp, nestLevelExp, offsetExp, valueExp, valueTy, 
           *          valueSizeExp, valueTagExp, loc})
           * L9{
           *   recordExp
           *   2[ +1 "#" +d
           *      !N0{ "{"
           *        2[ 1 L2{ "[" !N0{ nestLevelExp "," +1 offsetExp } "]"
           *                 +1 "/" +d valueSizeExp }
           *          +d "="
           *          2[ +1 valueExp ] ]
           *        1 "}" } ]
           * }
           *)
          RBUMODIFY of 
          {
           recordExp : rbuexp, 
           nestLevelExp : rbuexp,
           offsetExp : rbuexp,
           valueExp : rbuexp,
           valueTy : ty,
           valueSizeExp : rbuexp,
           valueTagExp : rbuexp,
           loc : loc
          }
        | (*%
           * @format({argExp, loc})
           * N1{ "raise" 2[ +1 argExp ] }
           *)
          (*%
           * @prefix typed
           * @format({argExp, loc})
           * N1{ "raise" 2[ +1 argExp ] }
           *)
          RBURAISE of
          {
           argExp : rbuexp,
           loc : loc
          }
        | (*%
           * @format({exp, exnVar, handler, loc})
           * N1{ !N0{
           *   "try"
           *   2[ +1 exp ]
           *   +1 R1{ "handle" +d !N0{ exnVar } +d "=>" 2[ +1 handler ] }
           * } }
           *)
          (*%
           * @prefix typed
           * @format({exp, exnVar, handler, loc})
           * N1{ !N0{
           *   "try"
           *   2[ +1 exp ]
           *   +1 R1{ "handle" +d !N0{ exnVar } +d "=>" 2[ +1 handler ] }
           * } }
           *)
          RBUHANDLE of
          {
           exp : rbuexp,
           exnVar : varInfo,
           handler : rbuexp,
           loc : loc
          }
        | (*%
           * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
           * N1{ !N0{
           *   { "switch" 2[ +1 switchExp ] }
           *   +1 "of" +d rules(rule)(+1 " |" +d)
           *   +1 " |" +d R1{ "_" +d "=>" +1 defaultExp }
           * } }
           *
           * @format:rule({constant, exp})
           * R1{ constant +d "=>" +1 exp }
           *)
          (*%
           * @prefix typed
           * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
           * N1{ !N0{
           *   { "switch" 2[ +1 switchExp ] }
           *   +1 "of" +d rules(rule)(+1 " |" +d)
           *   +1 " |" +d R1{ "_" +d "=>" +1 defaultExp }
           * } }
           *
           * @format:rule({constant, exp})
           * R1{ constant +d "=>" +1 exp }
           *)
          RBUSWITCH of
          {
           switchExp : rbuexp,
           expTy : ty,
           branches : {constant : rbuexp , exp : rbuexp} list,
           defaultExp : rbuexp,
           loc : loc
          }
        | (*%
           * @format({codeExp, envExp, loc})
           * "CLOSURE(" !N0{ codeExp "," +1 envExp } ")"
           *)
          (*%
           * @prefix typed
           * @format({codeExp, envExp, loc})
           * "CLOSURE(" !N0{ codeExp "," +1 envExp } ")"
           *)
          RBUCLOSURE of {codeExp : rbuexp, envExp : rbuexp, loc : loc}
        | (*%
           * @format({codeExp, loc})
           * "ENTRYCLOSURE(" !N0{ codeExp } ")"
           *)
          (*%
           * @prefix typed
           * @format({codeExp, loc})
           * "ENTRYCLOSURE(" !N0{ codeExp } ")"
           *)
          RBUENTRYCLOSURE of {codeExp : rbuexp, loc : loc}
        | (*%
           * @format({codeExp, loc})
           * "INNERCLOSURE(" !N0{ codeExp } ")"
           *)
          (*%
           * @prefix typed
           * @format({codeExp, loc})
           * "INNERCLOSURE(" !N0{ codeExp } ")"
           *)
          RBUINNERCLOSURE of {codeExp : rbuexp, loc : loc}

      and rbudecl =  
          (*%
           * @format({boundVarList:var vars:listWithEnclosureOne,
           *          sizeExpList, tagExpList,
           *          boundExp, loc})
           * !N0{ "val" +d { vars(var)("," +1, "{", "}") +d "=" }
           *      2[ +1 boundExp ] }
           *)
          (*%
           * @prefix typed
           * @format({boundVarList:var vars:listWithEnclosureOne,
           *          sizeExpList, tagExpList,
           *          boundExp, loc})
           * !N0{ "val" +d { vars(var)("," +1, "{", "}") +d "=" }
           *      2[ +1 boundExp ] }
           *)
          RBUVAL of 
          {
           boundVarList : varInfo list,
           sizeExpList : rbuexp list,
	   tagExpList : rbuexp list,
           boundExp : rbuexp,
           loc : loc
          }
        | (*%
           * @format({frameInfo,
           *          entryFunctions:entry entries,
           *          innerFunctions:inner inners,
           *          isRecursive, hasClosureEnv,
           *          loc})
           * !N0{
           *   "cluster" isRecursive()(+d "rec",) +d
           *   2[ +1 "entry" +d entries(entry)(+1 "and" +d) ]
           *   2[ +1 "inner" +d inners(inner)(+1 "and" +d) ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({frameInfo,
           *          entryFunctions:entry entries,
           *          innerFunctions:inner inners,
           *          isRecursive, hasClosureEnv,
           *          loc})
           * !N0{
           *   "cluster" isRecursive()(+d "rec",) +d
           *   2[ +1 "frameInfo" +d "=" +d frameInfo ]
           *   2[ +1 "entry" +d entries(entry)(+1 "and" +d) ]
           *   2[ +1 "inner" +d inners(inner)(+1 "and" +d) ]
           * }
           *)
          RBUCLUSTER of
          {
           frameInfo : frameInfo,
           entryFunctions : funDecl list,
           innerFunctions : funDecl list,
           isRecursive : bool,
           hasClosureEnv : bool,
           loc : loc
          }
        | (*%
           * @format({codeList:code codes, isRecursive, loc})
           * !N0{ "code" isRecursive()(+d "rec",) +d codes(code)(+1 "and" +d) }
           *)
          (*%
           * @prefix typed
           * @format({codeList:code codes, isRecursive, loc})
           * !N0{ "code" isRecursive()(+d "rec",) +d codes(code)(+1 "and" +d) }
           *)
          RBUVALCODE of
          {
           codeList : codeDecl list,
	   isRecursive : bool,
           loc : loc
          }

 withtype funDecl =
          (*%
           * @format({codeId, 
           *          argVarList: arg args:listWithEnclosureOne,
           *          bodyExp, 
           *          resultTyList,
           *          argSizeExpList,
           *          resultSizeExpList,
           *          ffiAttributes: att attopt:optionWithPrefix})
           * { codeId +d args(arg)("," +2, "{", "}")
           *   attopt(att)(+1) +d "=" }
           * 2[ +1 bodyExp ]
           *)
          (*%
           * @prefix typed
           * @format({codeId, 
           *          argVarList: arg args:listWithEnclosureOne,
           *          bodyExp, 
           *          resultTyList,
           *          argSizeExpList,
           *          resultSizeExpList,
           *          ffiAttributes: att attopt:optionWithPrefix})
           * { codeId +d args(arg)("," +2, "{", "}")
           *   attopt(att)(+1) +d "=" }
           * 2[ +1 bodyExp ]
           *)
          {
           codeId : id, 
           argVarList : varInfo list, 
           argSizeExpList : rbuexp list,
           bodyExp : rbuexp,
           resultTyList : ty list,
           resultSizeExpList : rbuexp list,
           ffiAttributes: ffiAttributes option
          }
  and codeDecl =
          (*%
           * @format({codeLabel, 
           *          argVarList: arg args:listWithEnclosureOne,
           *          bodyExp, 
           *          resultTyList,
           *          argSizeExpList,
           *          resultSizeExpList,
           *          loc})
           * { codeLabel +1 args(arg)("," +2, "{", "}") +d "=" }
           * 2[ +1 bodyExp ]
           *)
          (*%
           * @prefix typed
           * @format({codeLabel, 
           *          argVarList: arg args:listWithEnclosureOne,
           *          bodyExp, 
           *          resultTyList,
           *          argSizeExpList,
           *          resultSizeExpList,
           *          loc})
           * { codeLabel +1 args(arg)("," +2, "{", "}") +d "=" }
           * 2[ +1 bodyExp ]
           *)
          {
	   codeLabel : id, 
	   argVarList : varInfo list, 
           argSizeExpList : rbuexp list,
	   bodyExp : rbuexp, 
           resultTyList : ty list,
           resultSizeExpList : rbuexp list,
	   loc:loc
	  }
      and frameInfo =
          (*%
           * @format({tyvars: tv tvs,
           *          bitmapFree,
           *          tagArgList: tag tags})
           * "{"
           * 2[ 1 { "tyvars" +d "=" +1 "(" {tvs(tv)("," +1)} ")" } ","
           *    +1 { "bitmapFree" +d "=" +1 bitmapFree } ","
           *    +1 { "tagArgs" +d "=" +1 "(" {tags(tag)("," +1)} ")" } ]
           * 1 "}"
           *)
          (*%
           * @prefix typed
           * @format({tyvars: tv tvs,
           *          bitmapFree,
           *          tagArgList: tag tags})
           * "{"
           * 2[ 1 { "tyvars" +d "=" +d "(" {tvs(tv)("," +1)} ")" } ","
           *    +1 { "bitmapFree" +d "=" +d bitmapFree } ","
           *    +1 { "tagArgs" +d "=" +d "(" {tags(tag)("," +1)} ")" } ]
           * 1 "}"
           *)
          {
           tyvars : int list,
           bitmapFree : rbuexp,
           tagArgList : rbuexp list
          }

end

(* -*- sml -*- *)
(**
 * MIPS mnemonic
 * @copyright (c) 2009, Tohoku University.
 * @author UENO Katsuhiro
 * @version $Id: $
 *)

structure MIPSAsm =
struct

  local

  fun format_cnum_str str =
      SMLFormat.BasicFormatters.format_string
        (String.map (fn #"~" => #"-" | x => x) str)

  fun format_cint fmt x = format_cnum_str (fmt StringCvt.DEC x)

  fun format_chex fmt x =
      SMLFormat.BasicFormatters.format_string
        ("0x" ^ String.map Char.toLower (fmt StringCvt.HEX x))

  fun format_int32 x = format_cint Int32.fmt x
  fun format_word32_hex x = format_chex Word32.fmt x
  fun format_word8_hex x = format_chex Word8.fmt x
  fun format_word32_dec x = format_cint Word32.fmt x
  fun format_word_dec x = format_chex Word.fmt x

  fun format_int32_disp 0 = nil
    | format_int32_disp x = format_int32 x
  fun format_word32_disp 0w0 = nil
    | format_word32_disp x = format_word32_dec x

  fun format_int_log2 x =
      let
        val x = Real.floor (Math.ln(real x) / Math.ln(2.0))
      in
        SMLFormat.BasicFormatters.format_string (Int.fmt StringCvt.DEC x)
      end

  fun format_word_log2 x = format_int_log2 (Word.toInt x)

  local
    fun left (s,n) = substring (s, size s - n, n)
    fun pad0 (s,n) = if size s > n then s else left ("0000" ^ s, n)
    fun oct3 i = pad0 (Int.fmt StringCvt.OCT i, 3)
    fun hex4 i = pad0 (Int.fmt StringCvt.HEX i, 4)
  in
  fun format_ascii s =
      SMLFormat.BasicFormatters.format_string
        ("\"" ^
         String.translate
          (fn #"\008" => "\\b"
            | #"\012" => "\\f"
            | #"\010" => "\\n"
            | #"\013" => "\\r"
            | #"\009" => "\\t"
            | #"\\" => "\\\\"
            | #"\"" => "\\\""
            | c => if Char.isPrint c andalso ord c < 128 then str c
                   else if ord c < 256 then "\\" ^ oct3 (ord c)
                   else "\\u" ^ hex4 (ord c))
          s ^
        "\"")
  end (* local *)

  fun formatLines (formatItem,indent,break) nil = nil
    | formatLines (formatItem,indent,break) (h::t) =
      indent @ formatItem h @ break @ formatLines (formatItem,indent,break) t

  in

  (*% @formatter(Loc.loc) Loc.format_loc *)
  type loc = Loc.loc

  (*% @formatter(VarID.id) VarID.format_id *)
  type localLabel =
      (*% @prefix att_ @format(c * l) "." "F" c "." "L" l *)
      VarID.id * VarID.id

  (*% *)
  type symbol = string

  (*% *)
  type linkPtrSymbol =
      (*% @format(x) x "@GOT" *)
      string

  (*% *)
  type linkStubSymbol =
      (*% @format(x) x "@PLT" *)
      string

  (*% *)
  datatype sectionName =
      (*% @format ".text" *)
      TextSection
    | (*% @format ".data" *)
      DataSection
    | (*% @format ".rodata" *)
      Literal4Section
    | (*% @format ".rodata" *)
      Literal8Section
    | (*% @prefix att_ @format ".rodata" *)
      CStringSection
    | (*% @prefix att_ @format ".rodata" *)
      ConstSection
    | (*% @prefix att_ @format ".rodata" *)
      ConstDataSection

  (*% *)
  datatype label =
      (*% @format(x) x *)
      LOCAL of localLabel
    | (*% @format(x) x *)
      SYMBOL of symbol
    | (*% @format(x) x *)
      LINKPTR of linkPtrSymbol
    | (*% @format(x) x *)
      LINKSTUB of linkStubSymbol
    | (*% @format(x) x "@GOTOFF" *)
      ELF_GOTOFF of label
    | (*% @format(x) x "@GOT" *)
      ELF_GOT of label
    | (*% @format(x) "0" *)
      NULL

  (*% *)
  datatype reg =
      (*% @format "zero" *)
      ZERO       (* same as $0 *)
    | (*% @format "at" *)
      AT         (* same as $1; assembler temporary *)
    | (*% @format(x) "v" x *)
      V of int   (* v0 - v1 = $2 - $3 ; return values *)
    | (*% @format(x) "a" x *)
      A of int   (* a0 - a3 = $4 - $7 ; arguments *)
    | (*% @format(x) "t" x *)
      T of int   (* t0 - t7 = $8 - $15, t8 - t9 = $24 - $25 ; temporary *)
    | (*% @format(x) "s" x *)
      S of int   (* s0 - s7 = $16 - $23, s8 = $30 ; callee-save *)
    | (*% @format(x) "kt" x *)
      KT of int  (* kt0 - kt1 = $26 - $27 ; reserved for OS *)
    | (*% @format(x) "gp" *)
      GT         (* same as $28; global pointer *)
    | (*% @format(x) "sp" *)
      SP         (* same as $29; stack pointer *)
    | (*% @format(x) "s8" *)
      RA         (* same as $31; return address *)

  (*% *)
  datatype freg =
      (*% @format(x) "%f" x *)
      F of int   (* %f0 ... %f30; floating-point registers *)

  (*%
   * @formatter(Int32.int) format_int32
   * @formatter(Word32.word) format_word32_hex
   *)
  datatype imm =
       (*% @prefix att_ @format(x) x *)
       INT of Int32.int
     | (*% @prefix att_ @format(x) x *)
       WORD of Word32.word
     | (*% @prefix att_ @format(l) l *)
       LABEL of label
     | (*% @prefix att_ @format(x * y) L5{ x "-" y } *)
       CONSTSUB of imm * imm
     | (*% @prefix att_ @format(x * y) L5{ x "+" y } *)
       CONSTADD of imm * imm
     | (*% @prefix att_ @format "." *)
       CURRENTPOS


  (*% *)
  datatype reg =
      (*% @format "$zero" *)
      ZERO
    | (*% @format "at" *)
      AT
    | (*% @format "v0" *)
      V0
    | (*% @format "v1" *)
      V1
    | (*% @format "a0" *)
      A0
    | (*% @format "a1" *)
      A1
    | (*% @format "a2" *)
      A2
    | (*% @format "a3" *)
      A3
    | (*% @format "t0" *)
      T0
    | (*% @format "t1" *)
      T1
    | (*% @format "t2" *)
      T2
    | (*% @format "t3" *)
      T3
    | (*% @format "" *)
      T4
    | (*% @format "" *)
      T5
    | (*% @format "" *)
      T6
    | (*% @format "" *)
      T7
    | (*% @format "" *)
      S0
    | (*% @format "" *)
      S1
    | (*% @format "" *)
      S2
    | (*% @format "" *)
      S3
    | (*% @format "" *)
      S4
    | (*% @format "" *)
      S5
    | (*% @format "" *)
      S6
    | (*% @format "" *)
      S7
    | (*% @format "" *)
      T8
    | (*% @format "" *)
      T9
    | (*% @format "" *)
      KT0
    | (*% @format "" *)
      KT1
    | (*% @format "" *)
      GP
    | (*% @format "" *)
      SP
    | (*% @format "" *)
      FP
    | (*% @format "" *)
      RA

  datatype fp =
      F of int   (* 0-31 *)

  (*% *)
  datatype ffmt =
      (*% @format "s" *)
      S
    | (*% @format "d" *)
      D

  (*% *)
  datatype fcc =
      (*% @format "f" *)
      F               (* false *)
    | (*% @format "un" *)
      UN              (* unordered *)
    | (*% @format "eq" *)
      EQ              (* equal *)
    | (*% @format "ueq" *)
      UEQ             (* unordered or equal *)
    | (*% @format "olt" *)
      OLT             (* ordered or less than *)
    | (*% @format "ult" *)
      ULT             (* unordered or less than *)
    | (*% @format "ole" *)
      OLE             (* ordered or less than or equal *)
    | (*% @format "ule" *)
      ULE             (* unordered or less than or equal *)
    | (*% @format "sf" *)
      SF              (* signaling false *)
    | (*% @format "ngle" *)
      NGLE            (* not greater than or less than or equal *)
    | (*% @format "seq" *)
      SEQ             (* signaling equal *)
    | (*% @format "ngl" *)
      NGL             (* not greater than or less than *)
    | (*% @format "lt" *)
      LT              (* less than *)
    | (*% @format "nge" *)
      NGE             (* not greater than or equal *)
    | (*% @format "le" *)
      LE              (* less than or equal *)
    | (*% @format "ngt" *)
      NGT             (* not greater than *)

  (*% *)
  datatype addr =
      (*% @format(r) "(" r ")" *)
      BASE of reg            (* equivarent to 0(reg) *)
    | (*% @format(disp * base) disp "(" base ")" *)
      DISP of imm * reg      (* imm is signed 16bit *)

  (*%
   * @formatter(Word8.word) format_word8_hex
   * @formatter(word) format_word_dec
   * @formatter(log2) format_int_log2
   * @formatter (ascii) format_ascii
   *)
  datatype instruction =
      (*% @format "nop" *)
      NOP
    | (*% @format(r) "mfhi\t" r *)
      MFHI of reg                  (* reg <- HI *)
    | (*% @format(r) "mflo\t" r *)
      MFLO of reg                  (* reg <- LO *)
    | (*% @format(r) "fthi\t" r *)
      MTHI of reg                  (* HI <- reg *)
    | (*% @format(r) "mtlo\t" r *)
      MTLO of reg                  (* LO <- reg *)
    | (*% @format(r * a) "lb\t" r "," + a *)
      LB of reg * addr             (* reg <- signext([addr]:b) *)
    | (*% @format(r * a) "lbu\t" r "," + a *)
      LBU of reg * addr            (* reg <- zeroext([addr]:b) *)
    | (*% @format(r * a) "lh\t" r "," + a *)
      LH of reg * addr             (* reg <- signext([addr]:h) *)
    | (*% @format(r * a) "lhu\t" r "," + a *)
      LHU of reg * addr            (* reg <- zeroext([addr]:h) *)
    | (*% @format(r * a) "lw\t" r "," a *)
      LW of reg * addr             (* reg <- [addr]:w *)
    | (*% @format(r * i) "lui\t" r "," + i *)
      LUI of reg * imm             (* reg <- imm16 << 16 *)
    | (*% @format(r * a) "sb\t" r "," + a *)
      SB of reg * addr             (* [addr]:b <- reg & 0xff *)
    | (*% @format(r * a) "sh\t" r "," + a *)
      SH of reg * addr             (* [addr]:h <- reg & 0xffff *)
    | (*% @format(r * a) "sw\t" r "," + a *)
      SW of reg * addr             (* [addr]:w <- reg *)
    | (*% @format(r1 * r2 * r3) "add\t" r1 "," + r2 "," + r3 *)
      ADD of reg * reg * reg       (* r1 <- r2 + r3 ; overflow check *)
    | (*% @format(r1 * r2 * r3) "addu\t" r1 "," + r2 "," + r3 *)
      ADDU of reg * reg * reg      (* r1 <- r2 + r3 *)
    | (*% @format(r1 * r2 * imm) "addi\t" r1 "," + r2 "," + imm *)
      ADDI of reg * reg * imm      (* r1 <- r2 + imm16 *)
    | (*% @format(r1 * r2 * imm) "addiu\t" r1 "," + r2 "," + imm *)
      ADDIU of reg * reg * imm     (* r1 <- r2 + imm16 *)
    | (*% @format(r1 * r2 * r3) "sub\t" r1 "," + r2 "," + r3 *)
      SUB of reg * reg * reg       (* r1 <- r2 - r3 ; overflow check *)
    | (*% @format(r1 * r2 * r3) "subu\t" r1 "," + r2 "," + r3 *)
      SUBU of reg * reg * reg      (* r1 <- r2 - r3 *)
    | (*% @format(r1 * r2 * r3) "and\t" r1 "," + r2 "," + r3 *)
      AND of reg * reg * reg       (* r1 <- r2 & r3 *)
    | (*% @format(r1 * r2 * imm) "andi\t" r1 "," + r2 "," + imm *)
      ANDI of reg * reg * imm      (* r1 <- r2 & imm16 *)
    | (*% @format(r1 * r2 * r3) "or\t" r1 "," + r2 "," + r3 *)
      OR of reg * reg * reg        (* r1 <- r2 | r3 *)
    | (*% @format(r1 * r2 * imm) "ori\t" r1 "," + r2 "," + imm *)
      ORI of reg * reg * imm       (* r1 <- r2 | imm16 *)
    | (*% @format(r1 * r2 * r3) "xor\t" r1 "," + r2 "," + r3 *)
      XOR of reg * reg * reg       (* r1 <- r2 ^ r3 *)
    | (*% @format(r1 * r2 * imm) "xori\t" r1 "," + r2 "," + imm *)
      XORI of reg * reg * imm      (* r1 <- r2 ^ imm16 *)
    | (*% @format(r1 * r2 * r3) "nor\t" r1 "," + r2 "," + r3 *)
      NOR of reg * reg * reg       (* r1 <- ~(r2 | r3) *)
    | (*% @format(r1 * r2) "mult\t" r1 "," + r2 *)
      MULT of reg * reg            (* HI:LO <- r1 * r2 (signed) *)
    | (*% @format(r1 * r2) "multu\t" r1 "," + r2 *)
      MULTU of reg * reg           (* HI:LO <- r1 * r2 (unsigned) *)
    | (*% @format(r1 * r2) "div\t" r1 "," + r2 *)
      DIV of reg * reg             (* (mod=HI, div=LO) <- r1 / r2 (signed) *)
    | (*% @format(r1 * r2) "divu\t" r1 "," + r2 *)
      DIVU of reg * reg            (* (mod=HI, div=LO) <- r1 / r2 (unsigned) *)
    | (*% @format(r1 * r2 * i) "sll\t" r1 "," + r2 "," + i *)
      SLL of reg * reg * int       (* r1 <- r2 << i(5bit) *)
    | (*% @format(r1 * r2 * r3) "sllv\t" r1 "," + r2 "," + r3 *)
      SLLV of reg * reg * reg      (* r1 <- r2 << r3(5bit) *)
    | (*% @format(r1 * r2 * i) "srl\t" r1 "," + r2 "," + i *)
      SRL of reg * reg * int       (* r1 <- r2 >> i(5bit) *)
    | (*% @format(r1 * r2 * r3) "srlv\t" r1 "," + r2 "," + r3 *)
      SRLV of reg * reg * reg      (* r1 <- r2 >> r3(5bit) *)
    | (*% @format(r1 * r2 * i) "sra\t" r1 "," + r2 "," + i *)
      SRA of reg * reg * int       (* r1 <- r2 >>> i(5bit) *)
    | (*% @format(r1 * r2 * r3) "srav\t" r1 "," + r2 "," + r3 *)
      SRAV of reg * reg * reg      (* r1 <- r2 >>> r3(5bit) *)
    | (*% @format(r1 * r2 * r3) "slt\t" r1 "," + r2 "," + r3  *)
      SLT of reg * reg * reg       (* r1 <- (r2 < r3) ? 1 : 0 (signed) *)
    | (*% @format(r1 * r2 * i) "slti\t" r1 "," + r2 "," + i *)
      SLTI of reg * reg * imm      (* r1 <- (r2 < imm16) ? 1 : 0 (signed) *)
    | (*% @format(r1 * r2 * r3) "sltu\t" r1 "," + r2 "," + r3  *)
      SLTU of reg * reg * reg      (* r1 <- (r2 < r3) ? 1 : 0 (unsigned) *)
    | (*% @format(r1 * r2 * i) "sltiu\t" r1 "," + r2 "," + i *)
      SLTIU of reg * reg * imm      (* r1 <- (r2 < imm16) ? 1 : 0 (unsigned) *)
    | (*% @format(r * l) "bltz\t" r "," + l  *)
      BLTZ of reg * label          (* jump if r1 < 0 *)
    | (*% @format(r * l) "bgtz\t" r "," + l  *)
      BGTZ of reg * label          (* jump if r1 > 0 *)
    | (*% @format(r * l) "blez\t" r "," + l  *)
      BLEZ of reg * label          (* jump if r1 <= 0 *)
    | (*% @format(r * l) "bgez\t" r "," + l  *)
      BGEZ of reg * label          (* jump if r1 >= 0 *)
    | (*% @format(r1 * r2 * l) "beq\t" r1 "," + r2 "," + l *)
      BEQ of reg * reg * label     (* jump if r1 = r2 *)
    | (*% @format(r1 * r2 * l) "bne\t" r1 "," + r2 "," + l *)
      BNE of reg * reg * label     (* jump if r1 != r2 *)
    | (*% @format(r * l) "bltzal\t" r "," + l *)
      BLTZAL of reg * label        (* call if r1 < 0 *)
    | (*% @format(r * l) "bgezal\t" r "," + l *)
      BGEZAL of reg * label        (* call if r1 >= 0 *)
    | (*% @format(l) "j\t" l *)
      J of label                   (* jump label *)
    | (*% @format(l) "jal\t" l *)
      JAL of label                 (* call label *)
    | (*% @format(r1 * r2) "jalr\t" r1 "," + r2 *)
      JALR of reg * reg            (* r1 <- PC + 8; jump r2 *)
    | (*% @format(r) "jr\t" r *)
      JR of reg                    (* jump r1 *)
    | (*% @format(r * f) "mfc1\t" r "," + f *)
      MFC1 of reg * freg             (* reg <- freg *)
    | (*% @format(r * f) "mtc1\t" r "," + f  *)
      MTC1 of reg * freg             (* freg <- reg *)
    | (*% @format(r * i) "cfc1\t" r "," + i *)
      CFC1 of reg * int              (* reg <- FP_Control[i] *)
    | (*% @format(r * i) "ctc1\t" r "," + i *)
      CTC1 of reg * int              (* FP_Control[i] <- reg *)
    | (*% @format(t * f1 * f2) "mov."t"\t" f1 "," + f2 *)
      MOV_ of ffmt * freg * freg     (* fp1 <- fp2 *)
    | (*% @format(f * a) "lwc1\t" f "," + a *)
      LWC1 of freg * addr            (* fp <- [addr]:w *)
    | (*% @format(f * a) "swc1\t" f "," + a *)
      SWC1 of freg * addr            (* [addr]:w <- fp *)
    | (*% @format(t * f1 * f2) "abs."t"\t" f1 "," + f2 *)
      ABS_ of ffmt * freg * freg     (* fp1 <- ABS(fp2) *)
    | (*% @format(t * f1 * f2) "neg."t"\t" f1 "," + f2 *)
      NEG_ of ffmt * freg * freg     (* fp1 <- NEG(fp2) *)
    | (*% @format(t * f1 * f2 * f3) "add."t"\t" f1 "," + f2 "," + f3 *)
      ADD_ of ffmt * freg * freg * freg   (* fp1 <- fp2 + fp3 *)
    | (*% @format(t * f1 * f2 * f3) "sub."t"\t" f1 "," + f2 "," + f3 *)
      SUB_ of ffmt * freg * freg * freg   (* fp1 <- fp2 - fp3 *)
    | (*% @format(t * f1 * f2 * f3) "mul."t"\t" f1 "," + f2 "," + f3 *)
      MUL_ of ffmt * freg * freg * freg   (* fp1 <- fp2 * fp3 *)
    | (*% @format(t * f1 * f2 * f3) "div."t"\t" f1 "," + f2 "," + f3 *)
      DIV_ of ffmt * freg * freg * freg   (* fp1 <- fp2 / fp3 *)
    | (*% @format(f1 * f2) "cvt.s.d\t" f1 "," + f2  *)
      CVT_S_D of freg * freg         (* fp1:float <- fp2:double *)
    | (*% @format(f1 * f2) "cvt.s.w\t" f1 "," + f2  *)
      CVT_S_W of freg * freg         (* fp1:float <- fp2:int *)
    | (*% @format(f1 * f2) "cvt.d.s\t" f1 "," + f2  *)
      CVT_D_S of freg * freg         (* fp1:double <- fp2:float *)
    | (*% @format(f1 * f2) "cvt.d.w\t" f1 "," + f2  *)
      CVT_D_W of freg * freg         (* fp1:double <- fp2:int *)
    | (*% @format(f1 * f2) "cvt.w.s\t" f1 "," + f2  *)
      CVT_W_S of freg * freg         (* fp1:int <- fp2:float *)
    | (*% @format(f1 * f2) "cvt.w.d\t" f1 "," + f2  *)
      CVT_W_D of freg * freg         (* fp1:int <- fp2:double *)
    | (*% @format(fcc * t * f1 * f2) "c."fcc"."t"\t" f1 "," + f2 *)
      C_ of fcc * ffmt * freg * freg  (* cc <- (fp cond fp) ? 1 : 0 *)
    | (*% @format(l) "bc1f\t" l *)
      BC1F of label                  (* jump if cc = 0 *)
    | (*% @format(l) "bc1t\t" l *)
      BC1T of label                  (* jump if cc = 1 *)
    | (*% @format(w) "syscall\t" w *)
      SYSCALL of word                (* system call *)

    (* pseudo instructions *)
    | (*% @format(l) l ":" *)
      Label of localLabel
    | (*% @format(l) l ":" *)
      Symbol of symbol
    | (*% @format(l) "\t.globl\t" l *)
      Global of symbol
    | (*% @format(x) "\t;; .loc " x *)
      Loc of loc
    | (*% @format({align,filler}) "\t.align\t" align:log2 ", " filler *)
      Align of {align:int, filler:word}    (* align must be 2^n *)
    | (*% @format(x) "\t" x *)
      (*% @prefix format_ @format(x) "\t.section" x *)
      Section of sectionName
    | (*% @format(x) "\t.long\t" x *)
      (*% @prefix format_ @format(x) "\t.int\t" x *)
      ImmData of imm
    | (*% @format(x xs) "\t.byte\t" xs(x)("," +) *)
      BytesData of Word8.word list
    | (*% @format(x:ascii) "\t.ascii\t" x *)
      AsciiData of string
    | (*% @format(size) "\t.fill\t" size ", 1, 0" *)
      SpaceData of int
    | (*% @format(l * {size,align})
       * ".comm " size ", " l ", " align *)
      Comm of symbol * {size: int, align: int}

    | (* @format(sym) sym ": # FIXME: LinkPtrEntry" *)
      LinkPtrEntry of symbol
    | (* @format(sym) sym ": # FIXME: LinkStubEntry" *)
      LinkStubEntry of symbol
    | (* @format(sym) sym ": # FIXME: GET_PC_THUNK" *)
      GET_PC_THUNK_Decl of symbol
    | (*% @format(sym) sym ": # FIXME: NEXT_TOPLEVEL_STUB" *)
      NEXT_TOPLEVEL_STUB_Decl of symbol

  (*% @formatter(lines) formatLines *)
  type program =
      (*% @format(insn insns:lines) insns(insn)(,\n) *)
       instruction list

  end (* local *)

end

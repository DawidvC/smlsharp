(**
 * @copyright (c) 2006, Tohoku University.
 * @author Liu Bochao
 * @version $Id: TopBasis.sml,v 1.27 2008/08/06 17:23:40 ohori Exp $
 *)
structure TopBasis =
struct
      (**
       * global context : 
       * fixEnv : elaboration phase
       * externalVarIDBasis : uniqueIdAllocation phase, 
       *                    a map from name to abstract index(a number)
       * topTypeContext : type inference phase
       * nameMap : module compiler phase
       *           its usage : 1. error detection for structure 
       *                       2. structure replication
       *                       3. open structure declaration
       *           For item 2 and 3, nameMap need to be looked up to generate
       *           static rebindings. These kind of rebindings are eliminated 
       *           by uniqueIdAllocation phase.
       * globalIndexEnv : symbolic code generation phase, 
       *                  a map from abstract index to real index in the global array
       * inlineEnv : inling phase
       * functorEnv : functor linker phase
       *
       * globalNameAliasEnv:
       * aliases of global names beyond compilation units.
       * This is a workaround for sequential compilation by native backend.
       * In future compiler with true separate compilation, such kind of
       * aliases should be resolved by frontend.
       *)
      type context =
           {
            fixEnv : Fixity.fixity SEnv.map,
	    externalVarIDBasis : VarIDContext.topExternalVarIDBasis,
            topTypeContext : InitialTypeContext.topTypeContext,
            nameMap : NameMap.topNameMap,
            globalNameAliasEnv: string SEnv.map,
            globalIndexEnv : GlobalIndexEnv.globalIndexEnv,
	    inlineEnv : InlineEnv.globalInlineEnv,
            functorEnv : FunctorLinker.functorEnv
           }

      (**
       * glboal stamps : 
       * boundTypeVarIDStamp : bound type variable
       * exceptionGlobalTagStamp : exception tag field
       * tyConIDKeyStamp : type constructor global identifier 
       * externalVarID : free abstract index for external variable
       *
       * compileUnitStamp :
       * count of current compilation unit.
       * This is a workaround for sequential compilation by native backend.
       *)           
      type stamps = 
           {
            compileUnitStamp : int,
            boundTypeVarIDStamp : BoundTypeVarID.boundTypeVarID,
            exnTagIDKeyStamp : ExnTagID.id,
            tyConIDKeyStamp : TyConID.id,
            clusterIDKeyStamp : ClusterID.id,
            externalVarIDKeyStamp : ExternalVarID.id
           }
           
      (**
       * local context : 
       * ********************************************************************************************
       * flattenedNamePathEnvOpt : generated by module compiler, consumed by type inference.
       * FlattendNamePathEnv is a flattened name map. For example, the following code
       *        structure S = struct val x = 1 end
       *        structure S = struct val y = true val z = 1.0 end
       * corresponds to the nameMap generated by Module Compiler as follows:
       *            S -> {
       *                  { y -> $1.S.y,
       *                    z -> $1.S.z
       *                  }
       *                 }
       * the flattened name map as follows:
       *            S.y -> $1.S.y
       *            S.z -> $1.S.z
       * and the flattened Code as follows:
       *         $0.S.x = 1
       *         $1.S.y = true
       *         $1.S.z = 1.0
       * Type inference type infers the above flattened code and generates the following type environment:
       *         $0.S.x : int 
       *         $1.S.y : bool
       *         $1.S.z : real
       * Since $0.S.x should be hidden from the outside, we resort to the flattened name map above to
       * reestablish the type environment as follows:
       *            S.y : int
       *            S.z : real
       **********************************************************************************************
       * typeContextOpt : generated by type inference, consumed by printer code generation
       *)
      type localContext = 
           {
            flattenedNamePathEnvOpt : NameMap.basicNameNPEnv option,
            typeContextOpt : TypeContext.context option,
            newTopExternalVarIDBasisOpt : VarIDContext.topExternalVarIDBasis option
           }
           
      (**
       * local stamps :
       * varNameStamp : variable name
       * freeTypeVarIDStamp :  free type variable identfier
       * localVarIDStamp : variable unique identifeir, typically allocated in 
       *                              uniqueIDAllocation phase
       *)
      type localStamps = 
           {varNameStamp : VarNameID.id,
            freeTypeVarIDStamp : FreeTypeVarID.id,
            localVarIDStamp : LocalVarID.id}

      type sysParam =
           {session : SessionTypes.Session,
            standardOutput : ChannelTypes.OutputChannel,
            standardError : ChannelTypes.OutputChannel,
            loadPathList : string list,
            getVariable : string -> string option}


      (**
       * compilation basis
       * context :  global context, untouched during the compilation for one unit, accumlated
       *            interactively
       * stamps : global stamps, updated during the comiplation for unit, passed to the next 
       *          compilation 
       * localContext : local context, accumulated during the compilation for one unit, discarded 
       *          in the next compilation
       * localStamps : local stamps, updated during the compilation for one unit, discarded 
       *          in the next compilation
       * sysParam : initialized at the beginning of compilation, never touched
       *)
      type basis = 
           {
            context : context, 
            stamps : stamps,
            localContext : localContext,
            localStamps : localStamps,
            sysParam : sysParam
           }

      val emptyContext = 
          {
           fixEnv = SEnv.empty : Fixity.fixity SEnv.map,
	   externalVarIDBasis = UniqueIdAllocationContext.emptyTopExternalVarIDBasis : VarIDContext.topExternalVarIDBasis,
           topTypeContext = InitialTypeContext.emptyTopTypeContext : InitialTypeContext.topTypeContext,
           nameMap = NameMap.emptyTopNameMap :  NameMap.topNameMap,
           globalNameAliasEnv = SEnv.empty,
           globalIndexEnv = GlobalIndexEnv.emptyGlobalIndexEnv : GlobalIndexEnv.globalIndexEnv,
	   inlineEnv = InlineEnv.GIE ExternalVarID.Map.empty : InlineEnv.globalInlineEnv,
           functorEnv = SEnv.empty : FunctorLinker.functorEnv
          } : context
      

      fun initializeLocalContext () = 
          {
           flattenedNamePathEnvOpt = NONE,
           typeContextOpt = NONE,
           newTopExternalVarIDBasisOpt = NONE
           } : localContext

      fun initializeLocalStamps () = 
          {
           varNameStamp = VarNameID.initialID,
           freeTypeVarIDStamp = FreeTypeVarID.initialID,
           localVarIDStamp = LocalVarID.initialID
           } : localStamps

      fun initializeStamps () =
          {
           compileUnitStamp = 0,
           boundTypeVarIDStamp = BoundTypeVarID.initialBoundTypeVarID,
           exnTagIDKeyStamp = ExnTagID.initialID,
           tyConIDKeyStamp = TyConID.initialID,
           clusterIDKeyStamp = ClusterID.initialID,
           externalVarIDKeyStamp = ExternalVarID.initialID 
          } : stamps

      fun initializeStampsWithNamespace namespace = 
          {
           compileUnitStamp = 0,
           boundTypeVarIDStamp = BoundTypeVarID.initialBoundTypeVarID,
           exnTagIDKeyStamp = ExnTagID.initialID,
           tyConIDKeyStamp = TyConID.initialID,
           clusterIDKeyStamp = ClusterID.initialID,
           externalVarIDKeyStamp = ExternalVarID.initialID
          } : stamps

      fun initializeContext () =
          {
           fixEnv = Fixity.initialFixEnv,
           topTypeContext = InitialTypeContext.initialTopTypeContext,
	   externalVarIDBasis = UniqueIdAllocationContext.initialTopExternalVarIDBasis,
           nameMap = InitialNameMap.initialTopNameMap,
           globalNameAliasEnv = SEnv.empty,
           globalIndexEnv =  GlobalIndexEnv.initialGlobalIndexEnv,
           functorEnv = FunctorLinker.initialFunctorEnv,
	   inlineEnv = InlineEnv.initialInlineEnv
          } : context

      fun extendContextFixEnv (context:context) newFixEnv =
          {
           fixEnv = SEnv.unionWith #1 (newFixEnv, #fixEnv context),
           externalVarIDBasis = #externalVarIDBasis context,
           topTypeContext = #topTypeContext context,
           nameMap = #nameMap context,
           globalNameAliasEnv = #globalNameAliasEnv context,
           globalIndexEnv = #globalIndexEnv context,
           inlineEnv = #inlineEnv context,
           functorEnv = #functorEnv context
          } : context

      fun extendContextNameMapWithCurrentNameMap (context:context) currentNameMap =
          {
           fixEnv = #fixEnv context,
           externalVarIDBasis = #externalVarIDBasis context,
           topTypeContext = #topTypeContext context,
           nameMap = NameMap.extendTopNameMapWithCurrentNameMap
                         {
                          currentNameMap = currentNameMap, 
                          topNameMap = #nameMap context
                         },
           globalNameAliasEnv = #globalNameAliasEnv context,
           globalIndexEnv = #globalIndexEnv context,
           inlineEnv = #inlineEnv context,
           functorEnv = #functorEnv context
          } : context

      fun extendContextTopTypeContextWithCurrentTypeContext (context:context) current =
          {
           fixEnv = #fixEnv context,
           externalVarIDBasis = #externalVarIDBasis context,
           topTypeContext = InitialTypeContext.extendTopTypeContextWithContext (#topTypeContext context) current,
           nameMap = #nameMap context,
           globalNameAliasEnv = #globalNameAliasEnv context,
           globalIndexEnv = #globalIndexEnv context,
           inlineEnv = #inlineEnv context,
           functorEnv = #functorEnv context
          } : context

      fun extendContextWithExternalVarIDBasis (context:context) externalVarIDBasis =
          {
           fixEnv = #fixEnv context,
           externalVarIDBasis = 
           VarIDContext.extendTopVarExternalVarIDBasisWithTopVarExternalVarIDBasis
               {new = externalVarIDBasis, old = #externalVarIDBasis context},
           topTypeContext = #topTypeContext context,
           nameMap = #nameMap context,
           globalNameAliasEnv = #globalNameAliasEnv context,
           globalIndexEnv = #globalIndexEnv context,
           inlineEnv = #inlineEnv context,
           functorEnv = #functorEnv context
          } : context

      fun extendContextFunctorEnv (context:context) newFunctorEnv =
          {
           fixEnv = #fixEnv context,
           externalVarIDBasis = #externalVarIDBasis context,
           topTypeContext = #topTypeContext context,
           nameMap = #nameMap context,
           globalNameAliasEnv = #globalNameAliasEnv context,
           globalIndexEnv = #globalIndexEnv context,
           inlineEnv = #inlineEnv context,
           functorEnv = SEnv.unionWith #1 (newFunctorEnv, (#functorEnv context))
          } : context

      fun setContextExternalVarIDEnv (context:context) externalVarIDBasis =
          {
           fixEnv = #fixEnv context,
           externalVarIDBasis = externalVarIDBasis,
           topTypeContext = #topTypeContext context,
           nameMap = #nameMap context,
           globalNameAliasEnv = #globalNameAliasEnv context,
           globalIndexEnv = #globalIndexEnv context,
           inlineEnv = #inlineEnv context,
           functorEnv = #functorEnv context
          } : context

      fun setContextInlineEnv (context:context) inlineEnv =
          {
           fixEnv = #fixEnv context,
           externalVarIDBasis = #externalVarIDBasis context,
           topTypeContext = #topTypeContext context,
           nameMap = #nameMap context,
           globalNameAliasEnv = #globalNameAliasEnv context,
           globalIndexEnv = #globalIndexEnv context,
           inlineEnv = inlineEnv,
           functorEnv = #functorEnv context
          } : context


      fun setContextGlobalIndexEnv (context:context) globalIndexEnv =
          {
           fixEnv = #fixEnv context,
           externalVarIDBasis = #externalVarIDBasis context,
           topTypeContext = #topTypeContext context,
           nameMap = #nameMap context,
           globalNameAliasEnv = #globalNameAliasEnv context,
           globalIndexEnv = globalIndexEnv,
           inlineEnv = #inlineEnv context,
           functorEnv = #functorEnv context
          }

      fun setContextGlobalNameAliasEnv (context:context) globalNameAliasEnv =
          {
           fixEnv = #fixEnv context,
           externalVarIDBasis = #externalVarIDBasis context,
           topTypeContext = #topTypeContext context,
           nameMap = #nameMap context,
           globalNameAliasEnv = globalNameAliasEnv,
           globalIndexEnv = #globalIndexEnv context,
           inlineEnv = #inlineEnv context,
           functorEnv = #functorEnv context
          }

      (**************************************************************************)
      fun setStampsBoundTypeVarIDStamp (stamps:stamps) boundTypeVarIDStamp =
          {boundTypeVarIDStamp = boundTypeVarIDStamp,
           compileUnitStamp = #compileUnitStamp stamps,
           exnTagIDKeyStamp = #exnTagIDKeyStamp stamps,
           tyConIDKeyStamp = #tyConIDKeyStamp stamps,
           clusterIDKeyStamp = #clusterIDKeyStamp stamps,
           externalVarIDKeyStamp = #externalVarIDKeyStamp stamps} : stamps

      fun setStampsExceptionGlobalTagStamp (stamps:stamps) exnTagIDKeyStamp =
          {boundTypeVarIDStamp = #boundTypeVarIDStamp stamps,
           compileUnitStamp = #compileUnitStamp stamps,
           exnTagIDKeyStamp = exnTagIDKeyStamp,
           tyConIDKeyStamp = #tyConIDKeyStamp stamps,
           clusterIDKeyStamp = #clusterIDKeyStamp stamps,
           externalVarIDKeyStamp = #externalVarIDKeyStamp stamps} : stamps

      fun setStampsTypeConstructorGlobalIDStamp (stamps:stamps) tyConIDKeyStamp =
          {boundTypeVarIDStamp = #boundTypeVarIDStamp stamps,
           compileUnitStamp = #compileUnitStamp stamps,
           exnTagIDKeyStamp = #exnTagIDKeyStamp stamps,
           tyConIDKeyStamp = tyConIDKeyStamp, 
           clusterIDKeyStamp = #clusterIDKeyStamp stamps,
           externalVarIDKeyStamp = #externalVarIDKeyStamp stamps} : stamps

      fun setStampsExternalVarIDStamp (stamps:stamps) externalVarIDKeyStamp =
          {boundTypeVarIDStamp = #boundTypeVarIDStamp stamps,
           compileUnitStamp = #compileUnitStamp stamps,
           exnTagIDKeyStamp = #exnTagIDKeyStamp stamps,
           tyConIDKeyStamp = #tyConIDKeyStamp stamps, 
           clusterIDKeyStamp = #clusterIDKeyStamp stamps,
           externalVarIDKeyStamp = externalVarIDKeyStamp} : stamps

      fun setStampsClusterGlobalIDStamp (stamps:stamps) clusterIDKeyStamp =
          {boundTypeVarIDStamp = #boundTypeVarIDStamp stamps,
           compileUnitStamp = #compileUnitStamp stamps,
           exnTagIDKeyStamp = #exnTagIDKeyStamp stamps,
           tyConIDKeyStamp = #tyConIDKeyStamp stamps, 
           clusterIDKeyStamp = clusterIDKeyStamp,
           externalVarIDKeyStamp = #externalVarIDKeyStamp stamps} : stamps

      fun incrementCompileUnitStamp (stamps:stamps) =
          {boundTypeVarIDStamp = #boundTypeVarIDStamp stamps,
           compileUnitStamp = #compileUnitStamp stamps + 1,
           exnTagIDKeyStamp = #exnTagIDKeyStamp stamps,
           tyConIDKeyStamp = #tyConIDKeyStamp stamps, 
           clusterIDKeyStamp = #clusterIDKeyStamp stamps,
           externalVarIDKeyStamp = #externalVarIDKeyStamp stamps} : stamps

      (**************************************************************************)
      fun setBasisContext (basis:basis) context = 
          {
           context = context, 
           stamps = #stamps basis,
           localContext = #localContext basis,
           localStamps = #localStamps basis,
           sysParam = #sysParam basis
          } : basis

      fun setBasisLocalContext (basis:basis) localContext = 
          {
           context = #context basis, 
           stamps = #stamps basis,
           localContext = localContext,
           localStamps = #localStamps basis,
           sysParam = #sysParam basis
          } : basis

      fun setBasisStamps (basis:basis) stamps =
          {
           context = #context basis, 
           stamps = stamps,
           localContext = #localContext basis,
           localStamps = #localStamps basis,
           sysParam = #sysParam basis
          } : basis

      fun setBasisLocalStamps (basis : basis) localStamps =
          {
           context = #context basis,
           stamps = #stamps basis,
           localContext = #localContext basis,
           localStamps = localStamps,
           sysParam = #sysParam basis
          } : basis


      (*********************************************************************************************)
      fun setLocalContextFlattenedNamePathEnvOpt (localContext:localContext) flattenedNamePathEnv = 
          {
           flattenedNamePathEnvOpt = SOME flattenedNamePathEnv,
           typeContextOpt = #typeContextOpt localContext,
           newTopExternalVarIDBasisOpt = #newTopExternalVarIDBasisOpt localContext
          } : localContext

      fun setLocalContextTypeContextOpt (localContext:localContext) typeContext = 
          {
           flattenedNamePathEnvOpt = #flattenedNamePathEnvOpt localContext,
           typeContextOpt = SOME typeContext,
           newTopExternalVarIDBasisOpt = #newTopExternalVarIDBasisOpt localContext
          } : localContext

      fun setLocalContextNewExternalVarIDBasisOpt (localContext:localContext) externalVarIDBasis =  
          {
           flattenedNamePathEnvOpt = #flattenedNamePathEnvOpt localContext,
           typeContextOpt = #typeContextOpt localContext,
           newTopExternalVarIDBasisOpt = SOME externalVarIDBasis
          } : localContext

      (*********************************************************************************************)
      fun setLocalStampsVarNameStamp (localStamps : localStamps) varNameStamp =
          {
           varNameStamp = varNameStamp,
           freeTypeVarIDStamp = #freeTypeVarIDStamp localStamps,
           localVarIDStamp = #localVarIDStamp localStamps
          } : localStamps

      fun setLocalStampsUniqueLocalIdentifierStamp (localStamps : localStamps) localVarIDStamp =
          {
           varNameStamp = #varNameStamp localStamps,
           freeTypeVarIDStamp = #freeTypeVarIDStamp localStamps,
           localVarIDStamp = localVarIDStamp
          } : localStamps

      fun setLocalStampsFreeTypeVarIDStamp (localStamps : localStamps) freeTypeVarIDStamp =
          {
           varNameStamp = #varNameStamp localStamps,
           freeTypeVarIDStamp = freeTypeVarIDStamp,
           localVarIDStamp = #localVarIDStamp localStamps
          } : localStamps

      fun getStandardOutputInBasis (basis : basis) = 
          #standardOutput (#sysParam basis)

      fun getStandardErrorInBasis (basis : basis) = 
          #standardError (#sysParam basis)

      fun getStandardOutputInSysParam (sysParam : sysParam) = 
          #standardOutput sysParam

      fun getStandardErrorInSysParam (sysParam : sysParam) = 
          #standardError sysParam


      fun extendBasisWithNameMapOfStaticInterface (basis : basis) (nameMap : NameMap.basicInterfaceNameMap) =
          {
           context = {fixEnv = #fixEnv (#context basis),
	              externalVarIDBasis = #externalVarIDBasis (#context basis),
                      topTypeContext = #topTypeContext (#context basis),
                      nameMap =  
                      {
                       varNameMap = SEnv.unionWith #1 (#2 (#1 nameMap), #varNameMap (#nameMap (#context basis))),
                       tyNameMap = SEnv.unionWith #1 (#1 (#1 nameMap), #tyNameMap (#nameMap (#context basis))),
                       funNameMap = SEnv.unionWith #1 (#2 nameMap, #funNameMap (#nameMap (#context basis))),
                       sigNameMap = #sigNameMap (#nameMap (#context basis)),
                       strNameMap = SEnv.unionWith #1 (#3 (#1 nameMap), #strNameMap (#nameMap (#context basis)))
                      },
                      globalNameAliasEnv = #globalNameAliasEnv (#context basis),
                      globalIndexEnv = #globalIndexEnv (#context basis),
	              inlineEnv = #inlineEnv (#context basis),
                      functorEnv = #functorEnv (#context basis)},
           stamps = #stamps basis,
           localContext = #localContext basis,
           localStamps = #localStamps basis,
           sysParam = #sysParam basis
          } : basis

      fun extendBasisWithTypeEnvOfStaticInterface (basis : basis) (typeEnv : Types.interfaceEnv) =
          {
           context = {fixEnv = #fixEnv (#context basis),
	              externalVarIDBasis = #externalVarIDBasis (#context basis),
                      topTypeContext = 
                      {
                       tyConEnv = SEnv.unionWith #1 (#1 (#1 typeEnv), 
                                                     #tyConEnv (#topTypeContext (#context basis))),
                       varEnv = SEnv.unionWith #1 (#2 (#1 typeEnv), 
                                                   #varEnv (#topTypeContext (#context basis))),
                       sigEnv = #sigEnv (#topTypeContext (#context basis)),
                       funEnv = SEnv.unionWith #1 (#2 typeEnv, 
                                                   #funEnv (#topTypeContext (#context basis)))
                      },
                      nameMap = #nameMap (#context basis),
                      globalNameAliasEnv = #globalNameAliasEnv (#context basis),
                      globalIndexEnv = #globalIndexEnv (#context basis),
	              inlineEnv = #inlineEnv (#context basis),
                      functorEnv = #functorEnv (#context basis)},
           stamps = #stamps basis,
           localContext = #localContext basis,
           localStamps = #localStamps basis,
           sysParam = #sysParam basis
          } : basis

      fun extendBasisWithExternalVarIDBasisOfStaticInterface 
              (basis : basis) (externalVarIDBasis : VarIDContext.topExternalVarIDBasis) =
          {
           context = {fixEnv = #fixEnv (#context basis),
	              externalVarIDBasis = 
                      VarIDContext.extendTopVarExternalVarIDBasisWithTopVarExternalVarIDBasis 
                          {new = (#1 externalVarIDBasis, #2 externalVarIDBasis),
                           old = #externalVarIDBasis (#context basis)},
                      topTypeContext = #topTypeContext (#context basis),
                      nameMap = #nameMap (#context basis),
                      globalNameAliasEnv = #globalNameAliasEnv (#context basis),
                      globalIndexEnv = #globalIndexEnv (#context basis),
	              inlineEnv = #inlineEnv (#context basis),
                      functorEnv = #functorEnv (#context basis)},
           stamps = #stamps basis,
           localContext = #localContext basis,
           localStamps = #localStamps basis,
           sysParam = #sysParam basis
          } : basis
          
end

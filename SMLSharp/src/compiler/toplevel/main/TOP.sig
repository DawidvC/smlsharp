(**
 * coordinates whole phases of the compiler.
 *
 * @copyright (c) 2006, Tohoku University.
 * @author YAMATODANI Kiyoshi
 * @version $Id: TOP.sig,v 1.34 2008/08/05 14:44:00 bochao Exp $
 *)
signature TOP =
sig

  (***************************************************************************)

  (**
   *)
  datatype interactionMode =
           (** print prompt, continue session on error. *)
           Interactive
         | (** no prompt. *)
           NonInteractive of
               {(** stop session on error if true. *) stopOnError : bool}
         | (** special session for compiling prelude *)
           Prelude

  (**
   * A context holds global status of compilation, such as global table.
   * Contexts are generated by the "initialize" function,
   * and updated by the "run" function.
   *)
  type context = TopBasis.context

  type stamps = TopBasis.stamps

  (** parameters to create a context. *)
  type sysParam = TopBasis.sysParam

  (**
   * source from which program is obtained.
   *)
  type source = 
       {
         (** interactionMode of the session. *)
         interactionMode : interactionMode,
         (** a channel from which the source code is read. *)
         initialSourceChannel : ChannelTypes.InputChannel,
         (** the name of the initialSource.
          * This string is used in the error/warning messages. *)
         initialSourceName : string,
         (** a function which returns the "current" directory. *)
         getBaseDirectory : unit -> string
       }

  (**
   * initialize system.
   * <p>
   * You must this function at first before using the compiler.
   * </p>
   * @return new context
   *)
  val initializeContextAndStamps : unit -> context * stamps 

  val pickle : context * stamps -> Pickle.outstream -> unit

  val unpickle : Pickle.instream -> context * stamps 

  val printError : sysParam -> string -> unit

  val printWarnings : sysParam -> UserError.errorInfo list -> unit

  val printIntermediateCodes : sysParam -> string -> ('a -> string) -> 'a list -> unit

  val errorHandler : sysParam -> exn -> unit
  (**
   * compile (and execute) a source code.
   * <p>
   * The top loop runs in either of interactive mode or non-interactive mode.
   * If interactive, prompt is printed.
   * And the top loop continues even when any user error or compile
   * bug is detected, if interactive.
   * If non-interactive, any error or bug stops the loop.
   * </p>
   * @params context source
   * @param context the context, which is updated by this function.
   * @param source data source from which an source code is read.
   * @return (true * context) if compile and session.execute succeed and the updated context
   *)
  val run : context -> stamps -> sysParam -> source -> bool * (context * stamps)

  (**
   * compile (and execute) a separate compiled object.
   * @params context source
   * @param context the context, which is updated by this function.
   * @param source data source from which an object code is read.
   * @return true if compile and session.execute succeed.
   *)
(*
  val runObject : context -> source -> bool
*)

end


This is a prototype implementation of IML debugger for VM emulator.
For now, this might be sufficient to debug our compiler.
In future, another debugger for C runtime will be implemented.

The following commands have been implemented.
Command names are borrowed from GDB.

  backtrace
  break FILE_NAME LINE
  continue
  delete N
  frame N
  info variables
  print VARIABLE_NAME
  quit
  run
  set args ARG1 ... ARGN

----------

Assume that source files are built by 'make' at 'src' directory.
  ----------------------------------------
  $ cd src
  $ make
  ----------------------------------------

This debugger runs in the batch mode.
It accepts a compiled bytecode file which is generated by the IML batch
compiler imlc at develop/obj/sml/bin/imlc .

The example program is a lambda reducer at
doc/casual/yamatodani/PetitLambda .
We can compile it into a bytecode file "petitlambda.imo", as follows.
  ----------------------------------------
  $ cd src/compiler/debugger/main/
  $ ../../../../obj/sml/bin/imlc \
        -usebasis \
        -o petitlambda.imo \
        ../../../lib/ml-yacc/load.sml \
        ../../../../../doc/casual/yamatodani/PetitLambda/load.sml

  $ ls -l petitlambda.imo
  -rw-r--r--  1 yamato ‚È‚µ 8132805 Oct 25 20:54 petitlambda.imo
  ----------------------------------------

Then, the followoing is a debugger session.

  ----------------------------------------
  $ sml
  - CM.make();
  - Main.main "petitlambda.imo";    (* specify a bytecode file. *)
      :
  source files:
    ../../../../../doc/casual/yamatodani/PetitLambda/load.sml
    Array.sml
    ArraySlice.sml
      :
    parser2.sml
    stream.sml

         // specify the command line arguments to the program. 
  (IMLDB) set args
../../../../../doc/casual/yamatodani/PetitLambda/stoy.lmd

  (IMLDB) break lambda.sml 766       // set break point. 
  break point: 0 at offset = 886 opcode = TailApply_S

  (IMLDB) run                   // start execution 
        :
  break point: 0 at offset = 886 opcode = TailApply_S

  (IMLDB) info variables    // show slot and name of local variables
  [62] isTTY
  [51] ins
  [38] rawline
  [34] line
  [46] $23091
      :
      :
  [15] $169480

  (IMLDB) print isTTY              // isTTY : bool
  isTTY = Int(0)                   // Int(0) === false 

  (IMLDB) print line               // line : string 
  line = Pointer(2018b=Header{size=2,bitmap=0,blockType=String})

  (IMLDB) backtrace                // show call chain 
  [0] lambda.sml:766.3-788.9
  [1] lambda.sml:801.9-801.24
  [2] List.sml:132.53-132.68
  [3] lambda.sml:794.7-802.15
  [4] ../../../../../doc/casual/yamatodani/PetitLambda/load.sml:7.1-7.59

  (IMLDB) frame 3                  // select a frame of index 3

  (IMLDB) info variables           // show variables at frame 3
  [23] $LV169913
  [21] args
  [28] $23141
    :
    :
  [10] $169552

  (IMLDB) print args                // args : string list
  args = Pointer(1c95c=Header{size=3,bitmap=6,blockType=Record})

  (IMLDB) continue                  // resume execution
  break point: 0 at offset = 886 opcode = TailApply_S

  (IMLDB) delete 0                  // delete break point 0
  delete break point: 0 at offset = 886 opcode = TailApply_S

  (IMLDB) continue
  Program exited normally

  (IMLDB) quit                      // exit debugger
  val it = 0wx0 : Word32.word
  ----------------------------------------



(**
 * user errors detected in type inference phase.
 * @author Liu Bochao
 * @version $Id: ModuleCompilationError.ppg,v 1.2 2008/03/24 05:45:50 bochao Exp $
 *)
structure ModuleCompilationError =
struct

  (***************************************************************************)

  local
    structure UE = UserError
    val errorQueue = UE.createQueue ()
  in

  (*%
   *)
  exception
  (*%
   * @format({name})
   * "unbound" +d "type" +d "constructor" ":" +d name
   *)
  TyConNotFound of {name : string}

  and
  (*%
   * @format({name}) "unbound" +d "variable" +d "or" +d "constructor:" +d name
   *)
  VarNotFound of { name: string}

  and
  (*%
   * @format({name}) "unbound" +d "constructor:" +d name "is" +d "variable"
   *)
  ConNotFound of { name: string}

  and
  (*%
   * @format({name}) "unbound" +d "exception:" +d name
   *)
  ExnNotFound of {name: string}

  and
  (*%
   * @format({name}) "unbound" +d "structure:" +d name
   *)
  StructureNotFound of {name: string}

  and
  (*%
   * @format({name}) "unbound" +d "signature:" +d name
   *)
  SignatureNotFound of {name: string}

  and
  (*%
   * @format({name}) "unbound" +d "functor:" +d name
   *)
  FunctorNotFound of {name: string}
  
  and
  (*%
   * @format({name}) "Signature" +d "mismatch" +d "(undefined" + d "datatype" +d "in" +d "structure):" +d name
   *)
  SigMisMatchNotFoundDataTy of {name: string}

  and
  (*%
   * @format({name}) "Signature" +d "mismatch" +d "(undefined" +d "data" +d 
   *                 "constructor" +d "in" +d "structure)" name
   *)
  SigMisMatchNotFoundCon of {name: string}

  and

  (*%
   * @format({name}) "Signature" +d "mismatch" +d "(undefined" +d "exception" +d 
   *                 "constructor" +d "in" +d "structure):" +d name
   *)
  SigMisMatchNotFoundExn of {name: string}

  and
  (*%
   * @format({name}) "Signature" +d "mismatch:" +d "(undefined" +d "variable" +d 
   *                 "in" +d "structure):" name
   *)
  SigMisMatchNotFoundVar of {name: string}

  and
  (*%
   * @format({name}) "Signature" +d "mismatch" +d "(undefined" +d "structure" +d 
   *                 "in" +d "structure):" +d name
   *)
  SigMisMatchNotFoundStr of {name: string}

  and
  (*%
   * @format({name}) "Interface" +d "mismatch" +d "(undefined" +d "functor" +d 
   *                 "in" +d "implementation):" +d name
   *)
  InterfaceMisMatchNotFoundFunctor of {name: string}

  val isAnyError = ref false

  fun initializeModuleCompilationError () = 
      (UE.clearQueue errorQueue; isAnyError := false)
  fun getErrorsAndWarnings () = UE.getErrorsAndWarnings errorQueue
  fun getErrors () = UE.getErrors errorQueue
  fun isError () = !isAnyError
  fun getWarnings () = UE.getWarnings errorQueue
  fun enqueueError x = (isAnyError := true; UE.enqueueError errorQueue x)
  val enqueueWarning = UE.enqueueWarning errorQueue
  end

end

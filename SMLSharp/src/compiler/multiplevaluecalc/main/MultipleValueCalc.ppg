(**
 * @copyright (c) 2006, Tohoku University.
 * @author Huu-Duc Nguyen
 * @version $Id: MultipleValueCalc.ppg,v 1.31 2008/08/06 17:23:40 ohori Exp $
 *)

structure MultipleValueCalc  = struct

 type loc = Loc.loc

 (*%
  * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
  *)
 (*%
  * @prefix typed
  * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
  *)
 type ffiAttributes = Absyn.ffiAttributes

 (*%
  * @formatter(AnnotatedTypes.ty) AnnotatedTypes.format_ty
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.ty) AnnotatedTypes.format_ty
  *)
 type ty = AnnotatedTypes.ty

(*
 (*%
  * @formatter(LocalVarID.id) LocalVarID.format_id
  *)
 (*%
  * @prefix typed
  * @formatter(LocalVarID.id) LocalVarID.format_id
  *)
 type varid = LocalVarID.id
*)

 (*%
  * @formatter(AnnotatedTypes.varInfo) AnnotatedTypes.format_varInfoWithoutType
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.varInfo) AnnotatedTypes.format_varInfo
  *)
 type varInfo = AnnotatedTypes.varInfo

 (*%
  * @formatter(AnnotatedTypes.primInfo) AnnotatedTypes.format_primInfo
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.primInfo) AnnotatedTypes.format_primInfo
  *)
 type primInfo = AnnotatedTypes.primInfo

 (*%
  * @formatter(AnnotatedTypes.annotationLabel) AnnotatedTypes.format_annotationLabel
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.annotationLabel) AnnotatedTypes.format_annotationLabel
  *)
 type annotationLabel = AnnotatedTypes.annotationLabel

 (*%
  * @formatter(AnnotatedTypes.funStatus) AnnotatedTypes.format_funStatus
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.funStatus) AnnotatedTypes.format_funStatus
  *)
 type funStatus = AnnotatedTypes.funStatus

 (*%
  * @formatter(AnnotatedTypes.btvEnv) AnnotatedTypes.format_btvEnv
  *)
 (*%
  * @prefix typed
  * @formatter(AnnotatedTypes.btvEnv) AnnotatedTypes.format_btvEnv
  *)
 type btvEnv = AnnotatedTypes.btvEnv

 (*%
  * @formatter(ExnTagID.id) ExnTagID.format_id
  *)
 (*%
  * @prefix typed
  * @formatter(ExnTagID.id) ExnTagID.format_id
  *)
 type globalTag = ExnTagID.id

 (*%
  * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
  *)
 (*%
  * @prefix typed
  * @formatter(ConstantTerm.constant) ConstantTerm.format_constant
  *)
 datatype constant = datatype ConstantTerm.constant

 (*
  * formatter precedence:
  * L9 { x [ ] }    field selection
  * L8 { x y }      application
  *
  * L2 { x : y }    type annotation (see also AnnotatedTypes)
  * N1 { }          let, raise, switch, handle, etc.
  * R1 { x => y }   abstraction
  *
  * Precedence 0 is reserved for cut.
  * Use +1 for separating declarations.
  * Be careful of usage of guard so that the above +1 works fine.
  *)

 (*%
  * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
  * @formatter(bool) SmlppgUtil.formatBinaryChoice
  *)
 (*%
  * @prefix typed
  * @formatter(listWithEnclosureOne) SmlppgUtil.formatListWithEnclosureOne
  * @formatter(listWithEnclosure) SmlppgUtil.formatListWithEnclosure
  * @formatter(bool) SmlppgUtil.formatBinaryChoice
  *)
 datatype mvexp =
          (*%
           * @format({funExp,
           *          funTy,
           *          argExpList: arg args:listWithEnclosureOne,
           *          attributes,
           *          loc:loc})
           * L9{
           *   "FOREIGNAPPLY(" !N0{ funExp } ")"
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({funExp,
           *          funTy,
           *          argExpList: arg args:listWithEnclosureOne,
           *          attributes,
           *          loc:loc})
           * L9{
           *   L2{
           *     "FOREIGNAPPLY(" !N0{ funExp } ")"
           *     +1 "as" +d funTy
           *   }
           *   2[ +1 args(arg)("," +2, "{", "}") ]
           * }
           *)
          MVFOREIGNAPPLY of
          {
           funExp : mvexp,
           funTy : ty,
           argExpList : mvexp list,
           attributes: ffiAttributes,
           loc : loc
          }
        | (*%
           * @format({funExp, funTy, attributes, loc})
           * "EXPORTCALLBACK(" !N0{ funExp } ")"
           *)
          (*%
           * @prefix typed
           * @format({funExp, funTy, attributes, loc})
           * L2{
           *   "EXPORTCALLBACK(" !N0{ funExp } ")"
           *   +1 "as" +d funTy
           * }
           *)
          MVEXPORTCALLBACK of
          {
           funExp : mvexp,  (* must be MVFNM *)
           funTy : ty,
           attributes: ffiAttributes,
           loc: loc
          }
        | (*%
           * @format({ty, loc}) "_sizeof(" !N0{ ty } ")"
           *)
          (*%
           * @prefix typed
           * @format({ty, loc}) "_sizeof(" !N0{ ty } ")"
           *)
          MVSIZEOF of {ty : ty, loc : loc}
        | (*%
           * @format({value, loc}) value
           *)
          (*%
           * @prefix typed
           * @format({value, loc}) value
           *)
          MVCONSTANT of {value : constant, loc : loc}
        | (*%
           * @format({name, kind, ty, loc}) name ":" ty
           *)
          (*%
           * @prefix typed
	   * @format({name, kind, ty, loc}) ty
           *)
          MVGLOBALSYMBOL of {name:string, kind:Absyn.globalSymbolKind, ty:ty, loc:loc}
        | (*%
           * @format({tagValue, loc}) "EXNTAG(" tagValue ")"
           *)
          (*%
           * @prefix typed
           * @format({tagValue, loc}) "EXNTAG(" tagValue ")"
           *)
          MVEXCEPTIONTAG of {tagValue : globalTag, loc : loc}
        | (*%
           * @format({varInfo, loc}) varInfo
           *)
          (*%
           * @prefix typed
           * @format({varInfo, loc}) varInfo
           *)
          MVVAR of {varInfo : varInfo, loc : loc}
        | (*%
           * @format({arrayExp, indexExp, elementTy, loc})
           * N1{
           *   "GETFIELD"
           *   2[ +1 L9{ arrayExp 1 "[" !N0{ indexExp } "]" } ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({arrayExp, indexExp, elementTy, loc})
           * L2{
           *   N1{
           *     "GETFIELD"
           *     2[ +1 L9{ arrayExp 1 "[" !N0{ indexExp } "]" } ]
           *   }
           *   +1 ":" +d elementTy
           * }
           *)
          MVGETFIELD of
          {arrayExp : mvexp, indexExp : mvexp, elementTy : ty, loc : loc}
        | (*%
           * @format({valueExp, arrayExp, indexExp, elementTy, loc})
           * N1{ !N0{
           *   "SETFIELD"
           *   2[ +1 L9{ arrayExp 1 "[" !N0{ indexExp } "]" }
           *      +d ":="
           *      2[ +1 valueExp ] ]
           * } }
           *)
          (*%
           * @prefix typed
           * @format({valueExp, arrayExp, indexExp, elementTy, loc})
           * N1{ !N0{
           *   "SETFIELD"
           *   2[ +1 L9{ arrayExp 1 "[" !N0{ indexExp } "]" }
           *      +d ":="
           *      2[ +1 valueExp ] ]
           * } }
           *)
          MVSETFIELD of
          {
           valueExp : mvexp,
           arrayExp : mvexp,
           indexExp : mvexp,
           elementTy : ty,
           loc: loc
          }
        | (*%
           * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel,
           *         loc})
           * N1{ !N0{
           *   "SETTAIL"
           *   2[ +1 L9{ consExp 1 "[" tailLabel "]" }
           *      +d ":="
           *      2[ +1 newTailExp ] ]
           * } }
           *)
          (*%
           * @prefix typed
           * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel,
           *         loc})
           * N1{ !N0{
           *   "SETTAIL"
           *   2[ +1 L9{ consExp 1 "[" tailLabel "]" }
           *      +d ":="
           *      2[ +1 newTailExp ] ]
           * } }
           *)
          MVSETTAIL of
          {
           consExp : mvexp,
           newTailExp : mvexp,
           tailLabel : string,
           listTy : ty,
           consRecordTy : ty,
           loc: loc
          }
        | (*%
           * @format({sizeExp, initialValue, elementTy, isMutable, loc})
           * N1{
           *   "ARRAY"
           *   isMutable()(+d "mutable",)
           *   2[ 1 "(" !N0{ sizeExp "," +2 initialValue } ")" ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({sizeExp, initialValue, elementTy, isMutable, loc})
           * N1{
           *   "ARRAY"
           *   isMutable()(+d "mutable",)
           *   2[ 1 "(" !N0{ sizeExp "," +2 initialValue } ")" ]
           * }
           *)
          MVARRAY of
          {
           sizeExp : mvexp,
           initialValue : mvexp,
           elementTy : ty,
           isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({srcExp, srcIndexExp, dstExp, dstIndexExp, lengthExp,
           *          elementTy, loc})
           * N1{
           * "COPYARRAY"
           * 2[ 1 "(" !N0{
           *   srcExp "," +2
           *   srcIndexExp "," +2
           *   dstExp "," +2
           *   dstIndexExp "," +2
           *   lengthExp
           * } ")" ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({srcExp, srcIndexExp, dstExp, dstIndexExp, lengthExp,
           *          elementTy, loc})
           * N1{
           * "COPYARRAY"
           * 2[ 1 "(" !N0{
           *   srcExp "," +2
           *   srcIndexExp "," +2
           *   dstExp "," +2
           *   dstIndexExp "," +2
           *   lengthExp
           * } ")" ]
           * }
           *)
          MVCOPYARRAY of
          {
           srcExp : mvexp,
           srcIndexExp : mvexp,
           dstExp : mvexp,
           dstIndexExp : mvexp,
           lengthExp : mvexp,
           elementTy : ty,
           loc: loc
          }
        | (*%
           * @format({primInfo,
           *          argExpList:arg args,
           *          instTyList:ty tys:listWithEnclosure,
           *          loc})
           * L9{ primInfo
           *     2[ 1 "(" !N0{ args(arg)("," +2) } ")" ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({primInfo,
           *          argExpList:arg args,
           *          instTyList:ty tys:listWithEnclosure,
           *          loc})
           * L9{ primInfo
           *     2[ 1 "(" !N0{ tys(ty)("," +2, "{", "}" "," +1)
           *              !N0{ args(arg)("," +2) } } ")"
           *      ] }
           *)
          MVPRIMAPPLY of
          {
           primInfo : primInfo,
           argExpList : mvexp list,
           instTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({funExp, funTy,
           *          argExpList:arg args:listWithEnclosureOne, loc})
           * L9{ funExp 2[ +1 args(arg)("," +2, "{", "}") ] }
           *)
          (*%
           * @prefix typed
           * @format({funExp, funTy,
           *          argExpList:arg args:listWithEnclosureOne, loc})
           * L9{ funExp 2[ +1 args(arg)("," +2, "{", "}") ] }
           *)
          MVAPPM of
          {
           funExp : mvexp,
           funTy : ty,
           argExpList : mvexp list,
           loc : loc
          }
        | (*%
           * @format({localDeclList : dec decs, mainExp, loc})
           * N1{ !N0{
           *   "let"
           *   2[ +1 decs(dec)(+1) ]
           *   +1 "in"
           *   2[ +1 mainExp ]
           *   +1 "end"
           * } }
           *)
          (*%
           * @prefix typed
           * @format({localDeclList : dec decs, mainExp, loc})
           * N1{ !N0{
           *   "let"
           *   2[ +1 decs(dec)(+1) ]
           *   +1 "in"
           *   2[ +1 mainExp ]
           *   +1 "end"
           * } }
           *)
          MVLET of
          {
           localDeclList : mvdecl list,
           mainExp : mvexp,
           loc : loc
          }
        | (*%
           * @format({expList:field fields, tyList, loc})
           * { "{" 2[ 1 !N0{ fields(field)("," +1) } ] 1 "}" }
           *)
          (*%
           * @prefix typed
           * @format({expList:field fields, tyList, loc})
           * { "{" 2[ 1 !N0{ fields(field)("," +1) } ] 1 "}" }
           *)
          MVMVALUES of {expList : mvexp list, tyList : ty list, loc : loc}
        | (*%
           * @format({expList:field fields, recordTy, annotation, isMutable,
           *          loc})
           * !N0{ "(" 2[ 1 fields(field)("," +1) ] 1 ")"
           *          d "^" annotation }
           *)
          (*%
           * @prefix typed
           * @format({expList:field fields, recordTy, annotation, isMutable,
           *          loc})
           * L2{ !N0{ "(" 2[ 1 fields(field)("," +1) ] 1 ")"
           *          d "^" annotation }
           *    +1 ":" +d recordTy }
           *)
          MVRECORD of
          {
           expList : mvexp list,
           recordTy : ty,
           annotation : annotationLabel,
           isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({recordExp, label, recordTy, resultTy, loc})
           * L9{ recordExp 2[ 1 "[" label "]" ] }
           *)
          (*%
           * @prefix typed
           * @format({recordExp, label, recordTy, resultTy, loc})
           * L2{
           *   L9{ recordExp 2[ 1 "[" label "]" ] }
           *   +1 ":" +d resultTy
           * }
           *)
          MVSELECT of
          {
           recordExp : mvexp,
           label : string,
           recordTy : ty,
           resultTy : ty,
           loc : loc
          }
        | (*%
           * @format({recordExp, recordTy, label, valueExp, valueTy, loc})
           * L9{
           *   recordExp
           *   2[ +1 "#" +d
           *      !N0{ "{"
           *           2[ 1 label + "=" 2[ +1 valueExp ] ]
           *           1 "}" } ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({recordExp, recordTy, label, valueExp, valueTy, loc})
           * L9{
           *   recordExp
           *   2[ +1 "#" +d
           *      !N0{ "{"
           *           2[ 1 label + "=" 2[ +1 valueExp ] ]
           *           1 "}" } ]
           * }
           *)
          MVMODIFY of
          {
           recordExp : mvexp,
           recordTy : ty,
           label : string,
           valueExp : mvexp,
           valueTy : ty,
           loc : loc
          }
        | (*%
           * @format({argExp, resultTy, loc})
           * N1{ "raise" 2[ +1 argExp ] }
           *)
          (*%
           * @prefix typed
           * @format({argExp, resultTy, loc})
           * L2{
           *   N1{ "raise" 2[ +1 argExp ] }
           *   +1 ":" +d resultTy
           * }
           *)
          MVRAISE of
          {
           argExp : mvexp,
           resultTy : ty,
           loc : loc
          }
        | (*%
           * @format({exp, exnVar, handler, loc})
           * N1{ !N0{
           *   "try"
           *   2[ +1 exp ]
           *   +1 R1{ "handle" +d !N0{ exnVar } +d "=>" 2[ +1 handler ] }
           * } }
           *)
          (*%
           * @prefix typed
           * @format({exp, exnVar, handler, loc})
           * N1{ !N0{
           *   "try"
           *   2[ +1 exp ]
           *   +1 R1{ "handle" +d !N0{ exnVar } +d "=>" 2[ +1 handler ] }
           * } }
           *)
          MVHANDLE of
          {
           exp : mvexp,
           exnVar : varInfo,
           handler : mvexp,
           loc : loc
          }
        | (*%
           * @format({argVarList: arg args:listWithEnclosureOne,
           *         funTy, bodyExp, annotation, loc})
           * R1{
           *   "fn"
           *   +d args(arg)("," +2, "{", "}")
           *   +d "=>"
           *   2[ +1 bodyExp ]
           * }
           *)
          (*%
           * @prefix typed
           * @format({argVarList: arg args,
           *         funTy, bodyExp, annotation, loc})
           * R1{
           *   "fn" "^" annotation
           *   2[ +1 ":" +d N10{ funTy } ]
           *   +1 "{" !N0{ args(arg)("," +2) } "}"
           *   +d "=>"
           *   2[ +1 bodyExp ]
           * }
           *)
          MVFNM of
          {
           argVarList : varInfo list,
           funTy : ty,
           bodyExp : mvexp,
           annotation : annotationLabel,
           loc : loc
          }
        | (*%
           * @format({btvEnv:btvEnv, expTyWithoutTAbs, exp, loc})
           * !N0{ "POLY[" 2[ 1 exp ] 1 "]" }
           *)
          (*%
           * @prefix typed
           * @format({btvEnv:btvEnv, expTyWithoutTAbs, exp, loc})
           * !N0{ "[" btvEnv "." 2[ 1 exp ] 1 "]" }
           *)
          MVPOLY of
          {
           btvEnv : btvEnv,
           expTyWithoutTAbs : ty,
           exp : mvexp,
           loc : loc
          }
        | (*%
           * @format({exp, expTy,
           *          instTyList:tyArg tyArgs:listWithEnclosureOne,
           *          loc})
           * L9{ exp 2[ +1 "{TAPP}" ] }
           *)
          (*%
           * @prefix typed
           * @format({exp, expTy,
           *          instTyList:tyArg tyArgs:listWithEnclosureOne,
           *          loc})
           * L9{ exp 2[ +1 tyArgs(tyArg)("," +2, "{", "}") ] }
           *)
          MVTAPP of
          {
           exp : mvexp,
           expTy : ty,
           instTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
           * N1{ !N0{
           *   { "switch" 2[ +1 switchExp ] }
           *   +1 "of" +d rules(rule)(+1 " |" +d)
           *   +1 " |" +d R1{ "_" +d "=>" +1 defaultExp }
           * } }
           *
           * @format:rule({constant, exp})
           * R1{ constant +d "=>" +1 exp }
           *)
          (*%
           * @prefix typed
           * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
           * N1{ !N0{
           *   { "switch" 2[ +1 switchExp ] }
           *   +1 "of" +d rules(rule)(+1 " |" +d)
           *   +1 " |" +d R1{ "_" +d "=>" +1 defaultExp }
           * } }
           *
           * @format:rule({constant, exp})
           * R1{ constant +d "=>" +1 exp }
           *)
          MVSWITCH of
          {
           switchExp : mvexp,
           expTy : ty,
           branches : {constant : mvexp , exp : mvexp} list,
           defaultExp : mvexp,
           loc : loc
          }
        | (*%
           * @format({exp, expTy, targetTy, loc})
           * "cast" "(" !N0{ exp } ")"
           *)
          (*%
           * @prefix typed
           * @format({exp, expTy, targetTy, loc})
           * L2{
           *   "cast" "(" !N0{ exp } ")"
           *   2[ +1 "to" +d targetTy ]
           * }
           *)
          MVCAST of {exp : mvexp, expTy : ty, targetTy : ty, loc : loc}

      and mvdecl =
          (*%
           * @format({boundVars:var vars:listWithEnclosureOne, boundExp, loc})
           * !N0{ "val" +d { vars(var)("," +1, "{", "}") +d "=" }
           *      2[ +1 boundExp ] }
           *)
          (*%
           * @prefix typed
           * @format({boundVars:var vars:listWithEnclosureOne, boundExp, loc})
           * !N0{ "val" +d { vars(var)("," +1, "{", "}") +d "=" }
           *      2[ +1 boundExp ] }
           *)
          MVVAL of
          {
           boundVars : varInfo list,
           boundExp : mvexp,
           loc : loc
          }
        | (*%
           * @format({recbindList:bind binds,loc})
           * !N0{ "val" +d "rec" +d binds(bind)(+1 "and" +d) }
           *
           * @format:bind({boundVar, boundExp})
           * { boundVar +d "=" }
           * 2[ +1 boundExp ]
           *)
          (*%
           * @prefix typed
           * @format({recbindList:bind binds,loc})
           * !N0{ "val" +d "rec" +d binds(bind)(+1 "and" +d) }
           *
           * @format:bind({boundVar, boundExp})
           * { boundVar +d "=" }
           * 2[ +1 boundExp ]
           *)
          MVVALREC of
          {
           recbindList : {boundVar : varInfo, boundExp : mvexp } list,
           loc : loc
          }
        | (*%
           * @format({btvEnv, recbindList:bind binds, loc})
           * !N0{
           *   "POLY["
           *   2[ 1 "val" +d "rec" +d binds(bind)(+1 "and" +d) ]
           *   1 "]"
           * }
           *
           * @format:bind({boundVar, boundExp})
           * { boundVar +d "=" }
           * 2[ +1 boundExp ]
           *)
          (*%
           * @prefix typed
           * @format({btvEnv, recbindList:bind binds, loc})
           * !N0{
           *   "[" btvEnv "."
           *   2[ 1 "val" +d "rec" +d binds(bind)(+1 "and" +d) ]
           *   1 "]"
           * }
           *
           * @format:bind({boundVar, boundExp})
           * { boundVar +d "=" }
           * 2[ +1 boundExp ]
           *)
          MVVALPOLYREC of
          {
           btvEnv : btvEnv,
           recbindList : {boundVar : varInfo, boundExp : mvexp } list,
           loc : loc
          }

 (*%
  *)
 (*%
  * @prefix typed
  *)
 datatype basicBlock =
          (*%
           * @format({code, exnIDSet}) code
           * @format:code(dec decs) 
           *  decs(dec)(+1)
           *)
          MVVALBLOCK of {code : mvdecl list, exnIDSet : ExnTagID.Set.set}
        | (*%
           * @format({name, 
                      actualArgName, 
                      typeResolutionTable,
                      exnTagResolutionTable, 
                      externalVarIDResolutionTable,
                      refreshedExceptionTagTable, 
                      refreshedExternalVarIDTable, 
                      loc})
           * name "(" actualArgName ")"
           *)
          MVLINKFUNCTORBLOCK of {name : string, 
                                 actualArgName : string,
                                 typeResolutionTable : AnnotatedTypes.tyBindInfo TyConID.Map.map,
                                 exnTagResolutionTable : ExnTagID.id ExnTagID.Map.map,
                                 externalVarIDResolutionTable : ExternalVarID.id ExternalVarID.Map.map,
                                 refreshedExceptionTagTable : ExnTagID.id ExnTagID.Map.map,
                                 refreshedExternalVarIDTable : ExternalVarID.id ExternalVarID.Map.map,
                                 loc : loc}
 (*%
  * @prefix typed
  *)
 (*%
  *)
 datatype topBlock = 
          (*%
           * @format({name, formalAbstractTypeIDSet, formalVarIDSet, formalExnIDSet, 
                      generativeVarIDSet, generativeExnIDSet, bodyCode:dec decs})
           * "functor" + name +  "=" +d  
           *  "{" +d 3[decs(dec)(+3)] +d "}"
           *)
          MVFUNCTORBLOCK of {name : string, 
                             formalAbstractTypeIDSet : TyConID.Set.set, 
                             formalVarIDSet : ExternalVarID.Set.set,
                             formalExnIDSet : ExnTagID.Set.set,
                             generativeVarIDSet : ExternalVarID.Set.set,
                             generativeExnIDSet : ExnTagID.Set.set,
                             bodyCode : basicBlock list}      
        | (*%
           * @format(info) info
           *)
          MVBASICBLOCK of basicBlock
end

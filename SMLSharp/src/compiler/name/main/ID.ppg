(**
 * identifier of type, term, label and etc.
 *
 * @copyright (c) 2006, Tohoku University.
 * @author YAMATODANI Kiyoshi
 * @version $Id: ID.ppg,v 1.15 2008/08/05 14:43:59 bochao Exp $
 *)
structure ID :> ID =
struct

  (***************************************************************************)

  structure P = Pickle

  (***************************************************************************)

  (*% *)
  type id = int

  (***************************************************************************)

  fun toString elementID =
      Int.toString elementID

  fun compare (leftElementID, rightElementID) =
      Int.compare (leftElementID, rightElementID)
      
  fun eq (id1, id2) = 
      case compare (id1, id2) of
          EQUAL => true
        | _ => false

  val initialID = 0

  val initialReservedID = ~1

  fun nextID currentID = 
      currentID + 1

  fun nextNthID currentID n  = 
      currentID + n

  fun nextReservedID currentReservedID = 
      currentReservedID - 1 

  fun nextNthReservedID currentReservedID n =
      currentReservedID - n
      
  val pu_ID = P.int 

  (***************************************************************************)
  structure IDOrd =
  struct 
    type ord_key = id
    val compare = compare
  end

  structure Map = BinaryMapMaker(IDOrd);

  structure Set = BinarySetFn(IDOrd);

  fun isEqual (id1, id2) =
      case IDOrd.compare (id1, id2) of
          EQUAL => true
        | _ => false

  fun toInt id = id
  (***************************************************************************)

end;

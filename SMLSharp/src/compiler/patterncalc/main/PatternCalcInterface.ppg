(**
 * Elaborated interface
 *
 * @copyright (c) 2011, Tohoku University.
 * @author UENO Katsuhiro
 *)
structure PatternCalcInterface =
struct

  (*% @formatter(Loc.loc) Loc.format_loc *)
  type loc = Loc.loc

  (*% @formatter(Absyn.ty) Absyn.format_ty *)
  type ty = Absyn.ty

  (*% @formatter(Absyn.longid) Absyn.format_longid *)
  type longid = Absyn.longid

  (*% @formatter(Absyn.tvar) Absyn.format_tvar *)
  type tvar = Absyn.tvar

  (*% @formatter(PatternCalc.scopedTvars) PatternCalc.format_scopedTvars *)
  type scopedTvars = PatternCalc.scopedTvars

  (*% @formatter(AbsynInterface.opacity) AbsynInterface.format_opacity *)
  type opacity = AbsynInterface.opacity

  (*%
   * @formatter(AbsynInterface.overloadCase) AbsynInterface.format_overloadCase
   *)
  type overloadCase = AbsynInterface.overloadCase

  (*%
   * @formatter(AbsynInterface.overloadMatch)
   * AbsynInterface.format_overloadMatch
   *)
  type overloadMatch = AbsynInterface.overloadMatch

  (*%
   * @formatter(AbsynInterface.overloadInstance)
   * AbsynInterface.format_overloadInstance
   *)
  datatype overloadInstance = datatype AbsynInterface.overloadInstance

  (*%
   * @formatter(AbsynInterface.valbindBody) AbsynInterface.format_valbindBody
   *)
  datatype valbindBody = datatype AbsynInterface.valbindBody

  (*%
   * @formatter(AbsynInterface.datbind) AbsynInterface.format_datbind
   *)
  type datbind = AbsynInterface.datbind

  (*%
   * @formatter(option) TermFormat.formatOptionalOption
   * @formatter(declist) TermFormat.formatDeclList
   * @formatter(PatternCalc.plsigexp) PatternCalc.format_plsigexp
   * @formatter(seq) TermFormat.formatSeqList
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   *)
  datatype pidec =
      (*%
       * @format({scopedTvars, vid, body, loc})
       * "val" scopedTvars +d body()(vid)
       *)
      PIVAL of
      {
        scopedTvars: scopedTvars,
        vid: string,
        body: valbindBody,
        loc: loc
      }
    | (*%
       * @format({tyvars: tv tvs, tycon, ty, opacity, loc})
       * "type" +d tvs:seq(tv)("(","," 1,")" +d) tycon +d "="
       * 2[ +1 ty +1 "as" +d opacity ]
       *)
      (*
       *       syntax                  opacity
       * type 'a foo = ty            TRANSPARENT
       * type 'a foo ( = ty )        OPAQUE_NONEQ
       * eqtype 'a foo ( = ty )      OPAQUE_EQ
       *)
      PITYPE of
      {
        tyvars: tvar list,
        tycon: string,
        ty: ty,
        opacity: opacity,
        loc: loc
      }
    | (*%
       * @format({tycon, builtinName, opacity, loc})
       * "datatype" +d tycon +d "="
       * 2[ +1 "_builtin" +d "datatype" +d builtinName +1 "as" +d opacity ]
       *)
      (*
       *                syntax                                 opacity
       * datatype foo = _builtin datatype int                TRANSPARENT
       * datatype foo ( = _builtin datatype int )            OPAQUE_NONEQ
       * datatype foo ( = _builtin datatype int ) as eqtype  OPAQUE_EQ
       *)
      PITYPEBUILTIN of
      {
        tycon: string,
        builtinName: string,
        opacity: opacity,
        loc: loc
      }
    | (*%
       * @format({datbind: bind binds, loc})
       * "datatype" +d binds(bind)(+1 "and" +d)
       *)
      (*
       *                syntax                           opacity (in datbind)
       * datatype 'a foo = FOO of 'a | BAR                  TRANSPARENT
       * datatype 'a foo ( = FOO of 'a | BAR )              OPAQUE_NONEQ
       * datatype 'a foo ( = FOO of 'a | BAR ) as eqtype    OPAQUE_EQ
       *)
      PIDATATYPE of {datbind: datbind list, loc: loc}
    | (*%
       * @format({tycon, origTycon: id ids, opacity, loc})
       * "datatype" +d tycon +d "="
       * 2[ +1 "datatype" +d ids(id)(".")
       *    +1 "as" +d opacity ]
       *)
      (*
       *                syntax                           opacity
       * datatype foo = datatype bar                   TRANSPARENT
       * datatype foo ( = datatype bar )               OPAQUE_NONEQ
       * datatype foo ( = datatype bar ) as eqtype     OPAQUE_EQ
       *)
      PITYPEREP of {tycon: string, origTycon: string list,
                    opacity: opacity, loc: loc}
    | (*%
       * @format({vid, ty: ty tyopt, loc})
       * "exception" +d vid +d 2[ tyopt(ty)("of" +1,) ]
       *)
      PIEXCEPTION of {vid: string, ty: ty option, loc: loc}
    | (*%
       * @format({vid, origId: id ids, loc})
       * "exception" +d vid +d 2[ "=" ids(id)(".") ]
       *)
      PIEXCEPTIONREP of {vid: string, origId: string list, loc: loc}
    | (*%
       * @format({strid, strexp, loc})
       * "structure" +d strid +d "=" 2[ +1 strexp ]
       *)
      PISTRUCTURE of {strid: string, strexp: pistrexp, loc: loc}

  and pistrexp =
      (*%
       * @format({decs: dec decs, loc})
       * R1{ "struct" 2[ decs:declist(dec)(+1,+1) ] +1 "end" }
       *)
      PISTRUCT of {decs: pidec list, loc: loc}

  (*%
   * @formatter(PatternCalc.plsigexp) PatternCalc.format_plsigexp
   *)
  type sigbind =
      (*%
       * @format({sigid, sigexp, loc})
       * sigid +d "=" 2[ +1 sigexp ]
       *)
      {sigid: string, sigexp: PatternCalc.plsigexp, loc:loc}

  (*%
   * @formatter(PatternCalc.plsigexp) PatternCalc.format_plsigexp
   *)
  type funbind =
      (*%
       * @format({funid, param, strexp, loc})
       * funid "(" param ")" +d "=" 2[ +1 strexp ]
       * @format:param({strid, sigexp})
       * L2{ strid +1 ":" +d sigexp }
       *)
      {funid: string,
       param: {strid: string, sigexp: PatternCalc.plsigexp},
       strexp: pistrexp,
       loc:loc}

  (*% *)
  datatype pitopdec =
      (*% @format(x) x *)
      PIDEC of pidec
    | (*%
       * @format(funbind)
       * "functor" +d funbind
       *)
      PIFUNDEC of funbind

  (*% @formatter(InterfaceID.id) InterfaceID.format_id *)
  type interfaceId =
       (*% @format(id) "i" id *)
       InterfaceID.id

  (*%
   * @formatter(InterfaceID.id) InterfaceID.format_id
   * @formatter(optlist) TermFormat.formatOptionalList
   * @formatter(declist) TermFormat.formatDeclList
   *)
  type interfaceDec =
      (*%
       * @format({interfaceId, requires: req reqs, topdecs: dec decs})
       * "_interface" +d interfaceId +d "="
       * 2[ +1 "local" 2[ reqs:optlist(req)(+1 "_require" +1,,) ]
       *    +1 "in" 2[ decs:declist(dec)(+1,+1) ]
       *    +1 "end" ]
       * @format:req({id,loc}) id
       *)
      {
        interfaceId: interfaceId,
        requires: {id: interfaceId, loc: loc} list,
        topdecs: pitopdec list
      }

  (*% 
   * @formatter(declist) TermFormat.formatDeclList
   * @formatter(optlist) TermFormat.formatOptionalList
   *)
  type interface =
      (*%
       * @format({decls: i is, requires: r rs, topdecs: dec decs})
       * "_interface"
       * 2[ +1 "local" 2[ is:declist(i)(+1,+1) ]
       *    +1 "in"
       *    2[ rs:optlist(r)(+1 "_require" +d, +1,)
       *       decs:declist(dec)(+1,+1) ]
       *    +1 "end" ]
       * +1 "end"
       * @format:r({id, loc}) id
       *)
      {
        decls : interfaceDec list,
        requires : {id: interfaceId, loc: loc} list,
        topdecs : pitopdec list
      }

  (*%
   * @formatter(declist) TermFormat.formatDeclList
   * @formatter(optlist) TermFormat.formatOptionalList
   * @formatter(option) TermFormat.formatOptionalOption
   * @formatter(PatternCalc.pltopdec) PatternCalc.format_pltopdec
   * @formatter(InterfaceID.id) InterfaceID.format_id
   *)
  type compileUnit =
      (*%
       * @format({interface, topdecs: dec decs})
       * interface
       * decs:declist(dec)(+1,+1)
       *)
      {
        interface : interface,
        topdecs : PatternCalc.pltopdec list
      }

  fun pitopdecLoc pitopdec =
      case pitopdec of
        PIDEC pidec => pidecLoc pidec
      | PIFUNDEC {loc,...} => loc
  and pidecLoc pidec =
      case pidec of
        PIVAL {loc,...} => loc
      | PITYPE {loc,...} => loc
      | PITYPEBUILTIN {loc,...} => loc
      | PIDATATYPE {loc,...} => loc
      | PITYPEREP {loc,...} => loc
      | PIEXCEPTION {loc,...} => loc
      | PIEXCEPTIONREP {loc,...} => loc
      | PISTRUCTURE {loc,...} => loc

end

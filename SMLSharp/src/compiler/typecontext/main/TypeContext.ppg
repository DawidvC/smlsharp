(**
 *	
 * type context for type inference.
 * @copyright (c) 2006, Tohoku University.
 * @author Atsushi Ohori 
 * @author Liu Bochao
 * @author YAMATODANI Kiyoshi
 * @version $Id: TypeContext.ppg,v 1.19 2008/03/11 04:16:18 bochao Exp $
 *)
structure TypeContext =
struct
  local
    structure TU = TypesUtils
    structure TY = Types
    structure NPEnv = NameMap.NPEnv
  in

  (* dupcliate specifiction *)
  exception exDuplicateElem of string

  (*************************************************************)

 (*%
   * @params(btvEnv)
   * @formatter(formatTcEnv) Types.format_tyConEnv
   * @formatter(formatvarEnv) Types.format_varEnv
   * @formatter(formatsigEnv) Types.format_sigEnv
   * @formatter(formatfunEnv) Types.format_funEnv
   * @formatter(formattyNameSet) Types.format_tyNameSet
   *)
  type context = 
       (*%
        * @format({tyConEnv:tyConEnv:formatTcEnv,
        *          varEnv:varEnv:formatvarEnv,
        *          sigEnv:sigEnv:formatsigEnv,
        *          funEnv:funEnv:formatfunEnv}) 
        *        "TYCONENV" +1 5[tyConEnv()(btvEnv)] +1 
        *        "VARENV" +1 5[varEnv()(btvEnv)] +1 
        *        "SIGENV" +1 5[sigEnv()(btvEnv)] +1
        *        "FUNENV" +1 5[funEnv] +1
        *)
       {
        tyConEnv : TY.tyConEnv,
        varEnv : TY.varEnv,
        sigEnv : TY.sigEnv,
        funEnv : TY.funEnv
        }

  (*%
   * @params(btvEnv)
   * @formatter(formatTcEnv) Types.format_topTyConEnv
   * @formatter(formatvarEnv) Types.format_topVarEnv
   * @formatter(formatsigEnv) Types.format_sigEnv
   * @formatter(formatfunEnv) Types.format_funEnv
   * @formatter(formattyNameSet) Types.format_tyNameSet
   *)
  type topContext = 
       (*%
        * @format({tyConEnv:tyConEnv:formatTcEnv,
        *          varEnv:varEnv:formatvarEnv,
        *          sigEnv:sigEnv:formatsigEnv,
        *          funEnv:funEnv:formatfunEnv}) 
        *        "TYCONENV" +1 5[tyConEnv()(btvEnv)] +1 
        *        "VARENV" +1 5[varEnv()(btvEnv)] +1 
        *        "SIGENV" +1 5[sigEnv()(btvEnv)] +1
        *        "FUNENV" +1 5[funEnv] +1
        *)
       {
        tyConEnv : TY.topTyConEnv,
        varEnv : TY.topVarEnv,
        sigEnv : TY.sigEnv,
        funEnv : TY.funEnv
       }

  val emptyContext =
      {
        tyConEnv = TY.emptyTyConEnv,
        varEnv = TY.emptyVarEnv,
        sigEnv = TY.emptySigEnv,
        funEnv = TY.emptyFunEnv
      } : context

  val emptyTopContext =
      {
        tyConEnv = SEnv.empty,
        varEnv = SEnv.empty,
        sigEnv = TY.emptySigEnv,
        funEnv = TY.emptyFunEnv
      } : topContext

  fun lookupTyCon ({tyConEnv, ...} : context, namePath) =
      NPEnv.find(tyConEnv, namePath) 

  fun lookupVar ({varEnv, ...} : context, namePath) =
      NPEnv.find(varEnv, namePath) 

   fun injectTyConEnvToContext tyConEnv = 
      {
        tyConEnv = tyConEnv,
        varEnv = TY.emptyVarEnv,
        sigEnv = TY.emptySigEnv,
        funEnv = TY.emptyFunEnv
      } 

   fun injectVarEnvToContext varEnv = 
      {
        tyConEnv = TY.emptyTyConEnv,
        varEnv = varEnv,
        sigEnv = TY.emptySigEnv,
        funEnv = TY.emptyFunEnv
      } 

   fun injectSigEnvToContext sigEnv = 
      {
        tyConEnv = TY.emptyTyConEnv,
        varEnv = TY.emptyVarEnv,
        sigEnv = sigEnv,
        funEnv = TY.emptyFunEnv
      } 

   fun injectFunctorEnvToContext funEnv = 
      {
        tyConEnv = TY.emptyTyConEnv,
        varEnv = TY.emptyVarEnv,
        sigEnv = TY.emptySigEnv,
        funEnv = funEnv
      } 

   fun injectEnvToContext (tyConEnv,varEnv) = 
      {
        tyConEnv = tyConEnv,
        varEnv = varEnv,
        sigEnv = TY.emptySigEnv,
        funEnv = TY.emptyFunEnv
      } 

   fun bindTyConInEmptyContext (string, tyCon) = 
      {
        tyConEnv = NPEnv.singleton(string, tyCon),
        varEnv = TY.emptyVarEnv,
        sigEnv = TY.emptySigEnv,
        funEnv = TY.emptyFunEnv
      } 

   fun bindVarInEmptyContext (lambdaDepth, string, idstate) = 
      (TU.adjustDepthInIdstate lambdaDepth idstate;
      {
        tyConEnv = TY.emptyTyConEnv,
        varEnv = NPEnv.singleton(string, idstate),
        sigEnv = TY.emptySigEnv,
        funEnv = TY.emptyFunEnv
      } 
      )

   fun bindSigInEmptyContext (string, sigma) = 
      {
        tyConEnv = TY.emptyTyConEnv,
        varEnv = TY.emptyVarEnv,
        sigEnv = SEnv.singleton(string, sigma),
        funEnv = TY.emptyFunEnv
      } 
   fun bindFunInEmptyContext (string, phi) = 
       {
        tyConEnv = TY.emptyTyConEnv,
        varEnv = TY.emptyVarEnv,
        sigEnv = TY.emptySigEnv,
        funEnv = SEnv.singleton(string, phi)
        } 

   fun bindTyConInContext ({tyConEnv, varEnv, sigEnv, funEnv} : context, 
                           namePath, tyCon)  = 
        {
         tyConEnv = NPEnv.insert(tyConEnv, namePath, tyCon),
         varEnv = varEnv,
         sigEnv = sigEnv,
         funEnv = funEnv
         }

   fun bindVarInContext (lambdaDepth,
			 {tyConEnv, varEnv, sigEnv, funEnv}: context, 
                         namePath, idstate) = 

     (
      TU.adjustDepthInIdstate lambdaDepth idstate;
      {
       tyConEnv = tyConEnv,
       varEnv = NPEnv.insert(varEnv, namePath, idstate),
       sigEnv = sigEnv,
       funEnv = funEnv
       }
      )

   fun bindSigInContext ({tyConEnv, varEnv, sigEnv, funEnv}: context, string, sigexp) = 
        {
          tyConEnv = tyConEnv,
          varEnv = varEnv,
          sigEnv = SEnv.insert(sigEnv, string, sigexp),
          funEnv = funEnv
        }

   fun extendContextWithTyConEnv ({tyConEnv, varEnv, sigEnv, funEnv}: context, 
                                  newTyConEnv)
     = 
        {
         tyConEnv = NPEnv.unionWith #1 (newTyConEnv, tyConEnv),
         varEnv = varEnv,
         sigEnv = sigEnv,
         funEnv = funEnv
         }

   fun extendContextWithVarEnv ({tyConEnv, varEnv, sigEnv, funEnv}: context, newVarEnv) = 
        {
         tyConEnv = tyConEnv,
         varEnv = NPEnv.unionWith #1 (newVarEnv, varEnv),
         sigEnv = sigEnv,
         funEnv = funEnv
         }

   fun extendContextWithSigEnv ({tyConEnv, varEnv, sigEnv, funEnv}: context, newSigEnv) = 
        {
          tyConEnv = tyConEnv,
          varEnv = varEnv,
          sigEnv = SEnv.unionWith #1 (newSigEnv, sigEnv),
          funEnv = funEnv
        }

   fun extendContextWithEnv ({
                              tyConEnv, 
                              varEnv, 
                              sigEnv, 
                              funEnv
                              }: context, 
                             (newTyConEnv, newVarEnv)) = 
        {
          tyConEnv = NPEnv.unionWith #1 (newTyConEnv, tyConEnv),
          varEnv = NPEnv.unionWith #1 (newVarEnv, varEnv),
          sigEnv = sigEnv,
          funEnv = funEnv
        }

   fun extendContextWithContext 
     {
      oldContext = {
                    tyConEnv, 
                    varEnv, 
                    sigEnv, 
                    funEnv
                    } : context,
      newContext ={tyConEnv=newTyConEnv, 
                   varEnv = newVarEnv, 
                   sigEnv = newSigEnv,
                   funEnv = newFunEnv}: context
      }
     =
     {
      tyConEnv = NPEnv.unionWith #1 (newTyConEnv, tyConEnv),
      varEnv =  NPEnv.unionWith #1 (newVarEnv, varEnv),
      sigEnv = SEnv.unionWith #1 (newSigEnv, sigEnv),
      funEnv = SEnv.unionWith #1 (newFunEnv, funEnv)
      }

   fun unionContexts 
     (
      {tyConEnv=newTyConEnv, 
       varEnv = newVarEnv, 
       sigEnv = newSigEnv,
       funEnv = newFunEnv}: context,
      {tyConEnv, varEnv, sigEnv, funEnv} : context
      )
     =
     let
         val checkDuplication1 = fn (key,x,y) => raise exDuplicateElem(NameMap.namePathToString(key))
         val checkDuplication2 = fn (key,x,y) => raise exDuplicateElem(key)
     in
       {
        tyConEnv = NPEnv.unionWithi checkDuplication1  (newTyConEnv, tyConEnv),
        varEnv =  NPEnv.unionWithi checkDuplication1 (newVarEnv, varEnv),
        sigEnv = SEnv.unionWithi checkDuplication2 (newSigEnv, sigEnv),
        funEnv = SEnv.unionWithi checkDuplication2 (newFunEnv, funEnv)
        }
     end

   fun mergeContexts 
     (
      {tyConEnv=newTyConEnv, 
       varEnv = newVarEnv, 
       sigEnv = newSigEnv,
       funEnv = newFunEnv}: context,
      {tyConEnv, varEnv, sigEnv, funEnv} : context
      )
     =
     {
      tyConEnv = NPEnv.unionWith #1  (newTyConEnv, tyConEnv),
      varEnv =  NPEnv.unionWith #1 (newVarEnv, varEnv),
      sigEnv = SEnv.unionWith #1 (newSigEnv, sigEnv),
      funEnv = SEnv.unionWith #1 (newFunEnv, funEnv)
      }

  fun injectDataConToVarEnv dataCon = 
      SEnv.foldli (fn (constructorName, idstate, varEnv) =>
                      NPEnv.insert(varEnv, (constructorName, Path.NilPath), idstate))
                  NPEnv.empty
                  dataCon

  fun getBasicEnvFromContext (context : context) =
      (#tyConEnv context, #varEnv   context) 

  fun mergeBtvEnv (btvEnv1,btvEnv2) = IEnv.unionWith #1 (btvEnv1,btvEnv2)

  fun mergeSigEnv (sigEnv1,sigEnv2) = SEnv.unionWith #1 (sigEnv1,sigEnv2)

  fun mergeTyNameSet(tyNameSet1,tyNameSet2) =
      ISet.union(tyNameSet1,tyNameSet2)

  fun extractEnvFromContext (context:context) =
      (#tyConEnv context, #varEnv context)

  fun contextToString context =
      Control.prettyPrint (format_context nil context)

end
end

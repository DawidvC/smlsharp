(**
 * A-Normal form.
 * @copyright (c) 2006, Tohoku University.
 * @author NGUYEN Huu-Duc
 * @version $Id: ANormal.ppg,v 1.13 2008/08/06 17:23:39 ohori Exp $ 
 *)

structure ANormal = struct

  structure BT = BasicTypes
  type loc = Loc.loc

  (*%
   * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
   *)
  type ffiAttributes = Absyn.ffiAttributes

  fun formatLabel id =
      let
        val s = "L" ^ LocalVarID.toString id
      in
        SMLFormat.BasicFormatters.format_string s
      end

  (*%
   * @formatter(idFormat) LocalVarID.format_id
   *)
  type varid =
       (*%
        * @format(id:idFormat) id
        *)
       LocalVarID.id

  (*%
   * @formatter(idFormat) Types.format_varId
   *)
  type varId =
       (*%
        * @format(id:idFormat) id
        *)
       Types.varId
       
  (*% *)
  type tyvarId = 
       (*%
        * @format(id) id
        *)
       int

  (*% *)
  datatype ty =
	   (*%
	    * @format "BOXED"
	    *)
           BOXED
         | (*%
	    * @format "ATOM"
	    *)
           ATOM
         | (*%
	    * @format "DOUBLE"
	    *)
           DOUBLE
         | (*%
	    * @format(tyId) "G" tyId
	    *)
           GENERIC of tyvarId 
         | (*%
	    * @format(tyId) "S" tyId
	    *)
           SINGLE of tyvarId
         | (*%
	    * @format(tyId) "U" tyId
	    *)
           UNBOXED of tyvarId
    
  (*% 
   *  @params(id)
   *  @formatter(LocalVarID.id) LocalVarID.format_id
   *)
  datatype varKind =
	   (*%
	    * @format "arg(" id ")"
	    *)
	   ARG 
         | (*%
	    * @format id
	    *)
           LOCAL
         | (*%
	    * @format id
	    *)
           EXTERNAL 

  (*% *)
  type varInfo = 
       (*%
        * @format({varId, displayName, ty, varKind})  varKind()(displayName)
        *)
       {varId:varId, displayName:string, ty:ty, varKind:varKind}

  (*% *)
  type varInfoWithType = 
       (*%
        * @format({varId, displayName, ty, varKind})  varKind()(displayName) + ":" + ty
        *)
       {varId:varId, displayName:string, ty:ty, varKind:varKind}

  (*% 
   *  @formatter(LocalVarID.id) LocalVarID.format_id
   *)
  type varInfoWithoutKind = 
       (*%
        * @format({id, displayName, ty, varKind})  displayName
        *)
       {id:LocalVarID.id, displayName:string, ty:ty, varKind:varKind}

  (*% 
   * @formatter(ExnTagID.id) ExnTagID.format_id
   *)
  type globalTag = 
       (*%
        * @format(tag) tag
        *)
       ExnTagID.id
       
  datatype constant = datatype ConstantTerm.constant


  (*%
   * @formatter(enclosedListIfMoreThanOne) SmlppgUtil.formatListWithEnclosureIfMoreThanOne
   * @formatter(formatConst) ConstantTerm.format_constant
   * @formatter(formatListWithEnclosure) SmlppgUtil.formatListWithEnclosure
   * @formatter(BT.UInt32) BasicTypeFormatters.format_UInt32
   * @formatter(formatVarInfoWithType) format_varInfoWithType
   * @formatter(formatLabel) formatLabel
   *)
  datatype anexp =
           (*%
            * @format({
            *          funExp,
            *          argExpList : exp exps:formatListWithEnclosure,
            *          argTyList : ty tys:formatListWithEnclosure,
            *          argSizeExpList,
            *          attributes,
            *          loc
            *         })
            * R1{d
            *     {
            *       attributes + funExp
            *       !N0{tys(ty)(",","{","}")} 1
            *       {exps(exp)(","1,"(",")")}
            *     }
            *   }
            *)
           ANFOREIGNAPPLY of 
           {
            funExp : anexp,
            argExpList : anexp list,
            argTyList : ty list,
            argSizeExpList : anexp list,
            attributes : ffiAttributes,
            loc : loc
           }
         | (*%
            * @format({funExp,
            *          argSizeExpList,
            *          resultSizeExpList,
            *          loc})
            * L10{ "CALLBACK(" funExp
            * ")" }
            *)
           ANEXPORTCALLBACK of 
           {
            funExp : anexp,
	    argSizeExpList : anexp list,
	    resultSizeExpList : anexp list,
            loc: loc
           }
         | (*%
      	    * @format({value:value:formatConst, loc}) value
      	    *)
	   ANCONSTANT of {value :constant, loc : loc}
         | (*%
            * @format({tagValue,loc}) tagValue
            *)
           ANEXCEPTIONTAG of {tagValue : globalTag, loc : loc}
         | (*% 
            * @format({varInfo, loc}) varInfo 
	    *)	 
	   ANVAR of {varInfo : varInfo, loc : loc}
         | (*% 
            * @format({nestLevel, offset, loc}) "env[" nestLevel "," offset "]" 
	    *)	 
	   ANENVACC of 
           {
            nestLevel : BT.UInt32, 
            offset : BT.UInt32, 
            loc : loc
           }
         | (*%
            * @format({codeId:codeId:formatLabel, loc}) codeId
            *)
           ANLABEL of {codeId : LocalVarID.id, loc : loc}
         | (*%
            * @format({arrayExp, offsetExp, loc})
            * arrayExp "[" offsetExp "]"
            *)
           ANGETFIELD of 
           {
            arrayExp : anexp, 
            offsetExp : anexp,
            loc : loc
           }
         | (*%
            * @format({arrayExp, offsetExp,valueExp,valueTy,valueSizeExp, loc})  
            * arrayExp "[" offsetExp "]="  valueExp
            *)
           ANSETFIELD of 
           {
            arrayExp : anexp,
            offsetExp : anexp,
            valueExp : anexp, 
            valueTy : ty,
            valueSizeExp : anexp,
            loc: loc
           }
         | (*%
            * @format({consExp, newTailExp, offsetExp, nestLevelExp, loc})  
            * "SetTail" consExp "[" nestLevelExp "/" offsetExp "]="  newTailExp
            *)
           ANSETTAIL of 
           {
            consExp : anexp,
	    newTailExp : anexp,
            offsetExp : anexp,
            nestLevelExp : anexp,
            loc: loc
           }
         | (*%
            * @format({bitmapExp, sizeExp, initialValue, elementTy, elementSizeExp, isMutable, loc}) 
            *   "Array[bitmap=" bitmapExp ",size=" sizeExp " of " initialValue "]"
            *)
           ANARRAY of 
           {
            bitmapExp : anexp,
            sizeExp : anexp,
            initialValue : anexp,
            elementTy : ty,
            elementSizeExp : anexp,
            isMutable : bool,
            loc : loc
           }
         | (*%
            * @format({srcExp, srcOffsetExp, dstExp, dstOffsetExp, lengthExp, elementTy, elementSizeExp, loc})
            * srcExp "[" srcOffsetExp "]" "<="
            * dstExp "[" dstOffsetExp "]"
            * "(" lengthExp ")"
            * "(" elementSizeExp ")"
            *)
           ANCOPYARRAY of
           {
            srcExp : anexp,
            srcOffsetExp : anexp,
            dstExp : anexp,
            dstOffsetExp : anexp,
            lengthExp : anexp, 
            elementTy : ty,
            elementSizeExp : anexp, 
            loc: loc
           }
         | (*%
            * @format({
            *          primName,
            *          argExpList :exp exps:formatListWithEnclosure,
            *          argTyList,
            *          argSizeExpList,
            *          loc
            *         })
            * {primName {exps(exp)(",","(",")")}}
            *)
           ANPRIMAPPLY of 
           {
            primName : string, 
            argExpList : anexp list, 
            argTyList : ty list,
            argSizeExpList : anexp list,
            loc : loc
           }
         | (*%
            * @format({funExp, argExpList:exp exps, argSizeExpList, argTyList, loc}) 
            *   "Apply(" funExp ";" + exps(exp)(",") ")"
            *)
           ANAPPLY of 
           {
            funExp : anexp, 
            argExpList : anexp list, 
            argTyList : ty list,
            argSizeExpList : anexp list,
            loc : loc
           }
         | (*%
            * @format({funLabel, envExp, argExpList : exp exps, argSizeExpList, argTyList, loc}) 
            * "Call(" funLabel ";" + envExp + ";" + exps(exp)(",") ")"
            *)
           ANCALL of 
           {
            funLabel : anexp,
            envExp : anexp,
            argExpList : anexp list, 
            argSizeExpList : anexp list,
            argTyList : ty list,
            loc : loc
           }
         | (*%
            * @format({codeExp, argExpList : exp exps, argSizeExpList, argTyList, loc}) 
            * "RecCall(" codeExp ";" + exps(exp)(",") ")"
            *)
           ANRECCALL of 
           {
            codeExp : anexp,
            argExpList : anexp list, 
            argSizeExpList : anexp list,
            argTyList : ty list,
            loc : loc
           }
         | (*%
            * @format({codeExp, argExpList : exp exps, argSizeExpList, argTyList, loc}) 
            * "InnerCall(" codeExp ";" + exps(exp)(",") ")"
            *)
           ANINNERCALL of 
           {
            codeExp : anexp,
            argExpList : anexp list, 
            argSizeExpList : anexp list,
            argTyList : ty list,
            loc : loc
           }
         | (*%
            * @format({localDeclList : dec decs, mainExp, loc})
            *     !N0{ "let" 2[ +1 decs(dec)(+1) ]  +1
            *          "in" 2[ +2 mainExp ] +2
            *           "end"
                     }
            *)
           ANLET of 
           {
            localDeclList : andecl list,
            mainExp : anexp,
            loc : loc
           }
         | (*%
            * @format({expList:field fields:enclosedListIfMoreThanOne, tyList, sizeExpList, loc}) 
            *      fields(field)(","+,"{","}")
            *)
           ANMVALUES of {expList : anexp list, tyList : ty list, sizeExpList : anexp list, loc : loc}
         | (*%
            * @format({
            *          bitmapExp,
            *          totalSizeExp,
            *          fieldList : exp record,
            *          fieldSizeExpList,
            *          fieldTyList,
	    *          isMutable,
            *          loc
            *         })
            *  "Record(bitmap=" bitmapExp ";size=" totalSizeExp ";" record(exp)(","+) ")"
            *)
           ANRECORD of 
           {
	    isMutable : bool,
            bitmapExp : anexp,
            totalSizeExp : anexp,
            fieldList : anexp list,
            fieldSizeExpList : anexp list,
            fieldTyList : ty list,
            loc : loc
           }
         | (*%
            * @format({
            *          bitmapExp,
            *          totalSize,
            *          fieldList : exp record,
            *          fieldSizeExpList,
            *          fieldTyList,
            *          fixedSizeList,
            *          loc
            *         })
            *  "EnvRecord(bitmap=" bitmapExp ";size=" totalSize ";" record(exp)(","+) ")"
            *)
           ANENVRECORD of 
           {
            bitmapExp : anexp,
            totalSize : BT.UInt32,
            fieldList : anexp list,
            fieldSizeExpList : anexp list,
            fieldTyList : ty list,
            fixedSizeList : BT.UInt32 list,
            loc : loc
           }
         | (*%
            * @format({recordExp, nestLevelExp, offsetExp, loc})
            * recordExp "[" nestLevelExp "/" offsetExp "]"
            *)
           ANSELECT of 
           {
            recordExp : anexp, 
            nestLevelExp : anexp,
            offsetExp : anexp,
            loc : loc
           }
         | (*%
            * @format({codeExp, envExp, loc }) "Closure(" codeExp "," envExp ")"
            *)
	   ANCLOSURE of {codeExp : anexp, envExp : anexp, loc : loc}
         | (*%
            * @format({codeExp, loc }) "RecClosure(" codeExp")"
            *)
	   ANRECCLOSURE of {codeExp : anexp, loc : loc}
         | (*%
	    * @format({recordExp, nestLevelExp, offsetExp, valueExp, valueTy, valueSizeExp, loc})
            * recordExp "[(" nestLevelExp "," offsetExp ") = " valueExp "]"
	    *)
           ANMODIFY of 
           {
            recordExp : anexp,
            nestLevelExp : anexp,
            offsetExp : anexp,
            valueExp : anexp,
            valueTy : ty,
            valueSizeExp : anexp,
            loc : loc
           }
         | (*%
	    * @format({argExp, loc}) "raise" + argExp
	    *)
           ANRAISE of {argExp : anexp, loc : loc}
         | (*%
	    * @format({exp, exnVar, handler, loc})
                     2["handle" 1 N0{exp}] +1 "with letexp" + exnVar + "in" + 2[1 handler]
	    *)
           ANHANDLE of 
           {
            exp : anexp,
            exnVar : varInfo,
            handler :  anexp,
            loc : loc
           }
         | (*%
            * @format({switchExp, expTy, branches : rule rules, defaultExp, loc})
            *         {"switch" + switchExp 
            *             1 "of" + rules(rule)(+1 " | ")
                      +1 " | _ =>"  + {defaultExp} }
            * @format:rule({constant:constant:formatConst,exp}) constant + "=>" + {exp}
	    *)
           ANSWITCH of 
           {
            switchExp : anexp,
            expTy : ty,
            branches : {constant : constant, exp : anexp} list,
            defaultExp : anexp,
            loc : loc
           }
         | (*%
            * @format (loc) "Exit"
            *)
           ANEXIT of loc 
           
       and andecl = 
           (*%
            * @format({boundVarList:var vars, sizeExpList, boundExp,loc})  
            *  2[
            *   "val" 
            *   + 
            *   {vars:enclosedListIfMoreThanOne(var:formatVarInfoWithType)(",","{","}") +d "=" +2 {boundExp}}
            *   ]
            *)
           ANVAL of 
           {
            boundVarList : varInfo list,
            sizeExpList : anexp list,
            boundExp : anexp,
            loc : loc
           }
         | (*%
            * @format({
            *          frameInfo, 
            *          entryFunctions: entry entries:formatListWithEnclosure, 
            *          innerFunctions: inner inners:formatListWithEnclosure, 
            *          isRecursive,
            *          loc
            *         })
            *  2[
            *    "cluster" + 
            *    frameInfo +
            *    entries(entry)(~2[ +1 "and"] +, ~2[+1 "with entries"] +, "")
            *    + 
            *    inners(inner)(~2[ +1 "and"] +, ~2[+1 "with inners"] +, "")
            *   ]
            *)
           ANCLUSTER of
           {
            frameInfo : frameInfo,
            entryFunctions : funDecl list,
            innerFunctions : funDecl list,
            isRecursive : bool,
            loc : loc
           }

  withtype funDecl =
           (*%
            * @format({
            *          codeId:codeId:formatLabel, 
            *          argVarList: arg args:enclosedListIfMoreThanOne, 
            *          argSizeExpList,
            *          bodyExp, 
            *          resultTyList,
            *          resultSizeExpList
            *         })
            *     codeId +d "=" +1
            *     R1{ 
            *        "fn" + {args(arg:formatVarInfoWithType)(","+, "{", "}") + "=>" }
            *         2[ +1 {bodyExp}]
            *      }
            *) 
           {
            codeId : LocalVarID.id,
            argVarList : varInfo list, 
            argSizeExpList : anexp list,
            bodyExp : anexp,
            resultTyList : ty list,
            resultSizeExpList : anexp list
           }

       and frameInfo =
           (*%
            * @format({tyvars:tid tids:formatListWithEnclosure,bitmapFree,tagArgList:tag tags:formatListWithEnclosure})
            *  { "{"
            *     1[+1 "tyvars=" tids(tid)(",","[","]") "," +1 "bitmapFree=" bitmapFree "," +1 "tagArgs=" tags(tag)(",","[","]")]
            *  +1 "}"}
            *)
           {
            tyvars : tyvarId list,
            bitmapFree : anexp,
            tagArgList : anexp list
           }

end

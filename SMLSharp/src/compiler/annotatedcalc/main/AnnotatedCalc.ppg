(**
 * @copyright (c) 2006, Tohoku University.
 * @author Huu-Duc Nguyen 
 * @version $Id: AnnotatedCalc.ppg,v 1.24 2008/08/06 17:23:39 ohori Exp $
 *)

structure AnnotatedCalc = struct

 structure BT = BasicTypes

 type loc = Loc.loc

 (*%
  * @formatter(Absyn.ffiAttributes) Absyn.format_ffiAttributes
  *)
 type ffiAttributes = Absyn.ffiAttributes

 (*%
  * @formatter(tyformat) AnnotatedTypes.format_ty
  *)
 type ty = 
  (*%
   * @format(ty:tyformat) ty
   *)
   AnnotatedTypes.ty


(*
 (*% 
  * @formatter(VarID.id) VarID.format_id
  *)
 type id = 
     (*%
      * @format(id) id
      *)
      VarID.id
*)

 (*%
  * @formatter(formatVarInfo) AnnotatedTypes.format_varInfo        
  *)
 type varInfo = 
      (*%
       * @format(v:formatVarInfo) v
       *) 
      AnnotatedTypes.varInfo

 (*%
  * @formatter(formatVarInfo) AnnotatedTypes.format_varInfoWithoutType
  *)
 type varInfoWithoutType =
      (*%
       * @format(v:formatVarInfo) v
       *) 
      AnnotatedTypes.varInfo

 (*% 
  * @formatter(formatPrimInfo) AnnotatedTypes.format_primInfo
  *)
 type primInfo =
      (*%
       * @format(v:formatPrimInfo) v
       *)
      AnnotatedTypes.primInfo

 (*%
  * @formatter(AnnotatedTypes.annotationLabel) AnnotatedTypes.format_annotationLabel
  *)
 type annotationLabel = 
      (*%
       * @format(value) value
       *)
      AnnotatedTypes.annotationLabel

 (*%
  * @formatter(format_btvEnv) AnnotatedTypes.format_btvEnv
  *)
 type btvEnv = 
      (*%
       * @format(v:format_btvEnv) v
       *)
      AnnotatedTypes.btvEnv 

 (*% 
  * @formatter(ExnTagID.id) ExnTagID.format_id
  *)
 type globalTag = 
      (*%
       * @format(tag) tag
       *)
      ExnTagID.id

 datatype constant = datatype ConstantTerm.constant

(*%
 *
 * @formatter(enclosedListIfMoreThanOne) SmlppgUtil.formatListWithEnclosureIfMoreThanOne
 * @formatter(formatConst) ConstantTerm.format_constant
 * @formatter(formatListWithEnclosure) SmlppgUtil.formatListWithEnclosure
 * @formatter(formatUInt32) BasicTypeFormatters.format_UInt32
 * @formatter(format_varInfoWithoutType) format_varInfoWithoutType
 * @formatter(formatBtvEnv) format_btvEnv
 *)
 datatype acexp =
          (*%
           * @format(
           *        {
           *          funExp,
           *          funTy,
           *          argExpList: arg args:formatListWithEnclosure,
           *          attributes,
           *          loc:loc
           *         }
           *        )
           * R1{d
           *      {
           *        funExp
           *        {args(arg)(","1,"(",")")}
           *      }
           *   }
           *)
          ACFOREIGNAPPLY of 
          {
           funExp : acexp,
           funTy : ty, 
           argExpList : acexp list, 
           attributes : ffiAttributes,
           loc : loc
          }
        | (*%
           * @format({funExp,
           *          funTy,
           *          attributes,
           *          loc})
           * L10{ "CALLBACK(" funExp
           *              ")" }
           *)
          ACEXPORTCALLBACK of 
          {
           funExp : acexp,  (* must be ACFNM *)
	   funTy : ty,
           attributes : ffiAttributes,
           loc: loc
          }

        | (*%
           * @format({ty, loc}) "_sizeof(" ty ")"
           *)
          ACSIZEOF of {ty : ty, loc : loc}
        | (*%
           * @format({tagValue,displayName,loc}) "EXNTAG(" tagValue ")"
           *)
          ACEXCEPTIONTAG of {tagValue : globalTag, displayName : string, loc : loc}
        | (*%
           * @format({value:value:formatConst, loc}) value
           *)
          ACCONSTANT of {value : constant, loc : loc}
        | (*%
           * @format({name, kind, ty, loc}) name
           *)
          ACGLOBALSYMBOL of {name:string, kind:Absyn.globalSymbolKind, ty:ty, loc:loc}
        | (*%
           * @format({varInfo:varInfo:format_varInfoWithoutType, loc}) varInfo
           *)
          ACVAR of {varInfo : varInfo, loc : loc}
        | (*%
           * @format({arrayExp, indexExp, elementTy, loc})
           * "arraySub(" arrayExp "," indexExp ")" ":" elementTy
           *)
          ACGETFIELD of {arrayExp : acexp, indexExp : acexp, elementTy : ty, loc : loc}
        | (*%
           * @format({valueExp, arrayExp, indexExp, elementTy, loc})  
           * "SetField"
           * + arrayExp "[" indexExp "]" "=" valueExp 
           *)
          ACSETFIELD of 
          {
           valueExp : acexp, 
           arrayExp : acexp, 
           indexExp : acexp, 
           elementTy : ty, 
           loc: loc
          }
        | (*%
           * @format({consExp, newTailExp, listTy, consRecordTy, tailLabel, loc})  
           * "SetTail"
           * + consExp ":" consRecordTy  "[" tailLabel "]" "=" newTailExp
           *)
          ACSETTAIL of 
          {
           consExp : acexp, 
           newTailExp : acexp, 
           listTy : ty,
	   consRecordTy : ty,
	   tailLabel : string,
           loc: loc
           }
        | (*%
           * @format({sizeExp, initialValue, elementTy, isMutable, loc}) 
           * !N0 {
           *       elementTy "[" 2[1 sizeExp ] 1"]" "{" initialValue "}"
           *	 }
           *)
          ACARRAY of 
          {
           sizeExp : acexp, 
           initialValue : acexp, 
           elementTy : ty,
           isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({srcExp, srcIndexExp, dstExp, dstIndexExp, lengthExp, elementTy, loc})  
           * "CopyArray"
           * + srcExp "[" srcIndexExp "]" "<="
           *   dstExp "[" dstIndexExp "]"
           *   "(" lengthExp ")"
           *)
          ACCOPYARRAY of 
          {
           srcExp : acexp, 
           srcIndexExp : acexp, 
           dstExp : acexp, 
           dstIndexExp : acexp,
           lengthExp : acexp,
           elementTy : ty, 
           loc: loc
          }
        | (*%
           * @format(
           *         {
           *          primInfo,
           *          argExpList:arg args:formatListWithEnclosure,
           *          instTyList:ty tys:formatListWithEnclosure,
           *          loc
           *          }
           *         )
           *       R1{d {primInfo 1 {tys(ty)(","1,"{","}")}
           *                     +1 {args(arg)(","1,"(",")")}}}
           *)
          ACPRIMAPPLY of 
          {
           primInfo : primInfo, 
           argExpList : acexp list,
           instTyList : ty list,
           loc : loc
          }
        | (*%
           * @format({funExp, funTy, argExpList:arg args:enclosedListIfMoreThanOne, loc})  
           *   L10{ 
           *   funExp 
           *      2[
           *      +1 
           *        !N0{
           *             2[args(arg)(","+2, "{", "}")] 
           *           } 
           *      1
           *      ]
           *   }
           *)
          ACAPPM of 
          {
           funExp : acexp, 
           funTy : ty, 
           argExpList : acexp list,
           loc : loc
          }
        | (*%
           * @format({localDeclList : dec decs, mainExp, loc})
           *     !N0{ {"let" 2[ +1 decs(dec)( +1) ]}  +1
           *          {"in" 2[ +2 mainExp ] +2
           *           "end"} }
           *)
          ACLET of 
          {
           localDeclList : acdecl list,
           mainExp : acexp,
           loc : loc
          }
        | (*%
           * @format({expList:field fields, recordTy, annotation, isMutable, loc}) 
           *  !N0{"(" d 2[ fields(field)("," +1) ] d ")^" annotation }
           *)
          ACRECORD of 
          {
           expList : acexp list,
           recordTy : ty,
           annotation : annotationLabel,
	   isMutable : bool,
           loc : loc
          }
        | (*%
           * @format({recordExp, label, recordTy, resultTy, loc})
           *     recordExp "[" label "]"
           *)
          ACSELECT of 
          {
           recordExp : acexp, 
           label : string, 
           recordTy : ty, 
	   resultTy:ty,
           loc : loc
          }
        | (*%
           * @format({recordExp, recordTy, label, valueExp, valueTy, loc})
           *   recordExp "[" label "=" valueExp "]"
           *)
          ACMODIFY of 
          {
           recordExp : acexp, 
           recordTy : ty, 
           label : string, 
           valueExp : acexp,
           valueTy : ty,
           loc : loc
          }
        | (*%
           * @format({argExp, resultTy, loc}) N0{ "raise" +d {argExp} +d resultTy}
           *)
          ACRAISE of 
          {
           argExp : acexp, 
           resultTy : ty, 
           loc : loc
          }
        | (*%
           * @format({exp, exnVar, handler, loc})
           *      "handle" + N0{exp} +1
           *      "with letexp" +  exnVar  + "in" + {handler}
           *)
          ACHANDLE of
          {
           exp : acexp,
           exnVar : varInfo,
           handler : acexp,
           loc : loc
          }
        | (*%
           * @format({argVarList:arg args:enclosedListIfMoreThanOne, funTy, bodyExp, annotation, loc}) 
           *     R1{ 
           *        "fn" + {args(arg)(","+, "{", "}") + "=>" }
           *         2[ +1 {bodyExp}]
           *      }
           *)
          ACFNM of 
          {
           argVarList : varInfo list, 
           funTy : ty, 
           bodyExp : acexp,
           annotation : annotationLabel,
           loc : loc
          }
        | (*%
           * @format({btvEnv:btvEnv:formatBtvEnv, expTyWithoutTAbs, exp, loc})
           *  {
           *   "[" btvEnv "." 
           *      2[
           *        +1
           *        {exp}
           *       ] 
           *    +1 
           *    "]"
           *  }
           *)
          ACPOLY of 
          {
           btvEnv : btvEnv,
           expTyWithoutTAbs : ty, 
           exp : acexp, 
           loc : loc
          }
        | (*%
           * @format({exp, expTy, instTyList:tyArg tyArgs , loc}) 
           *    {
           *      exp 
           *        2[d 
           *           !N0{
           *               "{" 
           *                  d
           *                  2[
           *                    tyArgs(tyArg)("," +1) 
           *                   ]  
           *                  d
           *                "}" 
           *	     }
           *         ]
           *    }
           *)
          ACTAPP of 
          {
           exp : acexp, 
           expTy : ty, 
           instTyList : ty list, 
           loc : loc
          }
        | (*%
           * @format({switchExp, expTy, branches:rule rules, defaultExp, loc})
           *    "switch" 
           *      2[+1 {switchExp}]
           *     +1 "of" +
           *     {rules(rule)(~2[+1 "|"] +)}
           *     +1 " |" +
           *     {"_ =>" 2[+1{defaultExp}]}
           * @format:rule({constant,exp})
           *     {constant + "=>" 2[+1{exp}]}
           *)
          ACSWITCH of 
          {
           switchExp : acexp, 
           expTy : ty, 
           branches : {constant : acexp , exp : acexp} list, 
           defaultExp : acexp, 
           loc : loc
          }
        | (*%
           * @format({exp, expTy, targetTy, loc}) 
           *   {
           *    "("
           *        +1
           *      2["cast" + 2[{exp}] + ":" + expTy]
           *        +1
           *        2["to" + 2[{targetTy}]]
           *      +1
           *    ")"
           *     }
           *)
          ACCAST of {exp : acexp, expTy : ty, targetTy : ty, loc : loc}

      and acdecl = 
          (*%
           * @format({boundVar, boundExp, loc})  
           *  2[
           *   "val" 
           *   +
           *   boundVar +d "=" +1 {boundExp} 
           *   ]
           *)
          ACVAL of 
          {
           boundVar : varInfo, 
           boundExp : acexp,
           loc : loc
          }
        | (*%
           * @format({recbindList:bind binds,loc})
           *  2[
           *    "val rec" 
           *    + 
           *    binds(bind)(~2[ +1 "and"] +)
           *    ]
           * @format:bind({boundVar, boundExp}) 
           *   boundVar +d "=" +1 {boundExp}
           *)
          ACVALREC of 
          {
           recbindList : {boundVar : varInfo, boundExp : acexp } list,
           loc : loc
          }
        | (*%
           * @format({
           *          btvEnv:btvEnv:formatBtvEnv,
           *          recbindList : bind binds,
           *          loc : loc
           *         })
           *    {
           *     "[" 
           *       2[ 
           *         btvEnv "." 
           *          +1
           *          2[  
           *           "val rec" 
           *           +
           *           binds(bind)(~2[ +1 "and"] +)
           *           ]
           *        ]
           *      1 "]"
           *   }
           * @format:bind({boundVar, boundExp})
           *     boundVar +d "=" 
           *     +1
           *     {boundExp}
           *)
          ACVALPOLYREC of 
          {
           btvEnv : btvEnv,
           recbindList : {boundVar : varInfo, boundExp : acexp } list,
           loc : loc
          }

 (*%
  *)
 datatype basicBlock =
          (*%
           * @format({code, exnIDSet}) code
           * @format:code(dec decs) 
           *  decs(dec)(+1)
           *)
          ACVALBLOCK of {code : acdecl list, exnIDSet : ExnTagID.Set.set}
        | (*%
           * @format({name, 
                      actualArgName, 
                      typeResolutionTable,
                      exnTagResolutionTable, 
                      externalVarIDResolutionTable,
                      refreshedExceptionTagTable, 
                      refreshedExternalVarIDTable, 
                      loc})
           * name "(" actualArgName ")"
           *)
          ACLINKFUNCTORBLOCK of {name : string, 
                                 actualArgName : string,
                                 typeResolutionTable : AnnotatedTypes.tyBindInfo TyConID.Map.map,
                                 exnTagResolutionTable : ExnTagID.id ExnTagID.Map.map,
                                 externalVarIDResolutionTable : ExternalVarID.id ExternalVarID.Map.map,
                                 refreshedExceptionTagTable : ExnTagID.id ExnTagID.Map.map,
                                 refreshedExternalVarIDTable : ExternalVarID.id ExternalVarID.Map.map,
                                 loc : loc}
 (*%
  *)
 datatype topBlock = 
          (*%
           * @format({name, formalAbstractTypeIDSet, formalVarIDSet, formalExnIDSet, 
                      generativeVarIDSet, generativeExnIDSet, bodyCode:dec decs})
           * "functor" + name +  "=" +d  
           *  "{" +d 3[decs(dec)(+3)] +d "}"
           *)
          ACFUNCTORBLOCK of {name : string, 
                             formalAbstractTypeIDSet : TyConID.Set.set, 
                             formalVarIDSet : ExternalVarID.Set.set,
                             formalExnIDSet : ExnTagID.Set.set,
                             generativeVarIDSet : ExternalVarID.Set.set,
                             generativeExnIDSet : ExnTagID.Set.set,
                             bodyCode : basicBlock list}      
        | (*%
           * @format(info) info
           *)
          ACBASICBLOCK of basicBlock

end

// COM in 3 minutes.

Microsoft COM (= Component Object Model) is object-based interoperability infrastructure.
In other words, COM provides object-based shared library and inter process communication.
OLE is upper layer of COM.

Compared to shared library, COM is characterized as follows.

!!Shared library 

* Library name is a path in a file system.
* Library exports functions.

!!COM

!!!Component name is UUID.

A component is identified by UUID, which is 128bit almost global unique ID.
For example, Microsoft Internet Explorer has its UUID:
 {0002DF01-0000-0000-C000-000000000046}

COM infrastructure manages mapping between UUID and the location
of implementation code of the service identified by the UUID.
In Windows, static information about this mapping is stored in registry.
For the above UUID, the registry has an entry at
 HKEY_CLASSES_ROOT\CLSID\{0002DF01-0000-0000-C000-000000000046}
By using C:/WINDOWS/regedit.exe, you can see there that the UUID is mapped
to an executable file:
 "C:\Program Files\Internet Explorer\iexplore.exe"

!!!Component exports object.

From client, COM object is seen as a pair of instance data and an array of 
function pointers.
Its layout resembles those of object which Microsoft C++ compiler generates.
So, a COM object is seen as an usual object in C++ program if you use MS 
compiler.

The following is an approximate code in pseudo C to access Internet Explorer.

 typedef struct tagIInternetExplorerVtbl 
 {
   void (*setVisible)(IInternetExplorer* this, bool visible);
   bool (*getVisible)(IInternetExplorer* this);
   void (*navigate)(IInternetExplorer* this, string url);
   void (*quit)(IInternetExplorer* this);
 } IInternetExplorerVtbl;
 
 typedef struct tagIInternetExplorer 
 {
   IInternetExplorerVtbl* vtbl;
 } IInternetExplorer;
 
 UUID IEUUID = {0002DF01-0000-0000-C000-000000000046};
 
 IInternetExplorer* ie = (IInternetExplorer*)CoCreateInstance(IEUUID);
  
 ie->vtbl->setVisible(ie, true);
 ie->vtbl->navigate(ie, "http://www.pllab.riec.tohoku.ac.jp/smlsharp/");
 ie->vtbl->quit(ie);

!Topics in OLE/SML#.

*[[Oveview of OLE/SML#|OLESMLSharpOverview]]
*[[mapping COM and SML#|OLESMLSharpMapping]]
*[[API|http://www.pllab.riec.tohoku.ac.jp/smlsharp/tools/OLE/doc/api/]]
*[[COM in 3 minutes|OLESMLSharpMiniGuideOfCOM]]
*[[Implementation overview|OLESMLSharpImplementationOverview]]

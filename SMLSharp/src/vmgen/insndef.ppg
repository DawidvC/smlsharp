(* -*- sml -*- *)

structure InsnDef =
struct

  local
    fun term s = [SMLFormat.FormatExpression.Term (size s, s)]
    fun format_word_asInt x = term (Word.fmt (StringCvt.DEC) x)
    fun format_word_asChar x = term (str (chr (ord #"A" + Word.toInt x)))
    fun format_cint x = term (String.translate (fn #"~" => "-" | x => str x)
                                               (Int.fmt StringCvt.DEC x))
    fun format_ifOnlyOne (fmt1, fmt2) [_] = fmt1
      | format_ifOnlyOne (fmt1, fmt2) _ = fmt2
    fun format_ifNotNull (fmt1, fmt2) (_::_) = fmt1
      | format_ifNotNull (fmt1, fmt2) nil = fmt2

    fun concatSep x nil = nil
      | concatSep x [h] = h
      | concatSep x (h::t) = h @ x @ concatSep x t

    fun format_length l = format_cint (length l)
    fun format_replace (formatter, fmt, sep) l =
        concatSep sep (List.tabulate (length l, fn _ => fmt))
  in

  type pos = int * int

  (*% *)
  (*% @prefix format_c_pat_ @params(bits) *)
  (*% @prefix format_c_ *)
  datatype ty =
      (*% *)
      (*% @prefix format_c_pat_ @format "!!INVALID:B" bits "!!" *)
      (*% @prefix format_c_ @format "ml_uchar_t" *)
      B    (* byte            8bit *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "!!INVALID:H" bits "!!" *)
      (*% @prefix format_c_ @format "ml_ushort_t" *)
      H    (* short          16bit *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_w" bits *)
      (*% @prefix format_c_ @format "ml_uint_t" *)
      W    (* word           32bit *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_l" bits *)
      (*% @prefix format_c_ @format "ml_ulong_t" *)
      L    (* long           64bit *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_n" bits *)
      (*% @prefix format_c_ @format "ml_int_t" *)
      N    (* int            32bit *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_nl" bits *)
      (*% @prefix format_c_ @format "ml_long_t" *)
      NL   (* long int       64bit *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_f" bits *)
      (*% @prefix format_c_ @format "double" *)
      F    (* double float   64bit *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_fs" bits *)
      (*% @prefix format_c_ @format "float" *)
      FS   (* single float   32bit *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "!!INVALID:FL" bits "!!" *)
      (*% @prefix format_c_ @format "long double" *)
      FL   (* long float    128bit(80bit) *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "void*" *)
      (*% @prefix format_c_ @format "void*" *)
      P    (* boxed pointer  32bit (or 64bit) *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_oa" bits *)
      (*% @prefix format_c_ @format "size_t" *)
      OA   (* offset address    : semantics only *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "!!INVALID:SC" bits "!!" *)
      (*% @prefix format_c_ @format "ml_uint_t" *)
      SC   (* scale             : semantics only (8bit) *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_sz" bits *)
      (*% @prefix format_c_ @format "ml_uint_t" *)
      SZ   (* size of a value   : semantics only *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "!!INVALID:SH" bits "!!" *)
      (*% @prefix format_c_ @format "ml_uint_t" *)
      SH   (* shift count *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_lsz" bits *)
      (*% @prefix format_c_ @format "size_t" *)
      LSZ  (* size_t            : semantics only *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_ssz" bits *)
      (*% @prefix format_c_ @format "size_t" *)
      SSZ  (* offset_t          : semantics only *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "!!INVALID:VI" bits "!!" *)
      (*% @prefix format_c_ @format "!!INVALID:VI!!" *)
      VI   (* variable index    : semantics only RI + LI*)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_ri" bits *)
      (*% @prefix format_c_ @format "ml_uint_t" *)
      RI   (* register index    : semantics only *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "ML_li" bits *)
      (*% @prefix format_c_ @format "ml_uint_t" *)
      LI   (* local var index   : semantics only *)
    (* before typecheck only *)
    | (*% *)
      (*% @prefix format_c_pat_ @format "!!INVALID:TY" bits "!!" *)
      (*% @prefix format_c_ @format "!!INVALID:TY!!" *)
      TY   (* instruction type  : semantics only *)
    | (*% @format(id) "t" id *)
      (*% @prefix format_c_pat_ @format(n) "!!INVALID:t" n "!!" *)
      (*% @prefix format_c_ @format(n) "!!INVALID:t" n "!!" *)
      UN of int

  (*% @formatter(varName) format_word_asChar *)
  datatype arg =
      (*% @format(w:varName) "var" w *)
      VARX of word
    | (*% @format "size" *)
      SIZE
    | (*% @format "scale" *)
      SCALE
    | (*% @format "shift" *)
      SHIFT
    | (*% @format "displacement" *)
      DISPLACEMENT
    | (*% @format "imm" *)
      IMM
    | (*% @format "label" *)
      LABEL
    | (*% @format(w:varName) "extern" w *)
      EXTERN of word
    | (*% @format(w:varName) "lsize" w *)
      LSIZE of word

  local

  fun format_ifRI (fthen, felse) RI = fthen
    | format_ifRI (fthen, felse) _ = felse

  in

  (*% *)
  datatype format =
      (*% @format(s * pos) "\"" s "\"" *)
      FMTSTR of string * pos
    | (*% @format(v * pos) v *)
      FMTARG of arg * pos

  (*% *)
  datatype metacond =
      (*% @format(arg * value * pos)  arg + "==" + value *)
      METAEQ of arg * int * pos
    | (*% @format(ty * pos) "ty" + "==" + ty *)
      METAEQTY of ty * pos
    | (*% @format(suffix * pos) "suffix" + "==" + suffix *)
      METAEQSUFFIX of string * pos

  (*% *)
  datatype 'a metaif =
      (*%
       * @format(cond conds * mthen mthens * melse melses)
       * "#if" + conds(cond)("," +)
       * 2[ +1 mthens(mthen) ]
       * +1 "#else" 2[ +1 melses(melse) ]
       *)
      METAIF of metacond list * 'a metaif * 'a metaif
    | (*% @format(x * pos) x *)
      META of 'a * pos

  (*
   * precedence of operators of C:
   *
   * 16  (func) [] -> . x++ x--
   * 15  ++x --x sizeof &x *x +x -x ~x !x
   * 14  (cast)
   * 13  * / %
   * 12  + -
   * 11  << >>
   * 10  < <= > >=
   *  9  == !=
   *  8  &
   *  7  ^
   *  6  |
   *  5  &&
   *  4  ||
   *  3  ?:
   *  2  = += -= *= /= %= <<= >>= &= ^= |=
   *  1  ,
   *)

  (*% *)
  (*% @prefix format_c_
   *  @params(dsts)
   *  @formatter(prefix) format_ty
   *  @formatter(ifRI) format_ifRI
   *  @formatter(arg) format_arg
   *  @formatter(int) format_cint
   *)
  datatype ptr =
      (*% @format(exp) "VAR" "(" !N0{ exp ")" } *)
      (*% @prefix format_c_
       *  @format(exp) "!!INVALID:VAR!!" "(" !N0{ exp()() ")" } *)
      VAR of exp
    | (*%
       * @format({base, offset, scale})
       * L15{ "&" L16{ base "[" !L3{ offset + "*" + scale } "]" } }
       *)
      (*% @prefix format_c_
       *  @format({base, offset, scale})
       * L14{ "(void*"")"
       *   L15{ "&"
       *     L16{ L14{ "(char*"")" base()() }
       *          "[" !L3{ offset()() + "*" + scale()() } "]" } } }
       *)
      MEM of {base: exp, offset: exp, scale: exp}
    | (*% @format(exp) "REG" "(" !N0{ exp ")" } *)
      (*% @prefix format_c_ @format(exp)
       *  "REG" "(" !N0{ exp()() ")" } *)
      REG of exp
    | (*% @format(exp) "LOCAL" "(" !N0{ exp ")" } *)
      (*% @prefix format_c_ @format(exp)
       *  "VAR" "(" !N0{ exp()() ")" } *)
      LOCAL of exp

  and acc =
      (*% @format(ty * ptr) !L15{ ptr ":" ty } *)
      (*% @prefix format_c_
       *  @format(ty * ptr)
       *  !L14{ "*("ty"*"")" ptr()() }
       *)
      REF of ty * ptr
    | (*% @format "IP" *)
      (*% @prefix format_c_ @format "ip" *)
      IPREG
    | (*% @format "SP" *)
      (*% @prefix format_c_ @format "sp" *)
      SPREG
    | (*% @format "HR" *)
      (*% @prefix format_c_ @format "hr" *)
      HRREG
    | (*% @format(var * ty * pos) !L15{ var ":" ty } *)
      (*% @prefix format_c_
       *  @format(var * ty * pos) var *)
      TMPVAR of string * ty * pos

  and exp =
      (*% @format(pos) "NULL" *)
      (*% @prefix format_c_ @format(pos) "NULL" *)
      NULL of pos
    | (*% @format(n * ty * pos) !L15{ n ":" ty } *)
      (*% @prefix format_c_
       *  @format(n * ty * pos)
       *  ty:ifRI()("REGNUM(" n ")", n) *)
      NUM of int * ty * pos
    | (*% @format(ty1 * ty2 * pos) !L15{ "sizeof(" ty1 ")" ":" ty2 } *)
      (*% @prefix format_c_
       *  @format(ty1 * ty2 * pos) "sizeof(" ty1 ")" *)
      SIZEOF of ty * ty * pos
    | (*% @format(exp * pos) "LABEL" "(" !N0{ exp ")" } *)
      (*% @prefix format_c_ @format(exp * pos) "LABEL" "(" !N0{ exp()() ")" } *)
      LABELREF of exp * pos
    | (*% @format(arg * ty * pos) !L15{ arg ":" ty } *)
      (*% @prefix format_c_
       *  @format(arg * ty * pos) arg *)
      ARG of arg * ty * pos
    | (*% @format(ptr * pos) !L15{ "&" ptr } *)
      (*% @prefix format_c_
       *  @format(ptr * pos) ptr()() *)
      PTR of ptr * pos
    | (*% @format(acc * pos) acc *)
      (*% @prefix format_c_
       *  @format(acc * pos) acc()() *)
      ACC of acc * pos
    | (*% @format(cond) cond *)
      (*% @prefix format_c_
       *  @format(cond) cond()() *)
      COND of cond
    | (*% @format(exp1 * exp2 * ty * p) L12{ exp1 +1 "+" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L12{ exp1()() + "+" + exp2()() }
       *)
      ADD of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p) L12{ exp1 +1 "-" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L12{ exp1()() + "-" + exp2()() }
       *)
      SUB of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p) L13{ exp1 +1 "*" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L13{ exp1()() + "*" + exp2()() }
       *)
      MUL of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L12{ exp1 +1 "`addo`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "ADDO(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      ADDO of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       * L12{ exp1 +1 "`subo`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "SUBO(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      SUBO of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`mulo`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "MULO(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      MULO of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`divo`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "DIVO(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      DIVO of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`div`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "DIV(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      DIV of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`mod`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "MOD(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      MOD of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`dvmd`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "DIVMOD(" !N0{ ty:prefix "," + exp1()() "," + exp2()() "," +
       *                 dsts ")" }
       *)
      DVMD of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`dvmdo`" ":" ty +1 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "DIVMODO(" !N0{ ty:prefix "," + exp1()() "," + exp2()() "," +
       *                  dsts ")" } *)
      DVMDO of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`quoto`" ":" ty +2 exp2 }*)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "QUOTO(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      QUOTO of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`quot`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "QUOT(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      QUOT of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`rem`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "REM(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      REM of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`qtrm`" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "QUOTREM(" !N0{ ty:prefix "," + exp1()() "," + exp2()() "," +
       *                  dsts ")" }
       *)
      QTRM of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L13{ exp1 +1 "`qtrmo`" ":" ty +1 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "QUOTREMO(" !N0{ ty:prefix "," + exp1()() "," + exp2()() "," +
       *                   dsts ")" }
       *)
      QTRMO of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L11{ exp1 +1 "<<" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "LSHIFT(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      LSHIFT of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L11{ exp1 +1 ">>" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "RSHIFT(" !N0{ ty:prefix "," + exp1()() "," + exp2()() ")" }
       *)
      RSHIFT of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L11{ exp1 +1 ">>>" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  "RASHIFT(" !N0{ ty:prefix "," + exp1()() "," +2 exp2()() ")" }
       *)
      RASHIFT of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L8{ exp1 +1 "&" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L8{ exp1()() + "&" + exp2()() }
       *)
      ANDB of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L6{ exp1 +1 "|" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L6{ exp1()() + "|" + exp2()() }
       *)
      ORB of exp * exp * ty * pos
    | (*% @format(exp * ty * p)
       *  "~" ":" ty "(" !N0{ exp ")" } *)
      (*% @prefix format_c_
       *  @format(exp * ty * p)
       *  L15{ "~" exp()() }
       *)
      NOTB of exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L7{ exp1 +1 "^" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L7{ exp1()() + "^" + exp2()() }
       *)
      XORB of exp * exp * ty * pos
    | (*% @format(exp * ty * p) "ABS" ":" ty "(" !N0{ exp ")" } *)
      (*% @prefix format_c_
       *  @format(exp * ty * p) "ABS(" !N0{ ty:prefix "," + exp()() ")" }
       *)
      ABS of exp * ty * pos
    | (*% @format(exp * ty * p) "ABSO" ":" ty "(" !N0{ exp ")" } *)
      (*% @prefix format_c_
       *  @format(exp * ty * p) "ABSO(" !N0{ ty:prefix "," + exp()() ")" }
       *)
      ABSO of exp * ty * pos
    | (*% @format({fromTy, toTy, exp, pos})
       *  L14{ "(" fromTy ":" toTy ")" exp } *)
      (*% @prefix format_c_
       *  @format({fromTy, toTy, exp, pos})
       *  L14{ "(" toTy ")"  exp()() }
       *)
      CAST of {fromTy: ty, toTy: ty, exp: exp, pos: pos}
    | (*% @format({entry, env, ffty, pos})
       * "FFEXPORT" "(" !N0{ entry "," + env "," + ffty ")" } *)
      (*% @prefix format_c_
       *  @format({entry, env, ffty, pos})
       *  "FFEXPORT" "(" !N0{ entry()() "," + env()() "," + ffty()() ")" }
       *)
      FFEXPORT of {entry: exp, env: exp, ffty: exp, pos: pos}

  and cond =
      (*% @format(exp1 * exp2 * ty * p)
       *  L10{ exp1 +1 ">=" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L10{ exp1()() + ">=" + exp2()() }
       *)
      GE of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L10{ exp1 +1 ">" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L10{ exp1()() + ">" + exp2()() }
       *)
      GT of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L10{ exp1 +1 "<=" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L10{ exp1()() + "<=" + exp2()() }
       *)
      LE of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L10{ exp1 +1 "<" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L10{ exp1()() + "<" + exp2()() }
       *)
      LT of exp * exp * ty * pos
    | (*% @format(exp1 * exp2 * ty * p)
       *  L9{ exp1 +1 "==" ":" ty +2 exp2 } *)
      (*% @prefix format_c_
       *  @format(exp1 * exp2 * ty * p)
       *  L9{ exp1()() + "==" + exp2()() }
       *)
      EQ of exp * exp * ty * pos

  (*%
   *  @formatter(ifNotNull) format_ifNotNull
   *)
  (*% @prefix format_c_
   *  @formatter(ifOnlyOne) format_ifOnlyOne
   *  @formatter(ifNotNull) format_ifNotNull
   *  @formatter(length) format_length
   *  @formatter(rep) format_replace
   *)
  datatype statement =
      (*%
       * @format(cond * mthen mthens * melse melses * pos)
       * "if" + "(" !N0{ cond ")" } + "{"
       *   2[ +1 mthens(mthen)(1) ]
       * +1 "}"
       * melses:ifNotNull()(+ "else" + "{"
       *   2[ +1 melses(melse)(1) ]
       * +1 "}", )
       *)
      (*% @prefix format_c_
       * @format(cond * mthen mthens * melse melses * pos)
       * "if" + "(" !N0{ cond()() ")" } + "{"
       * + mthens(mthen)(+)
       * + "}"
       * melses:ifNotNull()(+ "else" + "{"
       * + melses(melse)(+)
       * + "}", )
       *)
      IF of cond * statement list * statement list * pos
    | (*%
       * @format(acc accs * exp * ty tys * pos)
       * { accs(acc)("," +d) 2[ +1 "=" ":" tys(ty)(",") +2 exp ] ";" }
       *)
      (*% @prefix format_c_
       * @format(acc accs * exp * ty tys * pos)
       * accs:ifOnlyOne()
       * (L2{ accs(acc()())() + "=" + exp()() ";" },
       *  L16{ exp()(accs(acc()())("," +)) } ";")
       *)
      ASSIGN of acc list * exp * ty list * pos
    | (*%
       * @format({dst, size, pos})
       * "ALLOC" "(" !N0{ dst "," +1 size ")" } ";"
       *)
      (*% @prefix format_c_
       * @format({dst, size, pos})
       * "ALLOC" "(" !N0{ dst()() "," + size()() ")" ";" }
       *)
      ALLOC of {dst: acc, size: exp, pos: pos}
    | (*%
       * @format({size, src, dst, pos})
       * "COPY" "(" !N0{ dst "," +1 src "," +1 size ")" ";" }
       *)
      (*% @prefix format_c_
       * @format({size, src, dst, pos})
       * "COPY" "(" !N0{ dst()() "," + src()() ","
       *                 + size()() ")" ";" }
       *)
      COPY of {size: exp, src: exp, dst: exp, pos: pos}
    | (*%
       * @format({objbase, ptr, pos})
       * "BARRIER" "(" !N0{ objbase "," + ptr ")" ";" }
       *)
      (*% @prefix format_c_
       * @format({objbase, ptr, pos})
       * "BARRIER" "(" !N0{ objbase()() "," + ptr()() ")" ";" }
       *)
      BARRIER of {objbase: exp, ptr: exp, pos: pos}
    | (*%
       * @format(size * pos)
       * "ENTER" "(" !N0{ size ")" ";" }
       *)
      (*% @prefix format_c_
       * @format(size * pos)
       * "ENTER" "(" !N0{ size()() ")" ";" }
       *)
      ENTER of exp * pos
    | (*%
       * @format(size * pos)
       * "LEAVE" "(" !N0{ size ")" ";" }
       *)
      (*% @prefix format_c_
       * @format(size * pos)
       * "LEAVE" "(" !N0{ size()() ")" ";" }
       *)
      LEAVE of exp * pos
    | (*%
       * @format(size * pos)
       * "UNWIND" "(" !N0{ size ")" ";" }
       *)
      (*% @prefix format_c_
       * @format(size * pos)
       * "UNWIND" "(" !N0{ size()() ")" ";" }
       *)
      UNWIND of exp * pos
    | (*%
       * @format({func, args: arg args, pos})
       * "FUNCALL" { "(" !N0{ func ")" } d
       *             "(" !N0{ args(arg)("," +) ")" ";" } }
       *)
      (*% @prefix format_c_
       * @format({func, args: arg args, pos})
       * L16{
       *   L14{ "(void(""*"")(" args:rep(arg)("void*",",") "))" func()() }
       *   "(" !N0{ args(arg()())("," +) ")" ";" }
       * }
       *)
      FUNCALL of {func: exp, args: exp list, pos: pos}
    | (*%
       * @format({ffty, entry, dst, args: arg args, pos})
       * "FFCALL" { "(" !N0{ ffty "," + entry "," + dst ")" } d
       *            "(" !N0{ args(arg)("," +) ")" ";" } }
       *)
      (*% @prefix format_c_
       * @format({ffty, entry, dst, args: arg args, pos})
       * args:ifNotNull()(
       *   "FFCALL" args:length "("
       *     !N0{ ffty()() "," + entry()() "," + dst()() "," +
       *          args(arg()())("," +) ")" ";" },
       *   "FFCALL" "(" !N0{ ffty()() "," + entry()() "," + dst()() ")" ";" }
       * )
       *)
      FFCALL of {ffty: exp, entry: exp, dst: exp, args: exp list, pos: pos}
    | (*%
       * @format({prim, pos})
       * "SYSCALL" "(" !N0{ prim ")" ";" }
       *)
      (*% @prefix format_c_
       * @format({prim, pos})
       * "SYSCALL" "(" !N0{ prim()() ")" ";" }
       *)
      SYSCALL of {prim: exp, pos: pos}
    | (*%
       * @format(exp * pos)
       * "PUSHTRAP" "(" exp ")" ";"
       *)
      (*% @prefix format_c_
       * @format(exp * pos)
       * "PUSHTRAP" "(" exp()() ")" ";"
       *)
      PUSHTRAP of exp * pos
    | (*%
       * @format(pos)
       * "POPTRAP" "(" ")" ";"
       *)
      (*% @prefix format_c_
       * @format(pos)
       * "POPTRAP" "(" ")" ";"
       *)
      POPTRAP of pos
    | (*%
       * @format(pos)
       * "RAISE" "(" ")" ";"
       *)
      (*% @prefix format_c_
       * @format(pos)
       * "RAISE" "(" ")" ";"
       *)
      RAISE of pos
    | (*%
       * @format(pos)
       * "CONTINUE" ";"
       *)
      (*% @prefix format_c_
       * @format(pos)
       * "CONTINUE" ";"
       *)
      (* continue execution without status update. *)
      CONTINUE of pos
    | (*%
       * @format(pos)
       * "NEXT" ";"
       *)
      (*% @prefix format_c_
       * @format(pos)
       * "NEXT" ";"
       *)
      (* go to next instruction. *)
      NEXT of pos

  (*%
   * @formatter(ifNotNull) format_ifNotNull
   *)
  (*% @prefix format_c_
   *)
  type semantics =
      (*%
       * @format({tmpvars: var vars,
       *          statements: stmt stmts})
       * vars:ifNotNull()("tmpvar" + {vars(var)("," +d)} +1,)
       * stmts(stmt)(+1)
       *
       * @format:var(v * ty * pos) v ":" ty
       *)
      (*% @prefix format_c_
       * @format({tmpvars: var vars,
       *          statements: stmt stmts})
       * vars(var)()
       * stmts(stmt)("\n")
       *
       * @format:var(v * ty * pos)
       * ty + v ";" "\n"
       *)
      {
        tmpvars: (string * ty * pos) list,
        statements: statement list
      }

  (*% *)
  type preprocess =
      (*
       * @format({name, arg: arg args, pos})
       * sym "(" { args(arg)("," +d) ")" }
       *)
      {
        name: string,
        args: arg list,
        pos: pos
      }

  (*% *)
  type def =
      (*%
       * @format({name,
       *          suffixList: suffix suffixes,
       *          tyList: ty tys,
       *          args: arg args,
       *          syntax: syn synif,
       *          preprocess: prep prepOpt,
       *          semantics: sem semif,
       *          alternate: alt altOpt,
       *          pos})
       * name "<" suffixes(suffix)(",") ">" "{" tys(ty)(",") "}"
       *      + "(" args(arg)("," +) ")" + "{"
       * 2[ +1 "syntax:"
       *    2[ +1 synif(syn) ]
       *    +1 "preprocess:"
       *    2[ +1 prepOpt(prep) ]
       *    +1 "semantics:"
       *    2[ +1 semif(sem) ]
       *    +1 "alternate:"
       *    2[ +1 altOpt(alt) ] ]
       * +1 "}"
       *
       * @format:suffix(s opt) opt(s)
       * @format:syn(fmt fmts) fmts(fmt)(+d)
       *)
      {
        name: string,
        suffixList: string option list,
        tyList: ty list,
        args: arg list,
        syntax: format list metaif,
        preprocess: preprocess option,
        semantics: semantics metaif,
        alternate: semantics option,
        pos: pos
      }

  (*% *)
  type syntaxCase =
       (*%
        * @format({format: fmt fmts, fixed: fix fixes, pos})
        * fmts(fmt)(+d) +d "(" fixes(fix)("," +d) ")"
        *
        * @format:fix(arg * n * pos) arg + "=" + n
        *)
       {
         format: format list,
         fixed: (arg * int * pos) list,
         pos: pos
       }

  (*% *)
  type def_elaborated =
      (*%
       * @format({name,
       *          tyList: ty tys,
       *          codeArgs: arg args,
       *          mnemonicArgs: marg margs,
       *          syntax: syn syns,
       *          preprocess: prep prepOpt,
       *          semantics: sem semif,
       *          alternate: alt altOpt,
       *          pos})
       * name "{" tys(ty)(",") "}"
       *      + "(" args(arg)("," +) ")" + "{"
       * 2[ +1 "mnemonicArgs:"
       *    2[ +1 margs(marg)("," +) ]
       *    +1 "syntax:"
       *    2[ +1 syns(syn)(+1) ]
       *    +1 "preprocess:"
       *    2[ +1 prepOpt(prep) ]
       *    +1 "semantics:"
       *    2[ +1 semif(sem) ]
       *    +1 "alternate:"
       *    2[ +1 altOpt(alt) ] ]
       * +1 "}"
       *)
      {
        name: string,            (* origname + suffix *)
        tyList: ty list,
        mnemonicArgs: arg list,  (* extracted from syntax *)
        codeArgs: arg list,
        syntax: syntaxCase list,
        preprocess: preprocess option,
        semantics: semantics metaif,
        alternate: semantics option,
        pos: pos
      }

  (*% *)
  type def_typechecked =
      (*%
       * @format({name,
       *          mnemonicArgs: marg margs,
       *          syntax: syn syns,
       *          variants: var vars,
       *          pos})
       * name + "{"
       * 2[ +1 "mnemonicArgs:"
       *    2[ +1 margs(marg)("," +) ]
       *    +1 "syntax:"
       *    2[ +1 syns(syn)(+1) ]
       *    +1 "variants:"
       *    2[ +1 vars(var)("," +) ] ]
       * +1 "}"
       *
       * @format:var({ty: ty tyopt,
       *              codeArgs: carg cargs,
       *              preprocess: prep prepOpt,
       *              semantics: sem semif,
       *              alternate: alt altOpt,
       *              pos})
       * "{" tyopt(ty) "}" + "(" cargs(carg)("," +) ")" + "{"
       * 2[ +1 "preprocess:"
       *    2[ +1 prepOpt(prep) ]
       *    +1 "semantics:"
       *    2[ +1 semif(sem) ]
       *    +1 "alternate:"
       *    2[ +1 semif(sem) ] ]
       * +1 "}"
       *
       * @format:carg(arg * ty) arg ":" ty
       *)
      {
        name: string,
        mnemonicArgs: arg list,
        syntax: syntaxCase list,
        variants:
          {
            ty: ty option,
            codeArgs: (arg * ty) list,
            preprocess: preprocess option,
            semantics: semantics metaif,
            alternate: semantics option,
            pos: pos
          } list,
        pos: pos
      }

  (*% @formatter(word) format_word_asInt *)
  type codeField =
      (*%
       * @format({arg, ty, offset, size})
       * arg "[" offset "]" ":" ty ":" size
       *)
      {
        arg: arg,
        ty: ty,
        offset: word,
        size: word
      }

  (*% @formatter(word) format_word_asInt *)
  type codeFormat =
      (*%
       * @format({opcodeSize, fields:field fields, totalSize})
       * "op:" opcodeSize "," +d fields(field)("," +d) +d "<" totalSize ">"
       *)
      {
        opcodeSize: word,
        fields: codeField list,
        totalSize: word
      }

  (*% *)
  type argTy =
      (*%
       * @format({arg, patTy, semTy, prepTy: prep prepOpt})
       * arg ":" patTy ":" semTy ":" prepOpt(prep)
       *)
      {
        arg: arg,
        patTy: ty,          (* type in byte code *)
        semTy: ty,          (* type in semantics *)
        prepTy: ty option   (* type after preprocess *)
      }

  (*% *)
  type def_mother =
      (*%
       * @format({name,
       *          insnId,
       *          mnemonicArgs: marg margs,
       *          variants: var vars,
       *          pos})
       * insnId + ":" + name + "{"
       * 2[ +1 "mnemonicArgs:"
       *    2[ +1 margs(marg)("," +) ]
       *    +1 "variants:"
       *    2[ +1 vars(var)(1) ] ]
       * +1 "}"
       *
       * @format:var({ty: ty tyopt,
       *              variantId,
       *              opcode,
       *              argTys: argTy argTys,
       *              format32,
       *              format64,
       *              preprocess: prep prepOpt,
       *              semantics: sem semif,
       *              alternate: alt altOpt})
       * opcode + ":" + variantId + "{" tyopt(ty) "}" + "{"
       * 2[ +1 "args:"
       *    2[ +1 argTys(argTy)("," +) ]
       *    +1 "format32:"
       *    2[ +1 format32 ]
       *    +1 "format64:"
       *    2[ +1 format64 ]
       *    +1 "preprocess:"
       *    2[ +1 prepOpt(prep) ]
       *    +1 "semantics:"
       *    2[ +1 semif(sem) ]
       *    +1 "alternate:"
       *    2[ +1 altOpt(alt) ] ]
       * +1 "}"
       *)
      {
        name: string,
        insnId: word,
        mnemonicArgs: arg list,
        variants:
          {
            ty: ty option,
            variantId: word,
            opcode: word,
            argTys: argTy list,
            format32: codeFormat,
            format64: codeFormat,
            preprocess: preprocess option,
            semantics: semantics metaif,
            alternate: semantics option
          }
          list,
        pos: pos
      }

  (*% @formatter(word) format_word_asInt *)
  datatype pattern =
      (*% @format({size}) "ANY" "<" size ">" *)
      PATANY of {size: word}
    | (*% @format({size, ty, value}) value ":" ty ":" size *)
      PATINT of {size: word, ty: ty, value: int}

  (*% *)
  type def_impl =
      (*%
       * @format({internalName,
       *          insnName,
       *          implId,
       *          insnId,
       *          variantId,
       *          alternateId: alt altOpt,
       *          argTys: argTy argTys,
       *          assignment: assign assigns,
       *          format32,
       *          format64,
       *          pat32: p32 p32s,
       *          pat64: p64 p64s,
       *          preprocess: prep prepOpt,
       *          semantics,
       *          pos})
       * insnName + ":" + internalName + ":" + implId +
       * "(" insnId "," variantId ")" "{"
       * 2[ +1 "args:"
       *    2[ +1 argTys(argTy)("," +) ]
       *    +1 "alternate:"
       *    2[ +1 altOpt(alt) ]
       *    +1 "format32:"
       *    2[ +1 format32 ]
       *    +1 "format64:"
       *    2[ +1 format64 ]
       *    +1 "pat32:"
       *    2[ +1 p32s(p32)(+d) ]
       *    +1 "pat64:"
       *    2[ +1 p64s(p64)(+d) ]
       *    +1 "preprocess:"
       *    2[ +1 prepOpt(prep) ]
       *    +1 "semantics:"
       *    2[ +1 semantics ] ]
       * +1 "}"
       *)
      {
        internalName: string,
        insnName: string,
        implId: int,
        insnId: word,
        variantId: word,
        alternateId: int option,
        argTys: argTy list,
        assignment: (arg * int) list,
        (* FIXME: format should be list for instruction fusion. *)
        format32: codeFormat,
        format64: codeFormat,
        pat32: pattern list,
        pat64: pattern list,
        preprocess: preprocess option,
        semantics: semantics,
        pos: pos
      }

(*
  (*% @prefix format_c_
   * @formatter(int) format_cint
   * @formatter(ty)  format_ty
   *)
  datatype cstmt =
      (*% @prefix format_c_ *)
      SWITCH of cexp * (int * cstmt list) * cstmt list
    | (*% @prefix format_c_ *)
      IF of cexp * cstmt list * cstmt list
    | (*% @prefix format_c_ *)
      BREAK

  and cexp =
      (*% @prefix format_c_ *)
      CONST of int
    | (*% @prefix format_c_ *)
      VAR of string
    | (*% @prefix format_c_ *)
      ACC of cexp * cexp
    | (*% @prefix format_c_ *)
      ADDR of cexp
    | (*% @prefix format_c_ *)
      DEREF of cexp
    | (*% @prefix format_c_ *)
      CAST of cty * cexp
    | (*% @prefix format_c_ *)
      GE of cexp * cexp

  and cty =
      (*% @prefix format_c_ *)
      POINTER of cty
    | (*% @prefix format_c_ *)
      CTY of ty
*)


  (* extra formatters *)
  fun formatArg x = SMLFormat.prettyPrint [] (format_arg x)
  fun formatTy x = SMLFormat.prettyPrint [] (format_ty x)
  fun formatCPatTy wordSize ty =
      SMLFormat.prettyPrint []
          (format_c_pat_ty (format_word_asInt wordSize) ty)
  fun formatCSemTy ty =
      SMLFormat.prettyPrint [] (format_c_ty ty)
  fun formatCSemantics x =
      SMLFormat.prettyPrint [] (format_c_semantics x)

  fun formatSemNum ty x =
      SMLFormat.prettyPrint [] (format_c_exp nil (NUM (x, ty, (~1,~1))))

  fun getPos stmt =
      case stmt of
        IF (_,_,_,pos) => pos
      | ASSIGN (_,_,_,pos) => pos
      | ALLOC {pos,...} => pos
      | COPY {pos,...} => pos
      | BARRIER {pos,...} => pos
      | ENTER (_, pos) => pos
      | LEAVE (_, pos) => pos
      | UNWIND (_, pos) => pos
      | FUNCALL {pos,...} => pos
      | FFCALL {pos,...} => pos
      | SYSCALL {pos,...} => pos
      | PUSHTRAP (_, pos) => pos
      | POPTRAP pos => pos
      | RAISE pos => pos
      | CONTINUE pos => pos
      | NEXT pos => pos

  (* location in source file *)

  type source =
      {
        filename: string,
        lineStartPos: int list ref  (* destructively updated by lexer *)
      }

  val nopos = (~1, ~1) : pos

  fun loc ({filename, lineStartPos}:source, (lpos, rpos):pos) =
      let
        fun drop f nil = nil
          | drop f (h::t) = if f h then drop f t else h::t

        fun linePos (ref lineStartPos) pos =
            if pos < 0 then (0, pos)
            else case drop (fn n => n > pos) lineStartPos of
                   l as h::_ => (length l + 1, pos - h)
                 | nil => (1, pos)

        val lpos = linePos lineStartPos lpos
        val rpos = linePos lineStartPos rpos
      in
        (filename, lpos, rpos)
      end

  fun locToString (filename, lpos, rpos) =
      let
        fun posToString (0, x) = "EOF"
          | posToString (x, y) = Int.toString x ^ "." ^ Int.toString y
      in
        filename ^ ":" ^ posToString lpos ^ "-" ^ posToString rpos
      end

  end
  end
end
